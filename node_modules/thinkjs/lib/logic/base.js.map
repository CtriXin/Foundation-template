{"version":3,"sources":["../../src/logic/base.js"],"names":["_getValidateItemMethod","itemData","list","i","length","item","method","_isRest","_method","get","http","toLowerCase","indexOf","_parseValidateData","data","result","allowTypes","name","think","isString","validate","parse","extend","object","value","flag","some","string","_mergeCleanRules","rules","listData","post","methods","forEach","index","key","_validateInvoked","isEmpty","ret","locale","assign","values","isNaN","errors","__after","error","config","allowMethods","split","fail","validate_errno","controller","base"],"mappings":"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","file":"base.js","sourcesContent":["'use strict';\n\n/**\n * base logic\n * inherits from base controller\n * @type {Class}\n */\nexport default class extends think.controller.base {\n  /**\n   * get validate method\n   * @return {} []\n   */\n  _getValidateItemMethod(itemData){\n    let list = ['get', 'post', 'file'];\n    for(let i = 0, length = list.length; i < length; i++){\n      let item = list[i];\n      if(itemData[list[i]]){\n        delete itemData[item];\n        return item;\n      }\n    }\n    //for rest request\n    let method = this._isRest && this._method;\n    if(method){\n      method = this.get(method);\n    }\n    if(!method){\n      method = this.http.method.toLowerCase();\n    }\n    if(method === 'put' || method === 'patch'){\n      return 'post';\n    }\n    if(list.indexOf(method) > -1){\n      return method;\n    }\n    return 'post';\n  }\n  /**\n   * parse validate data\n   * {\n   *   name: 'required|int|min:10|max:20',\n   *   title: 'length:10,20|default:welefen|get',\n   *   emai: 'required|email:{}',\n   *   ids: 'required|array|int'\n   * }\n   * @param  {Array}  data []\n   * @return {Array}      []\n   */\n  _parseValidateData(data = {}){\n    let result = {};\n    let allowTypes = ['boolean', 'int', 'float', 'string', 'array', 'object'];\n    for(let name in data){\n\n      let itemData = data[name];\n      if(think.isString(itemData)){\n        itemData = think.validate.parse(itemData);\n      }else{\n        itemData = think.extend({}, itemData);\n      }\n\n      let method = this._getValidateItemMethod(itemData);\n      if(method === 'file'){\n        itemData.object = true;\n      }\n      itemData._method = method;\n      //ignore set itemData.value when aleady has it\n      if(!('value' in itemData)){\n        itemData.value = this[method](name);\n      }\n      \n      let flag = allowTypes.some(item => {\n        return item in itemData;\n      });\n      if(!flag){\n        itemData.string = true;\n      }\n      \n      result[name] = itemData;\n    }\n    return result;\n  }\n  /**\n   * merge clean rules(only value)\n   * @param  {Object} rules []\n   * @return {Object}       []\n   */\n  _mergeCleanRules(rules){\n    let listData = [this.post(), this.get()];\n    let methods = ['post', 'get'];\n    listData.forEach((item, index) => {\n      for(let key in item){\n        if(!rules[key]){\n          rules[key] = {\n            value: item[key],\n            _method: methods[index]\n          };\n        }\n      }\n    });\n    return rules;\n  }\n  /**\n   * validate data\n   * this.validate({\n   *   welefen: 'required|length:4,20|alpha',\n   *   email: 'required|email',\n   *   title: 'required|maxLength:10000'\n   * })\n   * @param  {Object} data      []\n   * @return {}           []\n   */\n  validate(rules) {\n    this._validateInvoked = true;\n    if(think.isEmpty(rules)){\n      return true;\n    }\n    rules = this._parseValidateData(rules);\n    rules = this._mergeCleanRules(rules);\n\n    let methods = {};\n    for(let name in rules){\n      methods[name] = rules[name]._method;\n      delete rules[name]._method;\n    }\n\n    let ret = think.validate(rules, this.locale());\n    if(!think.isEmpty(ret)){\n      this.assign('errors', ret);\n      return false;\n    }\n\n    //set values\n    let values = think.validate.values(rules);\n    for(let name in values){\n      let method = methods[name];\n      let value = values[name];\n      if(value !== '' && (typeof value !== 'number' || !isNaN(value))){\n        this[method](name, value);\n      }\n    }\n\n    return true;\n  }\n  /**\n   * get validate errors\n   * @return {Object} []\n   */\n  errors() {\n    return this.assign('errors');\n  }\n  /**\n   * auto validate\n   * @return {} []\n   */\n  __after(){\n    let error = this.config('error');\n    \n    //check request method\n    let allowMethods = this.allowMethods;\n    if(!think.isEmpty(allowMethods)){\n      if(think.isString(allowMethods)){\n        allowMethods = allowMethods.split(',');\n      }\n      let method = this.http.method.toLowerCase();\n      if(allowMethods.indexOf(method) === -1){\n        return this.fail(error.validate_errno, this.locale('METHOD_NOT_ALLOWED')); \n      }\n    }\n\n    //check rules\n    if(think.isEmpty(this.rules) || this._validateInvoked){\n      return;\n    }\n    let flag = this.validate(this.rules);\n    if(!flag){\n      return this.fail(error.validate_errno, this.errors());\n    }\n  }\n}"]}