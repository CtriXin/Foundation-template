{"version":3,"sources":["../src/command.js"],"names":["sep","cwd","process","templatePath","dirname","__dirname","projectRootPath","modeList","think","mode","mode_module","getDateTime","fn","d","slice","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","log","colors","mkdir","isDir","dir","cyan","relative","getVersion","filepath","resolve","version","JSON","parse","readFileSync","getProjectAppPath","path","es5","ts","getAppName","normalize","replace","matched","match","copyFile","source","target","showWarning","undefined","isBoolean","isFile","yellow","tsSource","a","indexOf","esSource","content","isObject","key","content1","writeFileSync","isThinkApp","isModuleExist","modelPath","getPath","module","parseAppConfig","data","APP_PATH","getProjectViewPath","viewConfigFile","mode_normal","ROOT_PATH","require","viewRootPath","root_path","default","viewPath","_checkEnv","console","red","exit","_copyWwwFiles","name","test","_copyErrorTemplateFiles","controllerPath","commonViewPath","getSecret","length","str","arr","split","sort","Math","random","join","_copyCommonConfigFiles","rootPath","_copyCommonBootstrapFiles","_createModule","configPath","logicPath","createModule","createController","controller","file","rest","createService","service","servicePath","createModel","model","relation","mongo","createMiddleware","midlewarePath","middleware","createAdapter","adapter","type","adapterPath","_createProject","createProject","p","createPlugin","pluginName","basename","toLowerCase","displayVersion","chars","usage","option","command","description","action","projectPath","pluginPath","argv"],"mappings":"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","file":"command.js","sourcesContent":["// thinkjs command\n\nimport fs from 'fs';\nimport path from 'path';\nimport commander from 'commander';\nimport './core/think.js';\n\nlet {sep} = path;\nlet cwd = process.cwd();\nlet templatePath = path.dirname(__dirname) + sep + 'template';\nlet projectRootPath = cwd; //project root path\nlet modeList = ['normal', 'module'];\n\nthink.mode = think.mode_module;\n\n\n/**\n * get date time\n * @return {} []\n */\nlet getDateTime = () => {\n  let fn = d => {\n    return ('0' + d).slice(-2);\n  };\n  let d = new Date();\n  let date = d.getFullYear() + '-' + fn(d.getMonth() + 1) + '-' + fn(d.getDate());\n  let time = fn(d.getHours()) + ':' + fn(d.getMinutes()) + ':' + fn(d.getSeconds());\n  return date + ' ' + time;\n};\n/**\n * log\n * @param  {Function} fn []\n * @return {}      []\n */\nlet log = fn => {\n  think.log(colors => {\n    return '  ' + fn(colors);\n  }, '', null); \n};\n\n/**\n * mkdir\n * @param  {String} dir []\n * @return {}     []\n */\nlet mkdir = dir => {\n  if(think.isDir(dir)){\n    return;\n  }\n  think.mkdir(dir);\n  log(colors => {\n    return colors.cyan('create') + ' : ' + path.relative(cwd, dir);\n  });\n};\n\n/**\n * get version\n * @return {String} []\n */\nlet getVersion = () => {\n  let filepath = path.resolve(__dirname, '../package.json');\n  let version = JSON.parse(fs.readFileSync(filepath)).version;\n  return version;\n};\n\n/**\n * get app root path\n * @return {} []\n */\nlet getProjectAppPath = () => {\n  let path = projectRootPath + think.sep;\n  path += !commander.es5 || commander.ts ? 'src' : 'app';\n  return path;\n};\n/**\n * get app name\n * @return {} []\n */\nlet getAppName = () => {\n  let filepath = path.normalize(cwd + '/' + projectRootPath).replace(/\\\\/g, '');\n  let matched = filepath.match(/([^\\/]+)\\/?$/);\n  return matched[1];\n};\n\n/**\n * copy file\n * @param  {String} source []\n * @param  {String} target []\n * @return {}        []\n */\nlet copyFile = (source, target, replace, showWarning) => {\n\n  if(showWarning === undefined){\n    showWarning = true;\n  }\n\n  if(think.isBoolean(replace)){\n    showWarning = replace;\n    replace = '';\n  }\n\n  //if target file is exist, ignore it\n  if(think.isFile(target)){\n    if(showWarning){\n      log(colors => {\n        return colors.yellow('exist') + ' : ' + path.normalize(target);\n      });\n    }\n    return;\n  }\n\n  mkdir(path.dirname(target));\n\n  let es5 = commander.es5;\n\n  //TypeScript\n  if(commander.ts){\n    let tsSource = source.replace(/\\.\\w+$/, a => {\n      return a === '.js' ? '.ts' : '_ts' + a;\n    });\n    if(think.isFile(templatePath + '/' + tsSource)){\n      source = tsSource;\n    }\n    if(target.indexOf(think.sep + 'src' + think.sep) > -1){\n      //replace target file extname to .ts\n      target = target.replace(/\\.js$/, '.ts');\n    }\n  }\n  //ECMAScript 2015/2016\n  else if(!es5){\n    let esSource = source.replace(/\\.\\w+$/, a => {\n      return a === '.js' ? '.es' : '_es' + a;\n    });\n    if(think.isFile(templatePath + think.sep + esSource)){\n      source = esSource;\n    }\n  }\n\n  //if source file is not exist\n  if(!think.isFile(templatePath + think.sep + source)){\n    return;\n  }\n\n  let content = fs.readFileSync(templatePath + think.sep + source, 'utf8');\n  //replace content \n  if(think.isObject(replace)){\n    for(let key in replace){\n      /*eslint-disable no-constant-condition*/\n      while(1){ \n        let content1 = content.replace(key, replace[key]);\n        if(content1 === content){\n          content = content1;\n          break;\n        }\n        content = content1;\n      }\n    }\n  }\n\n  fs.writeFileSync(target, content);\n  log(colors => {\n    return colors.cyan('create') + ' : ' + path.relative(cwd, target);\n  });\n};\n\n/**\n * check is thinkjs app\n * @param  {String}  projectRootPath []\n * @return {Boolean}             []\n */\nlet isThinkApp = projectRootPath => {\n  if(think.isDir(projectRootPath)){\n    let filepath = projectRootPath + '/.thinkjsrc';\n    if(think.isFile(filepath)){\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * is module exist\n * @param  {String}  module []\n * @return {Boolean}        []\n */\nlet isModuleExist = module => {\n  let modelPath = think.getPath(module, 'model');\n  // if(think.mode === think.mode_normal){\n  //   modelPath = think.getPath(module, 'controller');\n  // }\n  return think.isDir(modelPath);\n};\n/**\n * parse app config\n * @param  {} projectRootPath []\n * @return {}             []\n */\nlet parseAppConfig = () => {\n  let filepath = projectRootPath + '/.thinkjsrc';\n  let content = fs.readFileSync(filepath, 'utf8');\n  let data = JSON.parse(content);\n\n  commander.ts = data.ts;\n  //commander.es = data.es || data.es6; //compatible with 2.0.x\n  think.mode = think['mode_' + data.mode];\n\n  think.APP_PATH = getProjectAppPath();\n};\n\n/**\n * get view root path;\n * @return {String}             []\n */\nlet getProjectViewPath = module => {\n  let APP_PATH = think.APP_PATH;\n\n  think.APP_PATH = projectRootPath + '/view';\n\n  //read view config, view root_path may be changed it.\n  let viewConfigFile = projectRootPath + '/app/common/config/view.js';\n  if(think.mode === think.mode_normal){\n    viewConfigFile = projectRootPath + '/app/config/view.js';\n  }\n  think.ROOT_PATH = projectRootPath;\n  if(think.isFile(viewConfigFile)){\n    let data = require(viewConfigFile);\n    let viewRootPath = path.normalize(data.root_path || data.default && data.default.root_path);\n    think.APP_PATH = viewRootPath;\n  }\n  let viewPath = think.getPath(module, '');\n\n\n  think.APP_PATH = APP_PATH;\n  return path.normalize(viewPath).slice(0, -1);\n};\n\n/**\n * check env\n * @return {} []\n */\nlet _checkEnv = () => {\n  if(!isThinkApp('./')){\n    console.log();\n    log(colors => {\n      return colors.red('current path is not thinkjs project.\\n');\n    });\n    process.exit();\n  }\n  parseAppConfig();\n  console.log();\n};\n\n/**\n * copy common files\n * @param  {String} projectRootPath []\n * @return {}             []\n */\nlet _copyWwwFiles = () => {\n  mkdir(projectRootPath);\n\n  let name = commander.test ? 'package_test' : 'package';\n  copyFile(name + '.json', projectRootPath + '/package.json');\n\n  let mode = 'normal';\n  if(think.mode === think.mode_module){\n    mode = 'module';\n  }\n  copyFile('thinkjsrc.json', projectRootPath + '/.thinkjsrc', {\n    '<createAt>': getDateTime(),\n    '<mode>': mode\n  });\n\n  let ROOT_PATH = projectRootPath + '/www';\n  copyFile('nginx.conf', projectRootPath + '/nginx.conf', {\n    '<ROOT_PATH>': ROOT_PATH\n  });\n\n  copyFile('pm2.json', projectRootPath + '/pm2.json', {\n    '<ROOT_PATH>': path.dirname(ROOT_PATH),\n    '<APP_NAME>': getAppName()\n  });\n\n  copyFile('gitignore.log', projectRootPath + '/.gitignore');\n  copyFile('README.md', projectRootPath + '/README.md');\n\n  if(commander.ts){\n    copyFile('bin/compile.ts', projectRootPath + '/bin/compile.js');\n    copyFile('think.d.ts', projectRootPath + '/typings/thinkjs/think.d.ts');\n  }\n\n  mkdir(projectRootPath + '/www');\n  copyFile('www/development.js', projectRootPath + '/www/development.js');\n  copyFile('www/production.js', projectRootPath + '/www/production.js');\n  copyFile('www/testing.js', projectRootPath + '/www/testing.js');\n  copyFile('www/README.md', projectRootPath + '/www/README.md');\n\n  mkdir(projectRootPath + '/www/static/');\n  mkdir(projectRootPath + '/www/static/js');\n  mkdir(projectRootPath + '/www/static/css');\n  mkdir(projectRootPath + '/www/static/img');\n};\n/**\n * copy error template files\n * @param  {String} projectRootPath []\n * @return {}             []\n */\nlet _copyErrorTemplateFiles = () => {\n\n  let module = 'common';\n  if(think.mode === think.mode_normal){\n    module = 'home';\n  }\n\n  let controllerPath = think.getPath(module, 'controller');\n  mkdir(controllerPath);\n  copyFile('controller/error.js', controllerPath + '/error.js');\n\n  let commonViewPath = getProjectViewPath(module);\n\n  mkdir(commonViewPath);\n  copyFile('view/error_400.html', commonViewPath + '/error_400.html');\n  copyFile('view/error_403.html', commonViewPath + '/error_403.html');\n  copyFile('view/error_404.html', commonViewPath + '/error_404.html');\n  copyFile('view/error_500.html', commonViewPath + '/error_500.html');\n  copyFile('view/error_503.html', commonViewPath + '/error_503.html');\n};\n\nlet getSecret = length => {\n  length = length || 8;\n  let str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()`1234567890';\n  let arr = str.split('').sort(() => {\n    return Math.random() >= 0.5 ? 1 : -1;\n  }).slice(0, length);\n  return arr.join('');\n};\n/**\n * copy common config files\n * @return {}             []\n */\nlet _copyCommonConfigFiles = () => {\n  let rootPath = think.getPath('common', 'config');\n  mkdir(rootPath);\n\n  copyFile('config/config.js', rootPath + '/config.js', false);\n  copyFile('config/view.js', rootPath + '/view.js');\n  copyFile('config/db.js', rootPath + '/db.js');\n  copyFile('config/hook.js', rootPath + '/hook.js');\n  copyFile('config/session.js', rootPath + '/session.js', {\n    '<SECRET>': getSecret()\n  });\n  copyFile('config/error.js', rootPath + '/error.js');\n\n  mkdir(rootPath + '/env');\n  copyFile('config/env/development.js', rootPath + '/env/development.js');\n  copyFile('config/env/testing.js', rootPath + '/env/testing.js');\n  copyFile('config/env/production.js', rootPath + '/env/production.js');\n\n  mkdir(rootPath + '/locale');\n  copyFile('config/locale/en.js', rootPath + '/locale/en.js');\n};\n/**\n * copy bootstrap files\n * @return {}             []\n */\nlet _copyCommonBootstrapFiles = () => {\n  let rootPath = think.getPath('common', 'bootstrap');\n  mkdir(rootPath);\n\n  copyFile('bootstrap/middleware.js', rootPath + '/middleware.js');\n  copyFile('bootstrap/global.js', rootPath + '/global.js');\n};\n\n\n/**\n * create module\n * @param  {String} module      []\n * @return {}             []\n */\nlet _createModule = module => {\n  if(think.mode !== think.mode_module && module !== 'home'){\n    log(colors => {\n      return colors.red('app mode is not module, can not create module.\\n');\n    });\n    process.exit();\n  }\n  if(isModuleExist(module)){\n    log(colors => {\n      return colors.red('module `' + module + '` is exist.\\n');\n    });\n    process.exit();\n  }\n  \n  //config files\n  let configPath = think.getPath(module, 'config');\n  mkdir(configPath);\n  copyFile('config/config.js', configPath + '/config.js', false);\n\n  //controller files\n  let controllerPath = think.getPath(module, 'controller');\n  mkdir(controllerPath);\n  copyFile('controller/base.js', controllerPath + '/base.js');\n  copyFile('controller/index.js', controllerPath + '/index.js');\n\n  //logic files\n  let logicPath = think.getPath(module, 'logic');\n  mkdir(logicPath);\n  copyFile('logic/index.js', logicPath + '/index.js');\n\n  //model files\n  let modelPath = think.getPath(module, 'model');\n  mkdir(modelPath);\n  copyFile('model/index.js', modelPath + '/index.js', false);\n\n  //view files\n  let viewPath = getProjectViewPath(module);\n  mkdir(viewPath);\n  copyFile('view/index_index.html', viewPath + '/index_index.html');\n};\n\n/**\n * create module\n * @param  {} module []\n * @return {}        []\n */\nlet createModule = module => {\n  _checkEnv();\n\n  if(module === 'common'){\n    return;\n  }\n  \n  _createModule(module);\n};\n/**\n * create controller\n * @param  {} controller []\n * @return {}            []\n */\nlet createController = controller => {\n  _checkEnv();\n\n  controller = controller.split('/');\n  let module = 'common';\n  if(controller.length >= 2){\n    module = controller[0];\n    controller = controller.slice(1).join('/');\n  }else{\n    controller = controller[0];\n  }\n\n  if(!isModuleExist(module)){\n    createModule(module);\n  }\n\n  let controllerPath = think.getPath(module, 'controller');\n  let file = 'index.js';\n  if(commander.rest){\n    file = 'rest.js';\n  }\n  copyFile('controller/' + file, controllerPath + '/' + controller + '.js');\n\n  let logicPath = think.getPath(module, 'logic');\n  copyFile('logic/index.js', logicPath + '/' + controller + '.js');\n\n  console.log();\n};\n\n/**\n * create service\n * @param  {} controller []\n * @return {}            []\n */\nlet createService = service => {\n  _checkEnv();\n\n  service = service.split('/');\n  let module = 'common';\n  if(service.length === 2){\n    module = service[0];\n    service = service[1];\n  }else{\n    service = service[0];\n  }\n\n  if(!isModuleExist(module)){\n    createModule(module);\n  }\n\n  let servicePath = think.getPath(module, 'service');\n  copyFile('service/index.js', servicePath + '/' + service + '.js');\n\n  console.log();\n};\n/**\n * create model file\n * @param  {String} model []\n * @return {}       []\n */\nlet createModel = model => {\n  _checkEnv();\n\n  model = model.split('/');\n  let module = 'common';\n  if(model.length === 2){\n    module = model[0];\n    model = model[1];\n  }else{\n    model = model[0];\n  }\n\n  if(!isModuleExist(module)){\n    createModule(module);\n  }\n\n  let file = 'index.js';\n  if(commander.relation){\n    file = 'relation.js';\n  }else if(commander.mongo){\n    file = 'mongo.js';\n  }\n  let controllerPath = think.getPath(module, 'model');\n  copyFile('model/' + file, controllerPath + '/' + model + '.js');\n\n  console.log();\n};\n\n/**\n * create middleware\n * @param  {String} middleware []\n * @return {[type]}            []\n */\nlet createMiddleware = middleware => {\n  _checkEnv();\n  let midlewarePath = think.getPath('common', 'middleware');\n  let filepath = midlewarePath + '/' + middleware + '.js';\n  mkdir(midlewarePath);\n  copyFile('middleware/base.js', filepath);\n\n  console.log();\n};\n\n/**\n * create adapter\n * @param  {String} adatper []\n * @return {}         []\n */\nlet createAdapter = adapter => {\n  _checkEnv();\n\n  adapter = adapter.split('/');\n\n  let type = adapter[0];\n  let name = adapter[1] || 'base';\n\n  let adapterPath = think.getPath('common', 'adapter');\n\n  copyFile('adapter/base.js', adapterPath + '/' + type + '/' + name + '.js');\n\n  console.log();\n};\n\n/**\n * module app\n * @param  {} projectRootPath []\n * @return {}             []\n */\nlet _createProject = () => {\n\n  _copyWwwFiles();\n\n  mkdir(think.APP_PATH);\n\n  _copyCommonBootstrapFiles();\n  _copyCommonConfigFiles();\n  _copyErrorTemplateFiles();\n\n  _createModule('home');\n\n  if(commander.test){\n    copyFile('test/index.js', projectRootPath + '/test/index.js');\n  }\n};\n/**\n * create project\n * @param  {String} projectRootPath []\n * @return {}             []\n */\nlet createProject = () => {\n  if(isThinkApp(projectRootPath)){\n    console.log();\n    log(colors => {\n      return colors.red('path `' + projectRootPath + '` is already a thinkjs project.\\n');\n    });\n    return;\n  }\n  console.log();\n\n  think.APP_PATH = getProjectAppPath();\n  _createProject();\n\n\n  let p = projectRootPath.slice(cwd.length);\n  if(p[0] === think.sep){\n    p = p.slice(1);\n  }\n\n  console.log();\n  console.log('  enter path:');\n  console.log('  $ cd ' + p);\n  console.log();\n\n  console.log('  install dependencies:');\n  console.log('  $ npm install');\n  console.log();\n\n  console.log('  run the app:');\n  console.log('  $ npm start');\n\n  console.log();\n};\n\n/**\n * create plugin\n * @return {} []\n */\nlet createPlugin = () => {\n  console.log();\n  \n  mkdir(projectRootPath);\n\n  let pluginName = path.basename(projectRootPath).toLowerCase();\n  pluginName = pluginName.replace(/\\_/g, '-');\n  if(pluginName[0] === '-'){\n    pluginName = pluginName.slice(1);\n  }\n  if(pluginName.indexOf('think-') !== 0){\n    pluginName = 'think-' + pluginName;\n  }\n\n  copyFile('plugin/src/index.js', projectRootPath + '/src/index.js');\n  copyFile('plugin/test/index.js', projectRootPath + '/test/index.js', {\n    '<PLUGIN_NAME>': pluginName\n  });\n  copyFile('plugin/.eslintrc', projectRootPath + '/.eslintrc');\n  copyFile('plugin/gitignore', projectRootPath + '/.gitignore');\n  copyFile('plugin/.npmignore', projectRootPath + '/.npmignore');\n  copyFile('plugin/.travis.yml', projectRootPath + '/.travis.yml');\n  copyFile('plugin/package.json', projectRootPath + '/package.json', {\n    '<PLUGIN_NAME>': pluginName\n  });\n  copyFile('plugin/README.md', projectRootPath + '/README.md', {\n    '<PLUGIN_NAME>': pluginName\n  });\n\n  console.log();\n  console.log('  enter path:');\n  console.log('  $ cd ' + projectRootPath);\n  console.log();\n\n  console.log('  install dependencies:');\n  console.log('  $ npm install');\n  console.log();\n\n  console.log('  watch compile:');\n  console.log('  $ npm run watch-compile');\n  console.log();\n\n  console.log('  run test:');\n  console.log('  $ npm run test-cov');\n\n  console.log();\n\n};\n/**\n * display thinkjs version\n * @return {} []\n */\nlet displayVersion = () => {\n  let version = getVersion();\n  let chars = [\n    ' _______ _     _       _        _  _____ ',\n    '|__   __| |   (_)     | |      | |/ ____|',\n    '   | |  | |__  _ _ __ | | __   | | (___  ',\n    '   | |  | \\'_ \\\\| | \\'_ \\\\| |/ /   | |\\\\___ \\\\ ',\n    '   | |  | | | | | | | |   < |__| |____) |',\n    '   |_|  |_| |_|_|_| |_|_|\\\\_\\\\____/|_____/ ',\n    '                                         '                                       \n  ].join('\\n');\n  console.log('\\n v' + version + '\\n');\n  console.log(chars);\n};\n\n\ncommander.usage('[command] <options ...>');\ncommander.option('-v, --version', 'output the version number', () => {\n  displayVersion();\n});\ncommander.option('-V', 'output the version number', () => {\n  displayVersion();\n});\ncommander.option('--es5', 'use es5 for project, used in `new` command');\ncommander.option('-t, --ts', 'use TypeScript for project, used in `new` command');\ncommander.option('-T, --test', 'add test dirs when create project, used in `new` command');\ncommander.option('-r, --rest', 'create rest controller, used in `controller` command');\ncommander.option('-M, --mongo', 'create mongo model, used in `model` command');\ncommander.option('-R, --relation', 'create relation model, used in `model` command');\ncommander.option('-m, --mode <mode>', 'project mode type(normal, module), default is module, used in `new` command', mode => {\n  if(modeList.indexOf(mode) === -1){\n    console.log('mode value must one of ' + modeList.join(', '));\n    process.exit();\n  }\n  think.mode = think['mode_' + mode];\n});\n\n//create project\ncommander.command('new <projectPath>').description('create project').action(projectPath => {\n  projectRootPath = path.resolve(projectRootPath, projectPath);\n  //commander.es = commander.es || commander.es6;\n  createProject();\n});\n\n//create module\ncommander.command('module <moduleName>').description('add module').action(module => {\n  createModule(module.toLowerCase());\n});\n\n//create controlelr\ncommander.command('controller <controllerName>').description('add controller').action(controller => {\n  createController(controller.toLowerCase());\n});\n\n//create service\ncommander.command('service <serviceName>').description('add service').action(service => {\n  createService(service.toLowerCase());\n});\n\n//create model\ncommander.command('model <modelName>').description('add model').action(model => {\n  createModel(model.toLowerCase());\n});\n\n//create middleware\ncommander.command('middleware <middlewareName>').description('add middleware').action(middleware => {\n  createMiddleware(middleware.toLowerCase());\n});\n\n//create adapter\ncommander.command('adapter <adapterName>').description('add adapter').action(adapter => {\n  createAdapter(adapter.toLowerCase());\n});\n\n//create plugin\ncommander.command('plugin <pluginPath>').description('create ThinkJS plugin').action(pluginPath => {\n  projectRootPath = path.resolve(projectRootPath, pluginPath);\n  \n  createPlugin();\n});\n\ncommander.parse(process.argv);  "]}