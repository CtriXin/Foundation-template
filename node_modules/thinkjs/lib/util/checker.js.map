{"version":3,"sources":["../../src/util/checker.js"],"names":["checkNodeVersion","packageFile","think","THINK_PATH","JSON","parse","readFileSync","engines","needVersion","node","substr","nodeVersion","process","version","slice","log","checkFileName","files","getFiles","APP_PATH","reg","uppercaseReg","localPath","sep","dirname","locale","filter","test","item","normalize","indexOf","forEach","checkDependencies","ROOT_PATH","isFile","data","dependencies","extend","env","devDependencies","pkgAlias","pkgPath","pkg","isDir","require","e","checkModuleConfig","mode","mode_module","keys","errorKey","errorConfigKeys","thinkCache","COLLECTION","isEmpty","checkMConfig","length","safeRequire","THINK_LIB_PATH","configFilePath","getPath","module","config","key","push","modules"],"mappings":"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","file":"checker.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\n\nexport default {\n  /**\n   * check node version\n   * @return {} []\n   */\n  checkNodeVersion(){\n    let packageFile = `${think.THINK_PATH}/package.json`;\n    let {engines} = JSON.parse(fs.readFileSync(packageFile, 'utf-8'));\n    let needVersion = engines.node.substr(2);\n\n    let nodeVersion = process.version;\n    if(nodeVersion[0] === 'v'){\n      nodeVersion = nodeVersion.slice(1);\n    }\n\n    if(needVersion > nodeVersion){\n      think.log(`ThinkJS need node version >= ${needVersion}, current version is ${nodeVersion}, please upgrade it.`, 'EXIT');\n    }\n  },\n  /**\n   * check application filename is lower\n   * @return {} []\n   */\n  checkFileName(){\n    let files = think.getFiles(think.APP_PATH, true);\n    let reg = /\\.(js|html|tpl)$/;\n    let uppercaseReg = /[A-Z]+/;\n    let localPath = `${think.sep}${think.dirname.locale}${think.sep}`;\n    let filter = item => {\n      if(!reg.test(item)){\n        return;\n      }\n      item = path.normalize(item);\n      //ignore files in config/locale\n      if(item.indexOf(localPath) > -1){\n        return;\n      }\n      return true;\n    };\n    files.forEach(item => {\n      if(filter(item) && uppercaseReg.test(item)){\n        think.log(`file \\`${item}\\` has uppercase chars.`, 'WARNING');\n      }\n    });\n  },\n  /**\n   * check dependencies is installed before server start\n   * @return {} []\n   */\n  checkDependencies(){\n    let packageFile = think.ROOT_PATH + '/package.json';\n    if(!think.isFile(packageFile)){\n      return;\n    }\n    let data = JSON.parse(fs.readFileSync(packageFile, 'utf8'));\n    let dependencies = think.extend({}, data.dependencies);\n    //only merge devDependencies in development env\n    if(think.env === 'development'){\n      dependencies = think.extend(dependencies, data.devDependencies);\n    }\n    //package alias\n    let pkgAlias = {\n      'babel-runtime': 'babel-runtime/helpers/inherits'\n    };\n    let pkgPath = `${think.ROOT_PATH}${think.sep}node_modules${think.sep}`;\n    for(let pkg in dependencies){\n      pkg = pkgAlias[pkg] || pkg;\n      if(think.isDir(`${pkgPath}${pkg}`)){\n        continue;\n      }\n      try{\n        require(pkg);\n      }catch(e){\n        think.log(`package \\`${pkg}\\` is not installed. please run \\`npm install\\` command before start server.`, 'EXIT');\n      }\n    }\n  },\n  /**\n   * check module config\n   * @return {} []\n   */\n  checkModuleConfig(){\n    if(think.mode !== think.mode_module){\n      return;\n    }\n    // check module config\n    // some config must be set in common module\n    let keys = [], errorKey = 'error_config_key';\n    let errorConfigKeys = thinkCache(thinkCache.COLLECTION, errorKey);\n    if(think.isEmpty(errorConfigKeys)){\n      thinkCache(thinkCache.COLLECTION, errorKey, []);\n      errorConfigKeys = thinkCache(thinkCache.COLLECTION, errorKey);\n    }\n\n    let checkMConfig = module => {\n      if(keys.length === 0){\n        keys = Object.keys(think.safeRequire(`${think.THINK_LIB_PATH}/config/config.js`));\n      }\n\n      //check config key not set as file name\n      keys.forEach(item => {\n        let configFilePath = think.getPath(module, think.dirname.config) + '/' + item + '.js';\n        if(think.isFile(configFilePath)){\n          think.log(`file \\`config${think.sep}${item}.js\\` is not allowed, it's already used for config key.`, 'EXIT');\n        }\n      }); \n\n      if(module === 'common'){\n        return;\n      }\n\n      let configFilePath = think.getPath(module, think.dirname.config) + '/config.js';\n      if(!think.isFile(configFilePath)){\n        return;\n      }\n      let config = think.safeRequire(configFilePath);\n      keys.forEach(key => {\n        if(config[key] && errorConfigKeys.indexOf(key) === -1){\n          errorConfigKeys.push(key);\n          think.log(`config key \\`${key}\\` can not be set in \\`${module}\\` module, must be set in \\`common\\` module`, 'WARNING');\n        }\n      });\n    };\n\n    let modules = think.module;\n    //load modules config\n    modules.forEach(module => {\n      checkMConfig(module);\n    });\n  }\n};"]}