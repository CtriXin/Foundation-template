{"version":3,"sources":["../../src/util/cookie.js"],"names":["Cookie","parse","data","str","split","forEach","pos","item","indexOf","key","substr","trim","val","slice","undefined","decodeURIComponent","e","stringify","name","value","options","encodeURIComponent","maxage","push","domain","path","expires","think","isDate","Date","toUTCString","httponly","secure","join","sign","secret","createHmac","update","digest","replace","unsign","lastIndexOf"],"mappings":"AAAA;;;;AAEA;;;;;;AACA;;;;AAIA,IAAIA,SAAS;AACX;;;;;AAKAC,SAAO,oBAAO;AACZ,QAAIC,OAAO,EAAX;AACA,QAAI,CAACC,GAAL,EAAU;AACR,aAAOD,IAAP;AACD;AACDC,QAAIC,KAAJ,CAAU,KAAV,EAAiBC,OAAjB,CAAyB,gBAAQ;AAC/B,UAAIC,MAAMC,KAAKC,OAAL,CAAa,GAAb,CAAV;AACA,UAAIF,QAAQ,CAAC,CAAb,EAAgB;AACd;AACD;AACD,UAAIG,MAAMF,KAAKG,MAAL,CAAY,CAAZ,EAAeJ,GAAf,EAAoBK,IAApB,EAAV;AACA,UAAIC,MAAML,KAAKG,MAAL,CAAYJ,MAAM,CAAlB,EAAqBK,IAArB,EAAV;AACA,UAAI,QAAQC,IAAI,CAAJ,CAAZ,EAAoB;AAClBA,cAAMA,IAAIC,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAN;AACD;AACD;AACA,UAAIC,cAAcZ,KAAKO,GAAL,CAAlB,EAA6B;AAC3B,YAAI;AACFP,eAAKO,GAAL,IAAYM,mBAAmBH,GAAnB,CAAZ;AACD,SAFD,CAEE,OAAOI,CAAP,EAAU;AACVd,eAAKO,GAAL,IAAYG,GAAZ;AACD;AACF;AACF,KAlBD;AAmBA,WAAOV,IAAP;AACD,GA/BU;AAgCX;;;;;;;AAOAe,aAAW,mBAACC,IAAD,EAAOC,KAAP,EAAcC,OAAd,EAA0B;AACnCA,cAAUA,WAAW,EAArB;AACA,QAAIb,OAAO,CAACW,OAAO,GAAP,GAAaG,mBAAmBF,KAAnB,CAAd,CAAX;AACA,QAAIC,QAAQE,MAAZ,EAAoB;AAClBf,WAAKgB,IAAL,CAAU,aAAaH,QAAQE,MAA/B;AACD;AACD,QAAIF,QAAQI,MAAZ,EAAoB;AAClBjB,WAAKgB,IAAL,CAAU,YAAYH,QAAQI,MAA9B;AACD;AACD,QAAIJ,QAAQK,IAAZ,EAAkB;AAChBlB,WAAKgB,IAAL,CAAU,UAAUH,QAAQK,IAA5B;AACD;AACD,QAAIC,UAAUN,QAAQM,OAAtB;AACA,QAAIA,OAAJ,EAAY;AACV,UAAI,CAACC,MAAMC,MAAN,CAAaF,OAAb,CAAL,EAA4B;AAC1BA,kBAAU,IAAIG,IAAJ,CAASH,OAAT,CAAV;AACD;AACDnB,WAAKgB,IAAL,CAAU,aAAaG,QAAQI,WAAR,EAAvB;AACD;AACD,QAAIV,QAAQW,QAAZ,EAAsB;AACpBxB,WAAKgB,IAAL,CAAU,UAAV;AACD;AACD,QAAIH,QAAQY,MAAZ,EAAoB;AAClBzB,WAAKgB,IAAL,CAAU,QAAV;AACD;AACD,WAAOhB,KAAK0B,IAAL,CAAU,IAAV,CAAP;AACD,GAjEU;AAkEX;;;;;;AAMAC,QAAM,cAACtB,GAAD,EAAsB;AAAA,QAAhBuB,MAAgB,uEAAP,EAAO;;AAC1BA,aAAS,iBAAOC,UAAP,CAAkB,QAAlB,EAA4BD,MAA5B,EAAoCE,MAApC,CAA2CzB,GAA3C,EAAgD0B,MAAhD,CAAuD,QAAvD,CAAT;AACAH,aAASA,OAAOI,OAAP,CAAe,MAAf,EAAuB,EAAvB,CAAT;AACA,WAAO3B,MAAM,GAAN,GAAYuB,MAAnB;AACD,GA5EU;AA6EX;;;;;;AAMAK,UAAQ,gBAAC5B,GAAD,EAAMuB,MAAN,EAAiB;AACvB,QAAIhC,MAAMS,IAAIC,KAAJ,CAAU,CAAV,EAAaD,IAAI6B,WAAJ,CAAgB,GAAhB,CAAb,CAAV;AACA,WAAOzC,OAAOkC,IAAP,CAAY/B,GAAZ,EAAiBgC,MAAjB,MAA6BvB,GAA7B,GAAmCT,GAAnC,GAAyC,EAAhD;AACD;AAtFU,CAAb;;kBAyFeH,M","file":"cookie.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\n/**\n * cookie\n * @type {Object}\n */\nlet Cookie = {\n  /**\n   * parse cookie\n   * @param  {String} str [cookie string]\n   * @return {Object}     []\n   */\n  parse: str => {\n    let data = {};\n    if (!str) {\n      return data;\n    }\n    str.split(/; */).forEach(item => {\n      let pos = item.indexOf('=');\n      if (pos === -1) {\n        return;\n      }\n      let key = item.substr(0, pos).trim();\n      let val = item.substr(pos + 1).trim();\n      if ('\"' === val[0]) {\n        val = val.slice(1, -1);\n      }\n      // only assign once\n      if (undefined === data[key]) {\n        try {\n          data[key] = decodeURIComponent(val);\n        } catch (e) {\n          data[key] = val;\n        }\n      }\n    });\n    return data;\n  },\n  /**\n   * stringify cookie\n   * @param  {String} name    [cookie name]\n   * @param  {String} val     [cookie value]\n   * @param  {Object} options [cookie options]\n   * @return {String}         []\n   */\n  stringify: (name, value, options) => {\n    options = options || {};\n    let item = [name + '=' + encodeURIComponent(value)];\n    if (options.maxage) {\n      item.push('Max-Age=' + options.maxage);\n    }\n    if (options.domain) {\n      item.push('Domain=' + options.domain);\n    }\n    if (options.path) {\n      item.push('Path=' + options.path);\n    }\n    let expires = options.expires;\n    if (expires){\n      if (!think.isDate(expires)) {\n        expires = new Date(expires);\n      }\n      item.push('Expires=' + expires.toUTCString());\n    } \n    if (options.httponly) {\n      item.push('HttpOnly');\n    }\n    if (options.secure) {\n      item.push('Secure');\n    }\n    return item.join('; ');\n  },\n  /**\n   * sign cookie\n   * @param  {String} val    [cookie value]\n   * @param  {String} secret [cookie sign]\n   * @return {String}        []\n   */\n  sign: (val, secret = '') => {\n    secret = crypto.createHmac('sha256', secret).update(val).digest('base64');\n    secret = secret.replace(/\\=+$/, '');\n    return val + '.' + secret;\n  },\n  /**\n   * unsign cookie\n   * @param  {String} val    [signed cookie value]\n   * @param  {String} secret [cookie sign]\n   * @return {String}        []\n   */\n  unsign: (val, secret) => {\n    let str = val.slice(0, val.lastIndexOf('.'));\n    return Cookie.sign(str, secret) === val ? str : '';\n  }\n};\n\nexport default Cookie;"]}