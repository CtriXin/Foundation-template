{"version":3,"sources":["../../src/util/await.js"],"names":["init","queue","run","key","fn","resolve","then","process","nextTick","forEach","deferred","data","catch","reject","err","think","defer","push","promise"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;AAKE;;;;;AAKA,oBAAa;AAAA;;AACX,SAAKA,IAAL;AACD;AACD;;;;;;mBAIAA,I,mBAAM;AACJ,SAAKC,KAAL,GAAa,EAAb;AACD,G;AACD;;;;;;;;mBAMAC,G,gBAAIC,G,EAAKC,E,EAAG;AAAA;;AACV,QAAG,EAAED,OAAO,KAAKF,KAAd,CAAH,EAAwB;AACtB,WAAKA,KAAL,CAAWE,GAAX,IAAkB,EAAlB;AACA,aAAO,kBAAQE,OAAR,CAAgBD,IAAhB,EAAsBE,IAAtB,CAA2B,gBAAQ;AACxCC,gBAAQC,QAAR,CAAiB,YAAM;AACrB,gBAAKP,KAAL,CAAWE,GAAX,EAAgBM,OAAhB,CAAwB;AAAA,mBAAYC,SAASL,OAAT,CAAiBM,IAAjB,CAAZ;AAAA,WAAxB;AACA,iBAAO,MAAKV,KAAL,CAAWE,GAAX,CAAP;AACD,SAHD;AAIA,eAAOQ,IAAP;AACD,OANM,EAMJC,KANI,CAME,eAAO;AACdL,gBAAQC,QAAR,CAAiB,YAAM;AACrB,gBAAKP,KAAL,CAAWE,GAAX,EAAgBM,OAAhB,CAAwB;AAAA,mBAAYC,SAASG,MAAT,CAAgBC,GAAhB,CAAZ;AAAA,WAAxB;AACA,iBAAO,MAAKb,KAAL,CAAWE,GAAX,CAAP;AACD,SAHD;AAIA,eAAOY,MAAMF,MAAN,CAAaC,GAAb,CAAP;AACD,OAZM,CAAP;AAaD,KAfD,MAeK;AACH,UAAIJ,WAAWK,MAAMC,KAAN,EAAf;AACA,WAAKf,KAAL,CAAWE,GAAX,EAAgBc,IAAhB,CAAqBP,QAArB;AACA,aAAOA,SAASQ,OAAhB;AACD;AACF,G","file":"await.js","sourcesContent":["'use strict';\n/**\n * waiting class\n * @type {}\n */\nexport default class {\n  /**\n   * constructor\n   * @param  {} args []\n   * @return {}         []\n   */\n  constructor(){\n    this.init();\n  }\n  /**\n   * init\n   * @return {} []\n   */\n  init(){\n    this.queue = {};\n  }\n  /**\n   * run\n   * @param  {String}   key []\n   * @param  {Function} fn  []\n   * @return {Promise}       []\n   */\n  run(key, fn){\n    if(!(key in this.queue)){\n      this.queue[key] = [];\n      return Promise.resolve(fn()).then(data => {\n        process.nextTick(() => {\n          this.queue[key].forEach(deferred => deferred.resolve(data));\n          delete this.queue[key];\n        });\n        return data;\n      }).catch(err => {\n        process.nextTick(() => {\n          this.queue[key].forEach(deferred => deferred.reject(err));\n          delete this.queue[key];\n        });\n        return think.reject(err);\n      });\n    }else{\n      let deferred = think.defer();\n      this.queue[key].push(deferred);\n      return deferred.promise;\n    }\n  }\n}"]}