{"version":3,"sources":["../../src/util/watch_compile.js"],"names":["compiledMtime","compiledErrorFiles","allowFileExt","init","srcPath","outPath","options","callback","normalize","compileFile","file","onlyCopy","filePath","think","sep","content","readFileSync","saveFilepath","mkdir","dirname","writeFileSync","type","compileByTypeScript","compileByBabel","e","log","colors","red","message","compileError","getRelationPath","pPath","relative","ts","require","startTime","Date","now","diagnostics","output","transpileModule","compilerOptions","module","ModuleKind","CommonJS","target","ScriptTarget","ES6","experimentalDecorators","emitDecoratorMetadata","allowSyntheticDefaultImports","sourceMap","fileName","reportDiagnostics","addRange","length","firstDiagnostics","getLineAndCharacterOfPosition","start","line","character","flattenDiagnosticMessageText","messageText","Error","replaceExtName","JSON","parse","sourceMapText","sources","sourcesContent","sourceRoot","outputText","logged","orginSourceMap","relativePath","babel","data","transform","filename","presets","concat","plugins","sourceMaps","sourceFileName","basename","prefix","code","indexOf","map","mergeSourceMap","undefined","SourceMapGenerator","SourceMapConsumer","replace","generator","fromSourceMap","applySourceMap","toString","getSrcDeletedFiles","srcFiles","appFiles","srcFilesWithoutExt","item","filter","extname","fileWithoutExt","filepath","isFile","unlinkSync","compile","once","files","getFiles","changedFiles","forEach","mTime","statSync","mtime","getTime","outFile","outmTime","ret","push","index","splice","setTimeout","bind","run","instance"],"mappings":"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","file":"watch_compile.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\n\n/**\n * watch compile\n */\nexport default class {\n  /**\n   * store compiled files last mtime\n   * @type {Object}\n   */\n  compiledMtime = {};\n  /**\n   * compiled error files\n   * @type {Array}\n   */\n  compiledErrorFiles = [];\n  /**\n   * allow file ext in src path\n   * @type {Array}\n   */\n  allowFileExt = ['.js', '.ts'];\n  /**\n   * constructor\n   * @param  {Array} args []\n   * @return {}         []\n   */\n  constructor(...args){\n    this.init(...args);\n  }\n  /**\n   * init\n   * @param  {String} srcPath []\n   * @param  {String} outPath []\n   * @param  {Boolean} log     []\n   * @return {}         []\n   */\n  init(srcPath, outPath, options = {}, callback){\n    this.srcPath = path.normalize(srcPath);\n    this.outPath = path.normalize(outPath);\n    this.options = options;\n    this.callback = callback;\n  }\n  /**\n   * compile single file\n   * @param  {String} file     []\n   * @param  {Boolean} onlyCopy []\n   * @return {}          []\n   */\n  compileFile(file, onlyCopy){\n    let filePath = `${this.srcPath}${think.sep}${file}`;\n    let content = fs.readFileSync(filePath, 'utf8');\n\n    //when get file content empty, maybe file is locked\n    if(!content){\n      return;\n    }\n    // only copy file content\n    if(onlyCopy){\n      let saveFilepath = `${this.outPath}${think.sep}${file}`;\n      think.mkdir(path.dirname(saveFilepath));\n      fs.writeFileSync(saveFilepath, content);\n      return;\n    }\n\n    try{\n      if(this.options.type === 'ts'){\n        this.compileByTypeScript(content, file);\n      }else{\n        this.compileByBabel(content, file);\n      }\n      return true;\n    }catch(e){\n\n      think.log(colors => {\n        return colors.red(`compile file ${file} error`);\n      }, 'COMPILE');\n      think.log(e);\n\n      e.message = 'Compile Error: ' + e.message;\n      think.compileError = e;\n    }\n    return false;\n  }\n  /**\n   * get relative path\n   * @param  {String} file []\n   * @return {String}      []\n   */\n  getRelationPath(file){\n    //use dirname to resolve file path in source-map-support\n    //so must use dirname in here\n    let pPath = path.dirname(this.outPath + think.sep + file);\n    return path.relative(pPath, this.srcPath + think.sep + file);\n  }\n  /**\n   * typescript compile\n   * @return {} []\n   */\n  compileByTypeScript(content, file){\n    let ts = require('typescript');\n    let startTime = Date.now();\n    let diagnostics = [];\n    let output = ts.transpileModule(content, {\n      compilerOptions: {\n        module: ts.ModuleKind.CommonJS,\n        target: ts.ScriptTarget.ES6,\n        experimentalDecorators: true,\n        emitDecoratorMetadata: true,\n        allowSyntheticDefaultImports: true,\n        sourceMap: true\n      },\n      fileName: file,\n      reportDiagnostics: !!diagnostics\n    });\n    ts.addRange(diagnostics, output.diagnostics);\n\n    //has error\n    if(diagnostics.length){\n      let firstDiagnostics = diagnostics[0];\n      let {line, character} = firstDiagnostics.file.getLineAndCharacterOfPosition(firstDiagnostics.start);\n      let message = ts.flattenDiagnosticMessageText(firstDiagnostics.messageText, '\\n');\n      throw new Error(`${message} on Line ${line + 1}, Character ${character}`);\n    }\n    if(this.options.log){\n      think.log(`Compile file ${file}`, 'TypeScript', startTime);\n    }\n\n    file = this.replaceExtName(file, '.js');\n    let sourceMap = JSON.parse(output.sourceMapText);\n    sourceMap.sources[0] = this.getRelationPath(file);\n    sourceMap.sourcesContent = [content];\n    //file value must be equal sources values\n    sourceMap.file = sourceMap.sources[0];\n    delete sourceMap.sourceRoot;\n    this.compileByBabel(output.outputText, file, true, sourceMap);\n  }\n  /**\n   * babel compile\n   * @return {} []\n   */\n  compileByBabel(content, file, logged, orginSourceMap){\n    let startTime = Date.now();\n    let relativePath = this.getRelationPath(file);\n    //babel not export default property\n    //so can not use `import babel from 'babel-core'`\n    let babel = require('babel-core');\n    let data = babel.transform(content, {\n      filename: file,\n      presets: ['es2015-loose', 'stage-1'].concat(this.options.presets || []),\n      plugins: ['transform-runtime'].concat(this.options.plugins || []),\n      sourceMaps: true,\n      sourceFileName: relativePath\n    });\n    if(!logged && this.options.log){\n      think.log(`Compile file ${file}`, 'Babel', startTime);\n    }\n    think.mkdir(path.dirname(`${this.outPath}${think.sep}${file}`));\n    let basename = path.basename(file);\n    let prefix = '//# sourceMappingURL=';\n    if(data.code.indexOf(prefix) === -1){\n      data.code = data.code + '\\n' + prefix + basename + '.map';\n    }\n    fs.writeFileSync(`${this.outPath}${think.sep}${file}`, data.code);\n    let sourceMap = data.map;\n    //file value must be equal sources values\n    sourceMap.file = sourceMap.sources[0];\n    if(orginSourceMap){\n      sourceMap = this.mergeSourceMap(orginSourceMap, sourceMap);\n    }\n    fs.writeFileSync(`${this.outPath}${think.sep}${file}.map`, JSON.stringify(sourceMap, undefined, 4));\n  }\n  /**\n   * merge source map\n   * @param  {String} content        []\n   * @param  {Object} orginSourceMap []\n   * @param  {Object} sourceMap      []\n   * @return {}                []\n   */\n  mergeSourceMap(orginSourceMap, sourceMap){\n    let {SourceMapGenerator, SourceMapConsumer} = require('source-map');\n    sourceMap.file = sourceMap.file.replace(/\\\\/g, '/');\n    sourceMap.sources = sourceMap.sources.map(filePath => {\n      return filePath.replace(/\\\\/g, '/');\n    });\n    var generator = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(sourceMap));\n    generator.applySourceMap(new SourceMapConsumer(orginSourceMap));\n    sourceMap = JSON.parse(generator.toString());\n\n    return sourceMap;\n  }\n  /**\n   * src file is deleted, but app file also exist\n   * then delete app file\n   * @return {} []\n   */\n  getSrcDeletedFiles(srcFiles, appFiles){\n    let srcFilesWithoutExt = srcFiles.map(item => {\n      return this.replaceExtName(item);\n    });\n    return appFiles.filter(file => {\n      let extname = path.extname(file);\n      if(this.allowFileExt.indexOf(extname) === -1){\n        return;\n      }\n      let fileWithoutExt = this.replaceExtName(file);\n      //src file not exist\n      if(srcFilesWithoutExt.indexOf(fileWithoutExt) === -1){\n        let filepath = this.outPath + think.sep + file;\n        if(think.isFile(filepath)){\n          fs.unlinkSync(filepath);\n        }\n        return true;\n      }\n    }).map(file => {\n      return this.outPath + think.sep + file;\n    });\n  }\n  /**\n   * replace filepath extname\n   * @param  {String} filepath []\n   * @param  {String} extname  []\n   * @return {String}          []\n   */\n  replaceExtName(filepath, extname = ''){\n    return filepath.replace(/\\.\\w+$/, extname);\n  }\n  /**\n   * compile\n   * @return {} []\n   */\n  compile(once){\n    let files = think.getFiles(this.srcPath, true);\n    let appFiles = think.getFiles(this.outPath, true);\n    let changedFiles = this.getSrcDeletedFiles(files, appFiles);\n\n    if(think.compileError && !this.compiledErrorFiles.length){\n      think.compileError = null;\n    }\n\n    files.forEach(file => {\n      let extname = path.extname(file);\n      //if is not js file, only copy\n      if(this.allowFileExt.indexOf(extname) === -1){\n        this.compileFile(file, true);\n        return;\n      }\n      let mTime = fs.statSync(`${this.srcPath}${think.sep}${file}`).mtime.getTime();\n      let outFile = `${this.outPath}${think.sep}${file}`;\n\n      //change extname to .js.\n      //in typescript, file extname is .ts\n      outFile = this.replaceExtName(outFile, '.js');\n\n      if(think.isFile(outFile)){\n        let outmTime = fs.statSync(outFile).mtime.getTime();\n        //if compiled file mtime is after than source file, return\n        if(outmTime >= mTime){\n          return;\n        }\n      }\n      if(!this.compiledMtime[file] || mTime > this.compiledMtime[file]){\n        let ret = this.compileFile(file);\n        if(ret){\n          changedFiles.push(outFile);\n        }\n        \n        this.compiledMtime[file] = mTime;\n\n        let index = this.compiledErrorFiles.indexOf(file);\n        if(ret){\n          if(index > -1){\n            this.compiledErrorFiles.splice(index, 1);\n          }\n        }else if(ret === false){\n          if(index === -1){\n            this.compiledErrorFiles.push(file);\n          }\n        }\n      }\n    });\n    //notify auto reload service to clear file cache\n    if(changedFiles.length && this.callback){\n      this.callback(changedFiles);\n    }\n    if(!once){\n      setTimeout(this.compile.bind(this), 100);\n    }\n  }\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    this.compile();\n  }\n  /**\n   * compile\n   * @return {} []\n   */\n  static compile(srcPath, outPath, options = {}){\n    let instance = new this(srcPath, outPath, options);\n    instance.compile(true);\n  }\n}"]}