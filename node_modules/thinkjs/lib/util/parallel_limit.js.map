{"version":3,"sources":["../../src/util/parallel_limit.js"],"names":["init","limit","callback","think","isFunction","index","doing","deferreds","add","item","deferred","defer","data","push","run","promise","addMany","dataList","ignoreError","isEmpty","resolve","promises","map","catch","all","next","splice","length","Error","result","isPromise","then","reject","err","base"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIE;;;;;;mBAMAA,I,iBAAKC,K,EAAOC,Q,EAAS;AACnB,QAAGC,MAAMC,UAAN,CAAiBH,KAAjB,CAAH,EAA2B;AACzBC,iBAAWD,KAAX;AACAA,cAAQ,CAAR;AACD;AACD,SAAKA,KAAL,GAAaA,SAAS,EAAtB;AACA,SAAKI,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKJ,QAAL,GAAgBA,QAAhB;AACA,SAAKK,SAAL,GAAiB,EAAjB;AACD,G;AACD;;;;;;mBAIAC,G,gBAAIC,I,EAAK;AACP,QAAIC,WAAWP,MAAMQ,KAAN,EAAf;AACAD,aAASE,IAAT,GAAgBH,IAAhB;AACA,SAAKF,SAAL,CAAeM,IAAf,CAAoBH,QAApB;AACA,SAAKI,GAAL;AACA,WAAOJ,SAASK,OAAhB;AACD,G;AACD;;;;;;mBAIAC,O,oBAAQC,Q,EAAUC,W,EAAY;AAAA;;AAC5B,QAAIf,MAAMgB,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,aAAO,kBAAQG,OAAR,EAAP;AACD;AACD,QAAIC,WAAWJ,SAASK,GAAT,CAAa,gBAAQ;AAClC,UAAIP,UAAU,OAAKP,GAAL,CAASC,IAAT,CAAd;AACA,aAAOS,cAAcH,QAAQQ,KAAR,CAAc,YAAM,CAAE,CAAtB,CAAd,GAAwCR,OAA/C;AACD,KAHc,CAAf;AAIA,WAAO,kBAAQS,GAAR,CAAYH,QAAZ,CAAP;AACD,G;AACD;;;;;;mBAIAI,I,mBAAM;AACJ,SAAKnB,KAAL;;AAEA;AACA,SAAKC,SAAL,CAAemB,MAAf,CAAsB,KAAKrB,KAAL,GAAa,CAAnC,EAAsC,CAAtC;AACA,SAAKA,KAAL;;AAEA,SAAKS,GAAL;AACD,G;AACD;;;;;;mBAIAA,G,kBAAK;AAAA;;AACH,QAAI,KAAKR,KAAL,IAAc,KAAKL,KAAnB,IAA4B,KAAKI,KAAL,IAAc,KAAKE,SAAL,CAAeoB,MAA7D,EAAqE;AACnE;AACD;AACD,SAAKrB,KAAL;AACA,QAAIG,OAAO,KAAKF,SAAL,CAAe,KAAKF,KAAL,EAAf,CAAX;AACA,QAAIH,WAAWC,MAAMC,UAAN,CAAiBK,KAAKG,IAAtB,IAA8BH,KAAKG,IAAnC,GAA0C,KAAKV,QAA9D;AACA,QAAI,CAACC,MAAMC,UAAN,CAAiBF,QAAjB,CAAL,EAAiC;AAC/B,YAAM,IAAI0B,KAAJ,CAAU,0CAAV,CAAN;AACD;AACD,QAAIC,SAAS3B,SAASO,KAAKG,IAAd,CAAb;AACA,QAAI,CAACT,MAAM2B,SAAN,CAAgBD,MAAhB,CAAL,EAA8B;AAC5BA,eAAS,kBAAQT,OAAR,CAAgBS,MAAhB,CAAT;AACD;AACD,WAAOA,OAAOE,IAAP,CAAY,gBAAQ;AACzB,aAAKN,IAAL;AACA;AACAhB,WAAKW,OAAL,CAAaR,IAAb;AACD,KAJM,EAIJW,KAJI,CAIE,eAAO;AACd,aAAKE,IAAL;AACA;AACAhB,WAAKuB,MAAL,CAAYC,GAAZ;AACD,KARM,CAAP;AASD,G;;;EAnF0B9B,MAAM+B,I","file":"parallel_limit.js","sourcesContent":["'use strict';\n\n/**\n * parallel limit\n */\nexport default class extends think.base {\n  /**\n   * limit\n   * @param  {[type]}   limit    []\n   * @param  {Function} callback []\n   * @return {[type]}            []\n   */\n  init(limit, callback){\n    if(think.isFunction(limit)){\n      callback = limit;\n      limit = 0;\n    }\n    this.limit = limit || 10;\n    this.index = 0;\n    this.doing = 0;\n    this.callback = callback;\n    this.deferreds = [];\n  }\n  /**\n   * add item data\n   * @param {data} item []\n   */\n  add(item){\n    let deferred = think.defer();\n    deferred.data = item;\n    this.deferreds.push(deferred);\n    this.run();\n    return deferred.promise;\n  }\n  /**\n   * add many data once\n   * @param {Array} dataList [data array]\n   */\n  addMany(dataList, ignoreError){\n    if (think.isEmpty(dataList)) {\n      return Promise.resolve();\n    }\n    let promises = dataList.map(item => {\n      let promise = this.add(item);\n      return ignoreError ? promise.catch(() => {}) : promise;\n    });\n    return Promise.all(promises);\n  }\n  /**\n   * next\n   * @return {Function} [description]\n   */\n  next(){\n    this.doing --;\n\n    //reduce deferreds avoid memory leak when use single item data\n    this.deferreds.splice(this.index - 1, 1);\n    this.index--;\n\n    this.run();\n  }\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    if (this.doing >= this.limit || this.index >= this.deferreds.length) {\n      return;\n    }\n    this.doing++;\n    let item = this.deferreds[this.index++];\n    let callback = think.isFunction(item.data) ? item.data : this.callback;\n    if (!think.isFunction(callback)) {\n      throw new Error('data item or callback must be a function');\n    }\n    let result = callback(item.data);\n    if (!think.isPromise(result)) {\n      result = Promise.resolve(result);\n    }\n    return result.then(data => {\n      this.next();\n      //resolve item\n      item.resolve(data);\n    }).catch(err => {\n      this.next();\n      //reject item\n      item.reject(err);\n    });\n  }\n}"]}