{"version":3,"sources":["../../src/util/auto_reload.js"],"names":["sys_module","require","_rewriteSysModuleLoad","NODE_MODULES","sep","init","srcPath","callback","normalize","prevFilesCount","clearFileCache","file","indexOf","mod","cache","children","length","fileItem","item","clearFilesCache","files","forEach","checkFileChange","filesCount","think","getFiles","filter","extname","flag","checkCacheChange","autoReload","thinkCache","AUTO_RELOAD","hasChange","isFile","mTime","statSync","mtime","getTime","run","setTimeout","bind","rewriteSysModuleLoad","load","_load","request","parent","isMain","exportsObj","filename","_resolveFilename","cachedModule","_cache","push","e"],"mappings":"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","file":"auto_reload.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\n\n//can not use import from\nlet sys_module = require('module');\n\n//rewriteSysModuleLoad flag\nlet _rewriteSysModuleLoad = false;\n\nconst NODE_MODULES = `${path.sep}node_modules${path.sep}`;\n\n/**\n * auto reload file\n */\nexport default class {\n  /**\n   * constructor\n   * @param  {Array} args []\n   * @return {}         []\n   */\n  constructor(...args){\n    this.init(...args);\n  }\n  /**\n   * init\n   * @param  {String}   srcPath  [source path]\n   * @param  {Function} callback [when file has changed, callback will be invoke]\n   * @param  {Boolean}  log      [log reload file]\n   * @return {}            []\n   */\n  init(srcPath, callback){\n    this.srcPath = path.normalize(srcPath);\n    this.callback = callback;\n    this.prevFilesCount = 0;\n  }\n  /**\n   * log file\n   * @param  {String} file []\n   * @return {}      []\n   */\n  // log(file){\n  //   //only log app files changed\n  //   if(file.indexOf(this.srcPath) === 0){\n  //     file = file.slice(this.srcPath.length);\n  //     think.log(`reload file ${file}`, 'RELOAD');\n  //   }\n  // }\n  /**\n   * clear file cache, also clear dependents file cache\n   * @return {} []\n   */\n  clearFileCache(file){\n    if(file.indexOf(NODE_MODULES) > -1 || file.indexOf(this.srcPath) !== 0){\n      return;\n    }\n    let mod = require.cache[file];\n    if(!mod){\n      return;\n    }\n    //think.log(`reload file ${file.slice(this.srcPath.length)}`, 'RELOAD');\n    //remove children\n    if(mod && mod.children){\n      mod.children.length = 0;\n    }\n\n    // clear module cache which dependents this module\n    for(let fileItem in require.cache){\n      if(fileItem === file || fileItem.indexOf(NODE_MODULES) > -1){\n        continue;\n      }\n      let item = require.cache[fileItem];\n      if(item && item.children && item.children.indexOf(mod) > -1){\n        this.clearFileCache(fileItem);\n      }\n    }\n    //remove require cache\n    delete require.cache[file];\n  }\n  /**\n   * clear files cache\n   * @param  {Array} files []\n   * @return {}       []\n   */\n  clearFilesCache(files){\n    files.forEach(file => {\n      this.clearFileCache(file);\n    });\n    if(this.callback){\n      this.callback();\n    }\n  }\n  /**\n   * check file change\n   * compare files count\n   * @return {} []\n   */\n  checkFileChange(){\n    let filesCount = think.getFiles(this.srcPath, true).filter(file => {\n      let extname = path.extname(file);\n      return extname === '.js';\n    }).length;\n    let flag = this.prevFilesCount && this.prevFilesCount !== filesCount;\n    this.prevFilesCount = filesCount;\n    return flag;\n  }\n  /**\n   * check cache change\n   * @return {} []\n   */\n  checkCacheChange(){\n    let autoReload = thinkCache(thinkCache.AUTO_RELOAD);\n    let hasChange = false;\n    for(let file in require.cache){\n      //ignore file in node_modules path\n      if(file.indexOf(NODE_MODULES) > -1){\n        continue;\n      }\n      if(!think.isFile(file)){\n        this.clearFileCache(file);\n        continue;\n      }\n      let mTime = fs.statSync(file).mtime.getTime();\n      if(!autoReload[file]){\n        autoReload[file] = mTime;\n        continue;\n      }\n      if(mTime > autoReload[file]){\n        this.clearFileCache(file);\n        autoReload[file] = mTime;\n        hasChange = true;\n      }\n    }\n    return hasChange;\n  }\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let hasChange = this.checkCacheChange() || this.checkFileChange();\n    if(hasChange && this.callback){\n      this.callback();\n    }\n    setTimeout(this.run.bind(this), 200);\n  }\n  /**\n   * rewrite sys module load method\n   * @return {} []\n   */\n  static rewriteSysModuleLoad(){\n\n    if(_rewriteSysModuleLoad){\n      return;\n    }\n    _rewriteSysModuleLoad = true;\n\n    let load = sys_module._load;\n    \n    //rewrite Module._load method\n    sys_module._load = (request, parent, isMain) => {\n      let exportsObj = load(request, parent, isMain);\n      if(!parent){\n        return exportsObj;\n      }\n      if(isMain || parent.filename.indexOf(NODE_MODULES) > -1){\n        return exportsObj;\n      }\n      if(request === 'internal/repl' || request === 'repl'){\n        return exportsObj;\n      }\n      try{\n        let filename = sys_module._resolveFilename(request, parent);\n        let cachedModule = sys_module._cache[filename];\n        if(cachedModule && parent.children.indexOf(cachedModule) === -1){\n          parent.children.push(cachedModule);\n        }\n      }catch(e){}\n      return exportsObj;\n    };\n  }\n}"]}