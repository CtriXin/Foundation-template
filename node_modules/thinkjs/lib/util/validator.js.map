{"version":3,"sources":["../../src/util/validator.js"],"names":["Validator","required","think","isEmpty","value","requiredIf","anotherField","values","indexOf","_requiredIf","args","data","arg0","requiredNotIf","_requiredNotIf","requiredWith","anotherFields","flag","some","item","_requiredWith","map","requiredWithAll","every","_requiredWithAll","requiredWithout","_requiredWithout","requiredWithoutAll","_requiredWithoutAll","contains","str","equals","comparison","_equals","equalsValue","different","_different","after","date","isAfter","_after","arg","alpha","isAlpha","alphaDash","test","alphaNumeric","isAlphanumeric","alphaNumericDash","ascii","isAscii","base64","isBase64","before","isBefore","_before","byteLength","min","max","isByteLength","creditcard","isCreditCard","currency","options","isCurrency","isDate","decimal","isDecimal","divisibleBy","number","isDivisibleBy","email","isEmail","fqdn","isFQDN","float","isFloat","fullWidth","isFullWidth","halfWidth","isHalfWidth","hexColor","isHexColor","hex","isHexadecimal","ip","isIP","ip4","isIPv4","ip6","isIPv6","isbn","version","isISBN","isin","isISIN","iso8601","isISO8601","in","isIn","notIn","int","isNaN","isInt","length","isLength","minLength","maxLength","lowercase","isLowercase","mobile","locale","isMobilePhone","mongoId","isMongoId","multibyte","isMultibyte","url","extend","require_protocol","protocols","isURL","uppercase","isUppercase","variableWidth","isVariableWidth","order","split","field","image","isObject","originalFilename","startWith","endWith","lastIndexOf","string","isString","array","isArray","boolean","isBoolean","object","regexp","reg","type"],"mappings":"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","file":"validator.js","sourcesContent":["'use strict';\n\nimport net from 'net';\n\n//https://github.com/chriso/validator.js\nimport validator from 'validator';\n\n\n/**\n * Validator\n * @type {Object}\n */\nlet Validator = {};\n/**\n * check value is set\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.required = value => {\n  return !think.isEmpty(value);\n};\n/**\n * The field under validation must be present if the anotherfield field is equal to any value.\n * @param  {String}    value        []\n * @param  {Stromg}    anotherfield []\n * @param  {Array} values       []\n * @return {Boolean}                 []\n */\nValidator.requiredIf = (value, anotherField, ...values) => {\n  if(values.indexOf(anotherField) > -1){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse requiredIf args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredIf = (args, data) => {\n  let arg0 = args[0];\n  args[0] = data[arg0] ? data[arg0].value : '';\n  return args;\n};\n/**\n * The field under validation must be present not if the anotherfield field is equal to any value.\n * @param  {String}    value        []\n * @param  {Stromg}    anotherfield []\n * @param  {Array} values       []\n * @return {Boolean}                 []\n */\nValidator.requiredNotIf = (value, anotherField, ...values) => {\n  if(values.indexOf(anotherField) === -1){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse requiredNotIf args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredNotIf = (args, data) => {\n  return Validator._requiredIf(args, data);\n};\n/**\n * The field under validation must be present only if any of the other specified fields are present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWith = (value, ...anotherFields) => {\n  let flag = anotherFields.some(item => {\n    return Validator.required(item);\n  });\n  if(flag){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required with args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWith = (args, data) => {\n  return args.map(item => {\n    return data[item] ? data[item].value : '';\n  });\n};\n/**\n * The field under validation must be present only if all of the other specified fields are present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWithAll = (value, ...anotherFields) => {\n  let flag = anotherFields.every(item => {\n    return Validator.required(item);\n  });\n  if(flag){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required with all args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWithAll = (args, data) => {\n  return Validator._requiredWith(args, data);\n};\n/**\n * The field under validation must be present only when any of the other specified fields are not present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWithout = (value, ...anotherFields) => {\n  let flag = anotherFields.some(item => {\n    return !Validator.required(item);\n  });\n  if(flag){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required without args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWithout = (args, data) => {\n  return Validator._requiredWith(args, data);\n};\n/**\n * The field under validation must be present only when all of the other specified fields are not present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWithoutAll = (value, ...anotherFields) => {\n  let flag = anotherFields.every(item => {\n    return !Validator.required(item);\n  });\n  if(flag){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required without all args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWithoutAll = (args, data) => {\n  return Validator._requiredWith(args, data);\n};\n/**\n * check if the string contains the seed.\n * @param  {String} value []\n * @param  {String} str   []\n * @return {Boolean}       []\n */\nValidator.contains = (value, str) => {\n  return !value || validator.contains(value, str);\n};\n/**\n * check if the string matches the comparison.\n * @param  {String} value      []\n * @param  {String} comparison []\n * @return {Boolean}            []\n */\nValidator.equals = (value, comparison) => {\n  return !value || validator.equals(value, comparison);\n};\n/**\n * parse equal args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._equals = (args, data) => {\n  let item = data[args[0]];\n  return [item ? item.value : ''];\n};\n/**\n * check if the string matches the comparison.\n * @param  {String} value      []\n * @param  {String} comparison []\n * @return {Boolean}            []\n */\nValidator.equalsValue = (value, comparison) => {\n  return !value || validator.equals(value, comparison);\n};\n/**\n * check if the string not matches the comparison.\n * @type {Boolean}\n */\nValidator.different = (value, comparison) => {\n  return !value || value !== comparison;\n};\n/**\n * parse different args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._different = (args, data) => {\n  return Validator._equals(args, data);\n};\n/**\n * check if the string is a date that's after the specified date (defaults to now).\n * @param  {String} value []\n * @param  {String} date  []\n * @return {Boolean}       []\n */\nValidator.after = (value, date) => {\n  return !value || validator.isAfter(value, date);\n};\n/**\n * parse after args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._after = (args, data) => {\n  let arg = args[0];\n  if(arg in data){\n    return [data[arg].value];\n  }\n  return args;\n};\n/**\n * check if the string contains only letters (a-zA-Z).\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alpha = value => {\n  return !value || validator.isAlpha(value);\n};\n/**\n * check if the string contains only letters and dashes(a-zA-Z_).\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alphaDash = value => {\n  return !value || /^[A-Z_]+$/i.test(value);\n};\n/**\n * check if the string contains only letters and numbers.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alphaNumeric = value => {\n  return !value || validator.isAlphanumeric(value);\n};\n/**\n * check if the string contains only letters or numbers or dash.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alphaNumericDash = value => {\n  return !value || /^\\w+$/i.test(value);\n};\n/**\n * check if the string contains ASCII chars only.\n * @param  {String} value []\n * @return {Boolean}      []\n */\nValidator.ascii = value => {\n  return !value || validator.isAscii(value);\n};\n/**\n * check if a string is base64 encoded.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.base64 = value => {\n  return !value || validator.isBase64(value);\n};\n/**\n * check if the string is a date that's before the specified date.\n * @param  {String} value []\n * @param  {String} date  []\n * @return {Boolean}       []\n */\nValidator.before = (value, date) => {\n  return !value || validator.isBefore(value, date);\n};\n/**\n * parse before args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._before = (args, data) => {\n  return Validator._after(args, data);\n};\n/**\n * check if the string's length (in bytes) falls in a range.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.byteLength = (value, min, max) => {\n  return !value || validator.isByteLength(value, min, max);\n};\n/**\n *  check if the string is a credit card.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.creditcard = value => {\n  return !value || validator.isCreditCard(value);\n};\n/**\n * check if the string is a valid currency amount. options is an object which defaults to\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.currency = (value, options) => {\n  return !value || validator.isCurrency(value, options);\n};\n/**\n * check if the string is a date.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.date = value => {\n  return !value || validator.isDate(value);\n};\n/**\n * check if the string represents a decimal number, such as 0.1, .3, 1.1, 1.00003, 4.0, etc.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.decimal = value => {\n  return !value || validator.isDecimal(value);\n};\n/**\n * check if the string is a number that's divisible by another.\n * @param  {Number} value  []\n * @param  {Number} number []\n * @return {Boolean}        []\n */\nValidator.divisibleBy = (value, number) => {\n  return !value || validator.isDivisibleBy(value, number);\n};\n/**\n * check if the string is an email. \n * options is an object which defaults to { \n *   allow_display_name: false, \n *   allow_utf8_locale_part: true, \n *   require_tld: true \n *  }. \n *  If allow_display_name is set to true, the validator will also match Display Name <email-address>. \n *  If allow_utf8_locale_part is set to false, the validator will not allow any non-English UTF8 character in email address' locale part. \n *  If require_tld is set to false, e-mail addresses without having TLD in their domain will also be matched.\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.email = (value, options) => {\n  return !value || validator.isEmail(value, options);\n};\n/**\n * check if the string is a fully qualified domain name (e.g. domain.com). \n * options is an object which defaults to { \n *   require_tld: true, \n *   allow_underscores: false, \n *   allow_trailing_dot: false \n * }.\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.fqdn = (value, options) => {\n  return !value || validator.isFQDN(value, options);\n};\n/**\n *  check if the string is a float. \n *  options is an object which can contain the keys min and/or max to validate the float is within boundaries \n *  (e.g. { min: 7.22, max: 9.55 }).\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.float = (value, min, max) => {\n  if(!value){\n    return true;\n  }\n  let options = {};\n  if(min){\n    options.min = min;\n  }\n  if(max){\n    options.max = max;\n  }\n  return validator.isFloat(value, options);\n};\n/**\n * check if the string contains any full-width chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.fullWidth = value => {\n  return !value || validator.isFullWidth(value);\n};\n/**\n * check if the string contains any half-width chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.halfWidth = value => {\n  return !value || validator.isHalfWidth(value);\n};\n/**\n * check if the string is a hexadecimal color.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.hexColor = value => {\n  return !value || validator.isHexColor(value);\n};\n/**\n * check if the string is a hexadecimal number.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.hex = value => {\n  return !value || validator.isHexadecimal(value);\n};\n/**\n * check if the string is an IP (version 4 or 6).\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.ip = value => {\n  return !value || !!net.isIP(value);\n};\n/**\n * check if the string is an IP v4\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.ip4 = value => {\n  return !value || net.isIPv4(value);\n};\n/**\n * check if the string is an IP v6\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.ip6 = value => {\n  return !value || net.isIPv6(value);\n};\n/**\n * check if the string is an ISBN (version 10 or 13).\n * @param  {String} value   []\n * @param  {Number} version []\n * @return {Boolean}         []\n */\nValidator.isbn = (value, version) => {\n  return !value || validator.isISBN(value, version);\n};\n/**\n * check if the string is an ISIN (stock/security identifier).\n * https://en.wikipedia.org/wiki/International_Securities_Identification_Number\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.isin = value => {\n  return !value || validator.isISIN(value);\n};\n/**\n * check if the string is a valid ISO 8601 date.\n * https://en.wikipedia.org/wiki/ISO_8601\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.iso8601 = value => {\n  return !value || validator.isISO8601(value);\n};\n/**\n * check if the string is in a array of allowed values.\n * @type {Boolean}\n */\nValidator.in = (value, ...values) => {\n  return !value || validator.isIn(value, values);\n};\n/**\n * check if the string is not in a array of allowed values.\n * @type {Boolean}\n */\nValidator.notIn = (value, ...values) => {\n  return !value || !validator.isIn(value, values);\n};\n/**\n * check if the string is an integer. \n * options is an object which can contain the keys min and/or max to check the integer is within boundaries (e.g. { min: 10, max: 99 }).\n * @type {Boolean}\n */\nValidator.int = (value, min, max) => {\n  if(!value){\n    return true;\n  }\n  let options = {};\n  if(min){\n    options.min = min | 0;\n  }\n  if(max){\n    options.max = max | 0;\n  }\n  return !isNaN(value) && validator.isInt(value, options);\n};\n/**\n * check if the string greater than min value\n * @param  {String} value []\n * @param  {Number} min   []\n * @return {Boolean}       []\n */\nValidator.min = (value, min) => {\n  return !value || validator.isInt(value, {\n    min: min | 0\n  });\n};\n/**\n * check if the string less than max value\n * @param  {String} value []\n * @param  {Number} max   []\n * @return {Boolean}       []\n */\nValidator.max = (value, max) => {\n  return !value || validator.isInt(value, {\n    min: 0,\n    max: max | 0\n  });\n};\n/**\n * check if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * @param  {String} value []\n * @param  {Number} min   []\n * @param  {Number} max   []\n * @return {Boolean}       []\n */\nValidator.length = (value, min, max) => {\n  if(!value){\n    return true;\n  }\n  if(min){\n    min = min | 0;\n  }else{\n    min = 1;\n  }\n  if(max){\n    max = max | 0;\n  }\n  return validator.isLength(value, min, max);\n};\n/**\n * check if the string's length is max than min\n * @param  {String} value []\n * @param  {Number} min   []\n * @return {Boolean}       []\n */\nValidator.minLength = (value, min) => {\n  return !value || validator.isLength(value, min | 0);\n};\n/**\n * check is the string's length is min than max\n * @param  {String} value []\n * @param  {Number} max   []\n * @return {Boolean}       []\n */\nValidator.maxLength = (value, max) => {\n  return !value || validator.isLength(value, 0, max | 0);\n};\n/**\n * check if the string is lowercase.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.lowercase = value => {\n  return !value || validator.isLowercase(value);\n};\n/**\n * check if the string is a mobile phone number, \n * (locale is one of ['zh-CN', 'en-ZA', 'en-AU', 'en-HK', 'pt-PT', 'fr-FR', 'el-GR', 'en-GB', 'en-US', 'en-ZM', 'ru-RU']).\n * @param  {String} value []\n * @param  {[type]} locale []\n * @return {Boolean}       []\n */\nValidator.mobile = (value, locale = 'zh-CN') => {\n  return !value || validator.isMobilePhone(value, locale);\n};\n/**\n *  check if the string is a valid hex-encoded representation of a MongoDB ObjectId.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.mongoId = value => {\n  return !value || validator.isMongoId(value);\n};\n/**\n * check if the string contains one or more multibyte chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.multibyte = value => {\n  return !value || validator.isMultibyte(value);\n};\n/**\n * check if the string contains only numbers.\n * @param  {String} value []\n * @return {Boolean}       []\n */\n// Validator.number = value => {\n//   return validator.isNumeric(value);\n// };\n/**\n * check if the string is an URL. \n * options is an object which defaults to { \n *   protocols: ['http','https','ftp'], \n *   require_tld: true, \n *   require_protocol: false, \n *   require_valid_protocol: true, \n *   allow_underscores: false, \n *   host_whitelist: false, \n *   host_blacklist: false, \n *   allow_trailing_dot: false, \n *   allow_protocol_relative_urls: false \n * }.\n * @type {Boolean}\n */\nValidator.url = (value, options) => {\n  if(!value){\n    return true;\n  }\n  options = think.extend({\n    require_protocol: true,\n    protocols: ['http', 'https']\n  }, options);\n  return validator.isURL(value, options);\n};\n/**\n * check if the string is uppercase.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.uppercase = value => {\n  return !value || validator.isUppercase(value);\n};\n/**\n * check if the string contains a mixture of full and half-width chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.variableWidth = value => {\n  return !value || validator.isVariableWidth(value);\n};\n/**\n * check is sql order string\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.order = value => {\n  if(!value){\n    return true;\n  }\n  return value.split(/\\s*,\\s*/).every(item => {\n    return /^\\w+\\s+(?:ASC|DESC)$/i.test(item);\n  });\n};\n/**\n * check is sql field string\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.field = value => {\n  if(!value){\n    return true;\n  }\n  return value.split(/\\s*,\\s*/).every(item => {\n    return item === '*' || /^\\w+$/.test(item);\n  });\n};\n/**\n * check is image file\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.image = value => {\n  if(!value){\n    return true;\n  }\n  if(think.isObject(value)){\n    value = value.originalFilename;\n  }\n  return /\\.(?:jpeg|jpg|png|bmp|gif|svg)$/i.test(value);\n};\n/**\n * check is string start with str\n * @param  {String} value []\n * @param  {String} str   []\n * @return {Boolean}       []\n */\nValidator.startWith = (value, str) => {\n  return !value || value.indexOf(str) === 0;\n};\n/**\n * check is string end with str\n * @param  {String} value []\n * @param  {String} str   []\n * @return {Boolean}       []\n */\nValidator.endWith = (value, str) => {\n  return !value || value.lastIndexOf(str) === (value.length - str.length);\n};\n/**\n * check value is string value\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.string = value => {\n  return think.isString(value);\n};\n/**\n * check value is array value\n * @param  {Array} value []\n * @return {Boolean}       []\n */\nValidator.array = value => {\n  return think.isArray(value);\n};\n/**\n * check value is true\n * @param  {Boolean} value []\n * @return {Boolean}       []\n */\nValidator.boolean = value => {\n  return think.isBoolean(value);\n};\n/**\n * check value is object\n * @param  {Object} value []\n * @return {Boolean}       []\n */\nValidator.object = value => {\n  return think.isObject(value);\n};\n\n/**\n * check value with regexp\n * @param  {Mixed} value []\n * @param  {RegExp} reg   []\n * @return {Boolean}       []\n */\nValidator.regexp = (value, reg) => {\n  if(!value){\n    return true;\n  }\n  return reg.test(value);\n};\n/**\n * check type\n * @param  {Mixed} value []\n * @param  {String} type  []\n * @return {Boolean}       []\n */\nValidator.type = (value, type) => {\n  if(!value){\n    return true;\n  }\n  switch(type){\n    case 'int':\n      return Validator.int(value);\n    case 'float':\n      return Validator.float(value);\n    case 'boolean':\n      return Validator.boolean(value);\n    case 'array':\n      return Validator.array(value);\n    case 'object':\n      return Validator.object(value);\n  }\n  return Validator.string(value);\n};\n\nexport default Validator;"]}