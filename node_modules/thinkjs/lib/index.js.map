{"version":3,"sources":["../src/index.js"],"names":["require","default","global","Promise","options","think","extend","getPath","APP_PATH","normalize","ROOT_PATH","RESOURCE_PATH","RUNTIME_PATH","i","argv","process","env","test","port","cli","mode","getMode","filepath","dirname","controller","isDir","mode_normal","mode_module","sep","runtime","checkEnv","checkNodeVersion","getModule","module","config","modulePath","modules","readdirSync","denyModuleList","length","filter","indexOf","loadAlias","aliasPath","THINK_LIB_PATH","thinkData","alias","safeRequire","loadConfig","getModuleConfig","forEach","loadRoute","route","loadAdapter","adapter","load","loadMiddleware","paths","undefined","middleware","base","loadHook","hookPath","hook","file","data","key","set","loadMVC","types","model","logic","service","itemType","item","moduleType","loadSubController","subControllers","getFiles","extname","map","slice","replace","sort","a","b","al","split","bl","subController","loadBootstrap","common","bootstrap","files","rewriteSysModuleLoad","instance","clearFilesCache","loadTemplate","add","root_path","view","template","loadError","error","clearData","export","checkModuleConfig","toFastProperties","captureError","on","msg","err","message","log","exit","start","checkFileName","checkDependencies","autoReload","compileCallback","getReloadInstance","run","srcPath","compile","outPath","isObject","reloadInstance","_getMode","changedFiles","autoCompile","sourceMapSupport","flag","npm","support","environment","emptyCacheBetweenOperations","install","preload","startTime","Date","now","name","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AAMA;;;;AACA;;;;AACA;;;;AAEA;;;;AARA;AACAA,QAAQ,+BAAR,EAAyCC,OAAzC,GAAmDD,QAAQ,UAAR,CAAnD;AACAE,OAAOC,OAAP,GAAiBH,QAAQ,UAAR,CAAjB;;;AASE;;;;;AAKA,oBAAyB;AAAA,QAAbI,OAAa,uEAAH,EAAG;AAAA;;AACvB;AACAC,UAAMC,MAAN,CAAaD,KAAb,EAAoB,KAAKE,OAAL,EAApB,EAAoCH,OAApC;;AAEA;AACAC,UAAMG,QAAN,GAAiB,eAAKC,SAAL,CAAeJ,MAAMG,QAArB,CAAjB;AACAH,UAAMK,SAAN,GAAkB,eAAKD,SAAL,CAAeJ,MAAMK,SAArB,CAAlB;AACAL,UAAMM,aAAN,GAAsB,eAAKF,SAAL,CAAeJ,MAAMM,aAArB,CAAtB;AACAN,UAAMO,YAAN,GAAqB,eAAKH,SAAL,CAAeJ,MAAMO,YAArB,CAArB;;AAEA;AACA,QAAIC,IAAI,CAAR;AACA,QAAIC,OAAOC,QAAQD,IAAR,CAAaD,CAAb,CAAX;AACA;AACA,QAAIC,SAAS,YAAT,IAAyBA,SAAS,aAAlC,IAAmDA,SAAS,SAAhE,EAA2E;AACzET,YAAMW,GAAN,GAAYF,IAAZ;AACAD;AACD;AACDC,WAAOC,QAAQD,IAAR,CAAaD,CAAb,CAAP;AACA;AACA,QAAIC,IAAJ,EAAU;AACR,UAAI,QAAQG,IAAR,CAAaH,IAAb,CAAJ,EAAwB;AACtBT,cAAMa,IAAN,GAAaJ,IAAb;AACD,OAFD,MAEK;AACHT,cAAMc,GAAN,GAAYL,IAAZ;AACD;AACF;AACD;AACAT,UAAMe,IAAN,GAAa,KAAKC,OAAL,EAAb;AACD;AACD;;;;;;mBAIAA,O,sBAAS;AACP,QAAIC,WAAcjB,MAAMG,QAApB,SAAgCH,MAAMkB,OAAN,CAAcC,UAAlD;AACA,QAAInB,MAAMoB,KAAN,CAAYH,QAAZ,CAAJ,EAA2B;AACzB,aAAOjB,MAAMqB,WAAb;AACD;AACD,WAAOrB,MAAMsB,WAAb;AACD,G;AACD;;;;;;mBAIApB,O,sBAAS;AACP,QAAIe,WAAWP,QAAQD,IAAR,CAAa,CAAb,CAAf;AACA,QAAIH,gBAAgB,eAAKY,OAAL,CAAaD,QAAb,CAApB;AACA,QAAIZ,YAAY,eAAKa,OAAL,CAAaZ,aAAb,CAAhB;AACA,QAAIH,gBAAcE,SAAd,GAA0BL,MAAMuB,GAAhC,QAAJ;AACA,QAAIhB,eAAeF,YAAYL,MAAMuB,GAAlB,GAAwBvB,MAAMkB,OAAN,CAAcM,OAAzD;AACA,WAAO;AACLrB,wBADK;AAELG,kCAFK;AAGLD,0BAHK;AAILE;AAJK,KAAP;AAMD,G;AACD;;;;;;mBAIAkB,Q,uBAAU;AACR,SAAKC,gBAAL;AACD,G;;AAED;;;;;;mBAIAC,S,wBAAW;AACT;AACA,QAAI3B,MAAMe,IAAN,KAAef,MAAMqB,WAAzB,EAAsC;AACpCrB,YAAM4B,MAAN,GAAe,CAAC5B,MAAM6B,MAAN,CAAa,gBAAb,CAAD,CAAf;AACA,aAAO7B,MAAM4B,MAAb;AACD;AACD,QAAIE,aAAa9B,MAAMG,QAAvB;AACA,QAAG,CAACH,MAAMoB,KAAN,CAAYU,UAAZ,CAAJ,EAA4B;AAC1B,aAAO,EAAP;AACD;AACD,QAAIC,UAAU,aAAGC,WAAH,CAAeF,UAAf,CAAd;AACA,QAAIG,iBAAiBjC,MAAM6B,MAAN,CAAa,kBAAb,KAAoC,EAAzD;AACA,QAAII,eAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7BH,gBAAUA,QAAQI,MAAR,CAAe,kBAAU;AACjC,YAAGP,OAAO,CAAP,MAAc,GAAjB,EAAqB;AACnB;AACD;AACD,YAAIK,eAAeG,OAAf,CAAuBR,MAAvB,MAAmC,CAAC,CAAxC,EAA2C;AACzC,iBAAOA,MAAP;AACD;AACF,OAPS,CAAV;AAQD;AACD5B,UAAM4B,MAAN,GAAeG,OAAf;AACA,WAAOA,OAAP;AACD,G;AACD;;;;;;mBAIAM,S,wBAAW;AACT,QAAIC,YAAetC,MAAMuC,cAArB,yBAAJ;AACAC,cAAUC,KAAV,GAAkBzC,MAAM0C,WAAN,CAAkBJ,SAAlB,CAAlB;AACD,G;AACD;;;;;;mBAIAK,U,yBAAY;AACV3C,UAAM4C,eAAN;AACA;AACA,SAAKjB,SAAL,GAAiBkB,OAAjB,CAAyB,kBAAU;AACjC7C,YAAM4C,eAAN,CAAsBhB,MAAtB;AACD,KAFD;AAGD,G;;AAED;;;;;;mBAIAkB,S,wBAAW;AACT9C,UAAM+C,KAAN;AACD,G;AACD;;;;;;mBAIAC,W,0BAAa;AACXhD,UAAMiD,OAAN,CAAcC,IAAd;AACD,G;AACD;;;;;;mBAIAC,c,6BAAgB;AACd,QAAIC,QAAQ,MACPpD,MAAMuC,cADC,GACgBvC,MAAMuB,GADtB,sBAEPvB,MAAME,OAAN,CAAcmD,SAAd,EAAyBrD,MAAMkB,OAAN,CAAcoC,UAAvC,CAFO,CAAZ;AAIAtD,UAAMyC,KAAN,CAAY,YAAZ,EAA0BW,KAA1B;AACA;AACApD,UAAMsD,UAAN,CAAiBC,IAAjB,GAAwBvD,MAAML,OAAN,CAAc,iBAAd,CAAxB;AACD,G;AACD;;;;;;mBAIA6D,Q,uBAAU;AACR,QAAIC,WAAczD,MAAMuC,cAApB,oBAAJ;AACAC,cAAUkB,IAAV,GAAiB1D,MAAMC,MAAN,CAAa,EAAb,EAAiBD,MAAM0C,WAAN,CAAkBe,QAAlB,CAAjB,CAAjB;;AAEA,QAAIE,OAAU3D,MAAME,OAAN,CAAcmD,SAAd,EAAyBrD,MAAMkB,OAAN,CAAcW,MAAvC,CAAV,aAAJ;AACA,QAAI+B,OAAO5D,MAAMC,MAAN,CAAa,EAAb,EAAiBD,MAAM0C,WAAN,CAAkBiB,IAAlB,CAAjB,CAAX;AACA,SAAI,IAAIE,GAAR,IAAeD,IAAf,EAAoB;AAClB5D,YAAM0D,IAAN,CAAWI,GAAX,CAAeD,GAAf,EAAoBD,KAAKC,GAAL,CAApB;AACD;AACF,G;AACD;;;;;;mBAIAE,O,sBAAS;AACP,QAAIC,QAAQ;AACVC,aAAO,CAAC,MAAD,EAAS,UAAT,EAAqB,OAArB,EAA8B,KAA9B,CADG;AAEV9C,kBAAY,CAAC,MAAD,EAAS,MAAT,CAFF;AAGV+C,aAAO,CAAC,MAAD,CAHG;AAIVC,eAAS,CAAC,MAAD;AAJC,KAAZ;;AADO,+BAOCC,QAPD;AAQLpE,YAAMyC,KAAN,CAAY2B,QAAZ,OAAyBpE,MAAMuC,cAA/B,GAAgDvC,MAAMuB,GAAtD,GAA4D6C,QAA5D;AACAJ,YAAMI,QAAN,EAAgBvB,OAAhB,CAAwB,gBAAQ;AAC9B7C,cAAMoE,QAAN,EAAgBC,IAAhB,IAAwBrE,MAAML,OAAN,CAAiByE,QAAjB,SAA6BC,IAA7B,CAAxB;AACD,OAFD;AAGArE,YAAM4B,MAAN,CAAaiB,OAAb,CAAqB,kBAAU;AAC7B,YAAIyB,aAAgB1C,MAAhB,SAA0BwC,QAA9B,CAD6B,CACa;AAC1C,YAAInD,WAAWjB,MAAME,OAAN,CAAc0B,MAAd,EAAsB5B,MAAMkB,OAAN,CAAckD,QAAd,CAAtB,CAAf;AACApE,cAAMyC,KAAN,CAAY6B,UAAZ,EAAwBrD,QAAxB,EAAkC,IAAlC;AACD,OAJD;AAZK;;AAOP,SAAI,IAAImD,QAAR,IAAoBJ,KAApB,EAA0B;AAAA,YAAlBI,QAAkB;AAUzB;AACF,G;AACD;;;;;;mBAIAG,iB,gCAAmB;AACjBvE,UAAM4B,MAAN,CAAaiB,OAAb,CAAqB,kBAAU;AAC7B,UAAI5B,WAAWjB,MAAME,OAAN,CAAc0B,MAAd,EAAsB5B,MAAMkB,OAAN,CAAcC,UAApC,CAAf;AACA,UAAIqD,iBAAiBxE,MAAMyE,QAAN,CAAexD,QAAf,EAAyBkB,MAAzB,CAAgC,gBAAQ;AAC3D,YAAGkC,KAAKjC,OAAL,CAAapC,MAAMuB,GAAnB,MAA4B,CAAC,CAAhC,EAAkC;AAChC;AACD;AACD,YAAG,eAAKmD,OAAL,CAAaL,IAAb,MAAuB,KAA1B,EAAgC;AAC9B;AACD;AACD,eAAO,IAAP;AACD,OARoB,EAQlBM,GARkB,CAQd,gBAAQ;AACb,eAAON,KAAKO,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,EAAkBC,OAAlB,CAA0B,KAA1B,EAAiC,GAAjC,CAAP;AACD,OAVoB,EAUlBC,IAVkB,CAUb,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAChB,YAAIC,KAAKF,EAAEG,KAAF,CAAQ,GAAR,EAAahD,MAAtB;AACA,YAAIiD,KAAKH,EAAEE,KAAF,CAAQ,GAAR,EAAahD,MAAtB;AACA,YAAG+C,OAAOE,EAAV,EAAa;AACX,iBAAOJ,IAAIC,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAApB;AACD;AACD,eAAOC,KAAKE,EAAL,GAAU,CAAV,GAAc,CAAC,CAAtB;AACD,OAjBoB,CAArB;AAkBA,UAAGX,eAAetC,MAAlB,EAAyB;AACvBM,kBAAU4C,aAAV,CAAwBxD,MAAxB,IAAkC4C,cAAlC;AACD;AACF,KAvBD;AAwBD,G;AACD;;;;;;mBAIAa,a,4BAAe;AACb,QAAIjC,QAAQ,MACPpD,MAAMuC,cADC,GACgBvC,MAAMuB,GADtB,gBAEVvB,MAAME,OAAN,CAAcF,MAAMkB,OAAN,CAAcoE,MAA5B,EAAoCtF,MAAMkB,OAAN,CAAcqE,SAAlD,CAFU,CAAZ;AAIAnC,UAAMP,OAAN,CAAc,gBAAQ;AACpB,UAAI,CAAC7C,MAAMoB,KAAN,CAAYiD,IAAZ,CAAL,EAAwB;AACtB;AACD;AACD,UAAImB,QAAQ,aAAGxD,WAAH,CAAeqC,IAAf,CAAZ;;AAEA;AACA,UAAIrE,MAAM6B,MAAN,CAAa,aAAb,CAAJ,EAAiC;AAC/B,8BAAW4D,oBAAX;AACA,YAAIC,WAAW,0BAAerB,IAAf,EAAqB,YAAI,CAAE,CAA3B,CAAf;AACAqB,iBAASC,eAAT,CAAyBH,MAAMb,GAAN,CAAU;AAAA,iBAAQN,OAAOrE,MAAMuB,GAAb,GAAmBoC,IAA3B;AAAA,SAAV,CAAzB;AACD;;AAED6B,YAAM3C,OAAN,CAAc,gBAAQ;AACpB,YAAI6B,UAAU,eAAKA,OAAL,CAAaf,IAAb,CAAd;AACA,YAAGe,YAAY,KAAf,EAAqB;AACnB;AACD;AACD1E,cAAM0C,WAAN,MAAqB2B,IAArB,GAA4BrE,MAAMuB,GAAlC,GAAwCoC,IAAxC;AACD,OAND;AAOD,KApBD;AAqBD,G;AACD;;;;;;;mBAKAiC,Y,2BAAc;AACZ,QAAIhC,OAAO,EAAX;;AAEA,QAAIiC,MAAM,SAANA,GAAM,WAAY;AACpB,UAAI,CAAC7F,MAAMoB,KAAN,CAAYH,QAAZ,CAAL,EAA4B;AAC1B;AACD;AACD,UAAIuE,QAAQxF,MAAMyE,QAAN,CAAexD,QAAf,EAAyB,IAAzB,CAAZ;AACAuE,YAAM3C,OAAN,CAAc,gBAAQ;AACpB,YAAIgB,WAAS5C,QAAT,GAAoBjB,MAAMuB,GAA1B,GAAgCoC,IAApC;AACAC,aAAKC,GAAL,IAAY,IAAZ;AACD,OAHD;AAID,KATD;;AAHY,wBAaM7D,MAAM6B,MAAN,CAAa,MAAb,CAbN;AAAA,QAaPiE,SAbO,iBAaPA,SAbO;;AAcZ,QAAGA,SAAH,EAAa;AACXD,UAAI,eAAKzF,SAAL,CAAe0F,SAAf,CAAJ;AACD,KAFD,MAEK;AACH9F,YAAM4B,MAAN,CAAaiB,OAAb,CAAqB,kBAAU;AAC7BgD,YAAI7F,MAAME,OAAN,CAAc0B,MAAd,EAAsB5B,MAAMkB,OAAN,CAAc6E,IAApC,CAAJ;AACD,OAFD;AAGD;AACDvD,cAAUwD,QAAV,GAAqBpC,IAArB;AACD,G;AACD;;;;;;mBAIAqC,S,wBAAW;AACTzD,cAAU0D,KAAV,GAAkBlG,MAAM0C,WAAN,CAAkB1C,MAAMuC,cAAN,yBAAlB,CAAlB;AACD,G;AACD;;;;;;mBAIA4D,S,wBAAW;AACT3D,cAAUC,KAAV,GAAkB,EAAlB;AACAD,cAAU4D,MAAV,GAAmB,EAAnB;AACA5D,cAAUX,MAAV,GAAmB,EAAnB;AACAW,cAAUkB,IAAV,GAAiB,EAAjB;AACAlB,cAAUwD,QAAV,GAAqB,EAArB;AACAxD,cAAUc,UAAV,GAAuB,EAAvB;AACAd,cAAU4C,aAAV,GAA0B,EAA1B;AACA5C,cAAUO,KAAV,GAAkB,IAAlB;AACD,G;AACD;;;;;;mBAIAG,I,mBAAM;;AAEJ,SAAKP,UAAL;AACA,SAAKG,SAAL;AACA,SAAKT,SAAL;AACA,SAAKW,WAAL;AACA,SAAKG,cAAL;AACA,SAAKY,OAAL;AACA,SAAKQ,iBAAL;AACA,SAAKf,QAAL;AACA,SAAKoC,YAAL;AACA,SAAKK,SAAL;AACA,SAAKZ,aAAL;;AAEA,sBAAQgB,iBAAR;;AAEArG,UAAMsG,gBAAN,CAAuB9D,UAAUC,KAAjC;AACAzC,UAAMsG,gBAAN,CAAuB9D,UAAUX,MAAjC;AACA7B,UAAMsG,gBAAN,CAAuB9D,UAAUkB,IAAjC;AACA1D,UAAMsG,gBAAN,CAAuB9D,UAAUc,UAAjC;AACAtD,UAAMsG,gBAAN,CAAuB9D,UAAU0D,KAAjC;AACAlG,UAAMsG,gBAAN,CAAuB9D,UAAUwD,QAAjC;AACAhG,UAAMsG,gBAAN,CAAuB9D,UAAU4C,aAAjC;;AAEA;AACA;AACD,G;AACD;;;;;;mBAIAmB,Y,2BAAc;AACZ7F,YAAQ8F,EAAR,CAAW,mBAAX,EAAgC,eAAO;AACrC,UAAIC,MAAMC,IAAIC,OAAd;AACAD,YAAM1G,MAAMkG,KAAN,CAAYQ,GAAZ,EAAiB,WAAW1G,MAAMa,IAAN,IAAcb,MAAM6B,MAAN,CAAa,MAAb,CAAzB,CAAjB,CAAN;AACA7B,YAAM4G,GAAN,CAAUF,GAAV;AACA,UAAGD,IAAIrE,OAAJ,CAAY,cAAZ,IAA8B,CAAC,CAAlC,EAAoC;AAClC1B,gBAAQmG,IAAR;AACD;AACF,KAPD;AAQAnG,YAAQ8F,EAAR,CAAW,oBAAX,EAAiC,eAAO;AACtC,UAAGxG,MAAM6B,MAAN,CAAa,uBAAb,CAAH,EAAyC;AACvC7B,cAAM4G,GAAN,CAAUF,GAAV;AACD;AACF,KAJD;AAKD,G;AACD;;;;;;mBAIAI,K,oBAAO;AACL,sBAAQpF,gBAAR;AACA,sBAAQqF,aAAR;AACA,sBAAQC,iBAAR;;AAEA,SAAK9D,IAAL;AACA,SAAKqD,YAAL;AACA,QAAIvG,MAAM6B,MAAN,CAAa,aAAb,CAAJ,EAAiC;AAC/B,WAAKoF,UAAL;AACD;AACF,G;AACD;;;;;;mBAIAA,U,yBAAY;AACV;AACA,QAAG,KAAKC,eAAR,EAAwB;AACtB;AACD;AACD,QAAIxB,WAAW,KAAKyB,iBAAL,EAAf;AACAzB,aAAS0B,GAAT;AACD,G;AACD;;;;;;;mBAKAD,iB,8BAAkBE,O,EAAQ;AAAA;;AACxBA,cAAUA,WAAWrH,MAAMG,QAA3B;AACA,0BAAWsF,oBAAX;AACA,QAAIC,WAAW,0BAAe2B,OAAf,EAAwB,YAAM;AAC3C,YAAKlB,SAAL;AACA,YAAKjD,IAAL;AACD,KAHc,CAAf;AAIA,WAAOwC,QAAP;AACD,G;AACD;;;;;;mBAIA4B,O,oBAAQD,O,EAASE,O,EAAsB;AAAA;;AAAA,QAAbxH,OAAa,uEAAH,EAAG;;AACrC,QAAGC,MAAMwH,QAAN,CAAeH,OAAf,CAAH,EAA2B;AACzBtH,gBAAUsH,OAAV;AACAA,gBAAU,EAAV;AACD,KAHD,MAGM,IAAGA,YAAY,IAAf,EAAoB;AACxBtH,gBAAU,EAAC6G,KAAK,IAAN,EAAV;AACAS,gBAAU,EAAV;AACD;AACDA,cAAUA,gBAAcrH,MAAMK,SAApB,GAAgCL,MAAMuB,GAAtC,QAAV;AACAgG,cAAUA,WAAWvH,MAAMG,QAA3B;;AAEA,QAAG,CAACH,MAAMoB,KAAN,CAAYiG,OAAZ,CAAJ,EAAyB;AACvB;AACD;AACD,QAAII,iBAAiB,KAAKN,iBAAL,CAAuBI,OAAvB,CAArB;AACA,QAAIG,WAAW,KAAf;AACA,SAAKR,eAAL,GAAuB,wBAAgB;AACrC,UAAG,CAACQ,QAAJ,EAAa;AACXA,mBAAW,IAAX;AACA;AACA1H,cAAMe,IAAN,GAAa,OAAKC,OAAL,EAAb;AACD;;AAEDyG,qBAAe9B,eAAf,CAA+BgC,YAA/B;AACD,KARD;;AAUA,QAAIjC,WAAW,4BAAiB2B,OAAjB,EAA0BE,OAA1B,EAAmCxH,OAAnC,EAA4C,KAAKmH,eAAjD,CAAf;AACAxB,aAAS0B,GAAT;;AAEApH,UAAM4H,WAAN,GAAoB,IAApB;;AAEA,SAAKC,gBAAL,CAAsB,IAAtB;AACD,G;AACD;;;;;;;mBAKMA,gB;2FAAiBC,I;;;;;;;qBACD9H,MAAM+H,GAAN,CAAU,oBAAV,C;;;AAAhBC,qB;AACAjI,qB,GAAU;AACZkI,6BAAa,MADD;AAEZC,6CAA6BJ;AAFjB,e;+CAIPE,QAAQG,OAAR,CAAgBpI,OAAhB,C;;;;;;;;;;;;;;;;AAET;;;;;;mBAIAqI,O,sBAAS;AACP,QAAIC,YAAYC,KAAKC,GAAL,EAAhB;AACA,SAAI,IAAIC,IAAR,IAAgBhG,UAAUC,KAA1B,EAAgC;AAC9BzC,YAAML,OAAN,CAAc6C,UAAUC,KAAV,CAAgB+F,IAAhB,CAAd;AACD;AACDxI,UAAM4G,GAAN,CAAU,2BAAV,EAAuC,SAAvC,EAAkDyB,SAAlD;AACD,G;AACD;;;;;;mBAIAjB,G,gBAAIgB,O,EAAQ;AACV,SAAKtB,KAAL;AACA,QAAGsB,OAAH,EAAW;AACT,WAAKA,OAAL;AACD;AACD,WAAOpI,MAAML,OAAN,CAAc,KAAd,EAAqByH,GAArB,EAAP;AACD,G;AACD;;;;;;SAIOlE,I,iBAAKnD,O,EAAQ;AAClB,QAAI2F,WAAW,IAAI,IAAJ,CAAS3F,OAAT,CAAf;AACA2F,aAASxC,IAAT;AACD,G;;;;;;;;AAGHtB,OAAO6G,OAAP,GAAiBA,QAAQ7I,OAAzB","file":"index.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\n\n//rewrite promise, bluebird is more faster\nrequire('babel-runtime/core-js/promise').default = require('bluebird');\nglobal.Promise = require('bluebird');\n\nimport AutoReload from './util/auto_reload.js';\nimport WatchCompile from './util/watch_compile.js';\nimport Checker from './util/checker.js';\n\nimport './core/think.js';\n\nexport default class {\n  /**\n   * init\n   * @param  {Object} options [project options]\n   * @return {}         []\n   */\n  constructor(options = {}){\n    //extend options to think\n    think.extend(think, this.getPath(), options);\n\n    //normalize path\n    think.APP_PATH = path.normalize(think.APP_PATH);\n    think.ROOT_PATH = path.normalize(think.ROOT_PATH);\n    think.RESOURCE_PATH = path.normalize(think.RESOURCE_PATH);\n    think.RUNTIME_PATH = path.normalize(think.RUNTIME_PATH);\n\n    //parse data from process arguments\n    let i = 2;\n    let argv = process.argv[i];\n    //get app mode from argv\n    if (argv === 'production' || argv === 'development' || argv === 'testing') {\n      think.env = argv;\n      i++;\n    }\n    argv = process.argv[i];\n    //get port or cli url from argv\n    if (argv) {\n      if (/^\\d+$/.test(argv)) {\n        think.port = argv;\n      }else{\n        think.cli = argv;\n      }\n    }\n    //get app mode\n    think.mode = this.getMode();\n  }\n  /**\n   * get app mode\n   * @return {Number} [app mode]\n   */\n  getMode(){\n    let filepath = `${think.APP_PATH}/${think.dirname.controller}`;\n    if (think.isDir(filepath)) {\n      return think.mode_normal;\n    }\n    return think.mode_module;\n  }\n  /**\n   * get app path\n   * @return {Object} []\n   */\n  getPath(){\n    let filepath = process.argv[1];\n    let RESOURCE_PATH = path.dirname(filepath);\n    let ROOT_PATH = path.dirname(RESOURCE_PATH);\n    let APP_PATH = `${ROOT_PATH}${think.sep}app`;\n    let RUNTIME_PATH = ROOT_PATH + think.sep + think.dirname.runtime;\n    return {\n      APP_PATH,\n      RESOURCE_PATH,\n      ROOT_PATH,\n      RUNTIME_PATH\n    };\n  }\n  /**\n   * check node env\n   * @return {Boolean} []\n   */\n  checkEnv(){\n    this.checkNodeVersion();\n  }\n  \n  /**\n   * get app module list\n   * @return {} []\n   */\n  getModule(){\n    //only have default module in mini mode\n    if (think.mode === think.mode_normal) {\n      think.module = [think.config('default_module')];\n      return think.module;\n    }\n    let modulePath = think.APP_PATH;\n    if(!think.isDir(modulePath)){\n      return [];\n    }\n    let modules = fs.readdirSync(modulePath);\n    let denyModuleList = think.config('deny_module_list') || [];\n    if (denyModuleList.length > 0) {\n      modules = modules.filter(module => {\n        if(module[0] === '.'){\n          return;\n        }\n        if (denyModuleList.indexOf(module) === -1) {\n          return module;\n        }\n      });\n    }\n    think.module = modules;\n    return modules;\n  }\n  /**\n   * load alias\n   * @return {} []\n   */\n  loadAlias(){\n    let aliasPath = `${think.THINK_LIB_PATH}/config/sys/alias.js`;\n    thinkData.alias = think.safeRequire(aliasPath);\n  }\n  /**\n   * load config\n   * @return {} []\n   */\n  loadConfig(){\n    think.getModuleConfig();\n    //load modules config\n    this.getModule().forEach(module => {\n      think.getModuleConfig(module);\n    });\n  }\n  \n  /**\n   * load route\n   * @return {} []\n   */\n  loadRoute(){\n    think.route();\n  }\n  /**\n   * load adapter\n   * @return {} []\n   */\n  loadAdapter(){\n    think.adapter.load();\n  }\n  /**\n   * load middleware\n   * @return {} []\n   */\n  loadMiddleware(){\n    let paths = [\n      `${think.THINK_LIB_PATH}${think.sep}middleware`,\n      `${think.getPath(undefined, think.dirname.middleware)}`\n    ];\n    think.alias('middleware', paths);\n    //middleware base class\n    think.middleware.base = think.require('middleware_base');\n  }\n  /**\n   * load hook\n   * @return {} []\n   */\n  loadHook(){\n    let hookPath = `${think.THINK_LIB_PATH}/config/hook.js`;\n    thinkData.hook = think.extend({}, think.safeRequire(hookPath));\n\n    let file = `${think.getPath(undefined, think.dirname.config)}/hook.js`;\n    let data = think.extend({}, think.safeRequire(file));\n    for(let key in data){\n      think.hook.set(key, data[key]); \n    }\n  }\n  /**\n   * load controller, model, logic, service files\n   * @return {} []\n   */\n  loadMVC(){\n    let types = {\n      model: ['base', 'relation', 'mongo', 'adv'],\n      controller: ['base', 'rest'],\n      logic: ['base'],\n      service: ['base']\n    };\n    for(let itemType in types){\n      think.alias(itemType, `${think.THINK_LIB_PATH}${think.sep}${itemType}`);\n      types[itemType].forEach(item => {\n        think[itemType][item] = think.require(`${itemType}_${item}`);\n      });\n      think.module.forEach(module => {\n        let moduleType = `${module}/${itemType}`; //can not use think.sep\n        let filepath = think.getPath(module, think.dirname[itemType]);\n        think.alias(moduleType, filepath, true);\n      });\n    }\n  }\n  /**\n   * load sub controller\n   * @return {} []\n   */\n  loadSubController(){\n    think.module.forEach(module => {\n      let filepath = think.getPath(module, think.dirname.controller);\n      let subControllers = think.getFiles(filepath).filter(item => {\n        if(item.indexOf(think.sep) === -1){\n          return;\n        }\n        if(path.extname(item) !== '.js'){\n          return;\n        }\n        return true;\n      }).map(item => {\n        return item.slice(0, -3).replace(/\\\\/g, '/');\n      }).sort((a, b) => {\n        let al = a.split('/').length;\n        let bl = b.split('/').length;\n        if(al === bl){\n          return a < b ? 1 : -1;\n        }\n        return al < bl ? 1 : -1;\n      });\n      if(subControllers.length){\n        thinkData.subController[module] = subControllers;\n      }\n    });\n  }\n  /**\n   * load bootstrap\n   * @return {} []\n   */\n  loadBootstrap(){\n    let paths = [\n      `${think.THINK_LIB_PATH}${think.sep}bootstrap`,\n      think.getPath(think.dirname.common, think.dirname.bootstrap)\n    ];\n    paths.forEach(item => {\n      if (!think.isDir(item)) {\n        return;\n      }\n      let files = fs.readdirSync(item);\n\n      //must reload all bootstrap files.\n      if (think.config('auto_reload')) {\n        AutoReload.rewriteSysModuleLoad();\n        var instance = new AutoReload(item, ()=>{});\n        instance.clearFilesCache(files.map(file => item + think.sep + file));\n      }\n\n      files.forEach(file => {\n        let extname = path.extname(file);\n        if(extname !== '.js'){\n          return;\n        }\n        think.safeRequire(`${item}${think.sep}${file}`);\n      });\n    });\n  }\n  /**\n   * load template file\n   * add template files to cache\n   * @return {} []\n   */\n  loadTemplate(){\n    let data = {};\n\n    let add = filepath => {\n      if (!think.isDir(filepath)) {\n        return;\n      }\n      let files = think.getFiles(filepath, true);\n      files.forEach(file => {\n        let key = `${filepath}${think.sep}${file}`;\n        data[key] = true;\n      });\n    };\n    let {root_path} = think.config('view');\n    if(root_path){\n      add(path.normalize(root_path));\n    }else{\n      think.module.forEach(module => {\n        add(think.getPath(module, think.dirname.view));\n      });\n    }\n    thinkData.template = data;\n  }\n  /**\n   * load system error message\n   * @return {} []\n   */\n  loadError(){\n    thinkData.error = think.safeRequire(think.THINK_LIB_PATH + `/config/sys/error.js`);\n  }\n  /**\n   * clear all cache for reload\n   * @return {void} []\n   */\n  clearData(){\n    thinkData.alias = {};\n    thinkData.export = {};\n    thinkData.config = {};\n    thinkData.hook = {};\n    thinkData.template = {};\n    thinkData.middleware = {};\n    thinkData.subController = {};\n    thinkData.route = null;\n  }\n  /**\n   * load all config or modules\n   * @return {} []\n   */\n  load(){\n    \n    this.loadConfig();\n    this.loadRoute();\n    this.loadAlias();\n    this.loadAdapter();\n    this.loadMiddleware();\n    this.loadMVC();\n    this.loadSubController();\n    this.loadHook();\n    this.loadTemplate();\n    this.loadError();\n    this.loadBootstrap();\n\n    Checker.checkModuleConfig();\n\n    think.toFastProperties(thinkData.alias);\n    think.toFastProperties(thinkData.config);\n    think.toFastProperties(thinkData.hook);\n    think.toFastProperties(thinkData.middleware);\n    think.toFastProperties(thinkData.error);\n    think.toFastProperties(thinkData.template);\n    think.toFastProperties(thinkData.subController);\n\n    //console.log(thinkData.alias)\n    //console.log(eval('%HasFastProperties(thinkData.template)'))\n  }\n  /**\n   * capture error\n   * @return {} []\n   */\n  captureError(){\n    process.on('uncaughtException', err => {\n      let msg = err.message;\n      err = think.error(err, 'port:' + (think.port || think.config('port')));\n      think.log(err);\n      if(msg.indexOf(' EADDRINUSE ') > -1){\n        process.exit();\n      }\n    });\n    process.on('unhandledRejection', err => {\n      if(think.config('log_unhandled_promise')){\n        think.log(err);\n      }\n    });\n  }\n  /**\n   * start\n   * @return {} []\n   */\n  start(){\n    Checker.checkNodeVersion();\n    Checker.checkFileName();\n    Checker.checkDependencies();\n    \n    this.load();\n    this.captureError();\n    if (think.config('auto_reload')) {\n      this.autoReload();\n    }\n  }\n  /**\n   * auto reload user modified files\n   * @return {} []\n   */\n  autoReload(){\n    //it auto reload by watch compile\n    if(this.compileCallback){\n      return;\n    }\n    let instance = this.getReloadInstance();\n    instance.run();\n  }\n  /**\n   * get auto reload class instance\n   * @param  {String} srcPath []\n   * @return {Object}         []\n   */\n  getReloadInstance(srcPath){\n    srcPath = srcPath || think.APP_PATH;\n    AutoReload.rewriteSysModuleLoad();\n    let instance = new AutoReload(srcPath, () => {\n      this.clearData();\n      this.load();\n    });\n    return instance;\n  }\n  /**\n   * use babel compile code\n   * @return {} []\n   */\n  compile(srcPath, outPath, options = {}){\n    if(think.isObject(srcPath)){\n      options = srcPath;\n      srcPath = '';\n    }else if(srcPath === true){\n      options = {log: true};\n      srcPath = '';\n    }\n    srcPath = srcPath || `${think.ROOT_PATH}${think.sep}src`;\n    outPath = outPath || think.APP_PATH;\n\n    if(!think.isDir(srcPath)){\n      return;\n    }\n    let reloadInstance = this.getReloadInstance(outPath);\n    let _getMode = false;\n    this.compileCallback = changedFiles => {\n      if(!_getMode){\n        _getMode = true;\n        //get app mode\n        think.mode = this.getMode();\n      }\n\n      reloadInstance.clearFilesCache(changedFiles);\n    };\n\n    let instance = new WatchCompile(srcPath, outPath, options, this.compileCallback);\n    instance.run();\n\n    think.autoCompile = true;\n    \n    this.sourceMapSupport(true);\n  }\n  /**\n   * source map support\n   * @param  {} flag []\n   * @return {}      []\n   */\n  async sourceMapSupport(flag){\n    let support = await think.npm('source-map-support');\n    let options = {\n      environment: 'node',\n      emptyCacheBetweenOperations: flag\n    };\n    return support.install(options);\n  }\n  /**\n   * pre require\n   * @return {} []\n   */\n  preload(){\n    let startTime = Date.now();\n    for(let name in thinkData.alias){\n      think.require(thinkData.alias[name]);\n    }\n    think.log('preload packages finished', 'PRELOAD', startTime);\n  }\n  /**\n   * run\n   * @return {} []\n   */\n  run(preload){\n    this.start();\n    if(preload){\n      this.preload();\n    }\n    return think.require('app').run();\n  }\n  /**\n   * load, convenient for plugins\n   * @return {} []\n   */\n  static load(options){\n    let instance = new this(options);\n    instance.load();\n  }\n}\n\nmodule.exports = exports.default;"]}