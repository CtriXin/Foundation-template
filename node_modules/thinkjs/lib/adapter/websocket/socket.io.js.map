{"version":3,"sources":["../../../src/adapter/websocket/socket.io.js"],"names":["run","think","npm","socketio","io","server","config","adp","adapter","path","allow_origin","origins","messages","isArray","forEach","v","sc","namespace","of","registerSocket","msgKeys","open","close","thinkCache","WEBSOCKET","sockets","on","message","undefined","socket","msgKey","msg","emit","event","data","broadcast","containSelf","url","request","http","res","extend","socketEmit","socketBroadcast","instance","app"],"mappings":"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","file":"socket.io.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n/**\n * websocket adapter for socket.io\n */\nexport default class extends Base {\n  /**\n   * run\n   * @return {} []\n   */\n  async run(){\n\n    let socketio = await think.npm('socket.io');\n    let io = socketio(this.server);\n    this.io = io;\n\n    //set io adapter, must be a function\n    //http://socket.io/docs/using-multiple-nodes/\n    if(this.config.adp){\n      io.adapter(this.config.adp());\n    }\n\n    //Sets the path v under which engine.io and the static files will be served. Defaults to /socket.io.\n    if(this.config.path){\n      io.path(this.config.path);\n    }\n\n    //Sets the allowed origins v. Defaults to any origins being allowed.\n    let allow_origin = this.config.allow_origin;\n    if(allow_origin){\n      io.origins(this.config.allow_origin);\n    }\n\n    //get message type\n    let messages = think.isArray(this.config.messages) ? this.config.messages : [this.config.messages];\n    messages.forEach((v = {}) => {\n      let sc = v.namespace ? io.of(v.namespace) : io;\n      this.registerSocket(sc, v);\n    });\n  }\n\n  /**\n   * register namespace of socket, and support multi socket connect\n   * eg:\n   * export default {\n    messages:\n        [\n            {\n                namespace:'/payCount',\n                open: 'analysis/erp_pay/open',\n                close: 'analysis/erp_pay/close',\n                day: 'analysis/erp_pay/day',\n                updateFromMq: 'analysis/erp_pay/updateFromMq',\n            }\n        ]\n    };\n   * @param io\n   * @param messages\n     */\n  registerSocket(io, messages){\n    let msgKeys = Object.keys(messages);\n    let open = messages.open;\n    delete messages.open;\n    let close = messages.close;\n    delete messages.close;\n\n    thinkCache(thinkCache.WEBSOCKET, io.sockets.sockets);\n\n    io.on('connection', socket => {\n\n      //open connection\n      if(open){\n        this.message(open, undefined, socket);\n      }\n      //listen disonnection event\n      if(close){\n        socket.on('disconnect', () => {\n          this.message(close, undefined, socket);\n        });\n      }\n\n      //listen list of message type\n      msgKeys.forEach(msgKey => {\n        socket.on(msgKey, msg => {\n          this.message(messages[msgKey], msg, socket);\n        });\n      });\n    });\n  }\n  /**\n   * emit socket data\n   * @param  {String} event []\n   * @param  {Mixed} data  []\n   * @return {}       []\n   */\n  emit(event, data){\n    return this.socket.emit(event, data);\n  }\n  /**\n   * broadcast socket data\n   * @param  {String} event       []\n   * @param  {Mixed} data        []\n   * @param  {Boolean} containSelf []\n   * @return {}             []\n   */\n  broadcast(event, data, containSelf){\n    if(containSelf){\n      this.io.sockets.emit(event, data);\n    }else{\n      this.socket.broadcast.emit(event, data);\n    }\n  }\n  /**\n   * deal message\n   * @param  {String} url  []\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n  async message(url, data, socket){\n    let request = socket.request;\n    if(url[0] !== '/'){\n      url = `/${url}`;\n    }\n    request.url = url;\n    let http;\n    //socket.io c++ client发过来的requet没有res\n    if(!request.res){\n        http = await think.http(url);\n    }else{\n        http = await think.http(request, think.extend({}, request.res));\n    }\n    http.data = data;\n    http.socket = socket;\n    http.io = this.io;\n\n    http.socketEmit = this.emit;\n    http.socketBroadcast = this.broadcast;\n\n    let instance = new this.app(http);\n    return instance.run();\n  }\n}\n"]}