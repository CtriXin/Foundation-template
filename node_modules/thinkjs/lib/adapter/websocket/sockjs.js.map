{"version":3,"sources":["../../../src/adapter/websocket/sockjs.js"],"names":["run","think","npm","sockjs","options","log","config","sockjs_url","sockjsServer","createServer","messages","extend","open","close","thinkCache","WEBSOCKET","on","addSocket","socket","message","undefined","removeSocket","msg","JSON","parse","event","data","e","path","installHandlers","server","prefix","sockets","push","some","item","index","id","splice","emit","write","broadcast","containSelf","forEach","url","http","headers","ip","remoteAddress","socketEmit","socketBroadcast","instance","app"],"mappings":"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","file":"sockjs.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * websocket adapter for sockjs\n */\nexport default class extends Base {\n  /**\n   * run\n   * @return {} []\n   */\n  async run(){\n    let sockjs = await think.npm('sockjs');\n\n    let options = {\n      log: () => {}\n    };\n    if(this.config.sockjs_url){\n      options.sockjs_url = this.config.sockjs_url;\n    }\n    let sockjsServer = sockjs.createServer(options);\n    this.sockjs = sockjsServer;\n\n    //get message type\n    let messages = think.extend({}, this.config.messages);\n    let open = messages.open;\n    delete messages.open;\n    let close = messages.close;\n    delete messages.close;\n\n    thinkCache(thinkCache.WEBSOCKET, []);\n\n    sockjsServer.on('connection', socket => {\n\n      this.addSocket(socket);\n          \n      //open connection\n      if(open){\n        this.message(open, undefined, socket);\n      }\n\n      socket.on('close', () => {\n        this.removeSocket(socket);\n\n        if(close){\n          this.message(close, undefined, socket);\n        }\n      });\n\n      //msg is {event: event, data: data}\n      socket.on('data', msg => {\n        try{\n          msg = JSON.parse(msg);\n          if(msg.event && messages[msg.event]){\n            this.message(messages[msg.event], msg.data, socket);\n          }\n        }catch(e){}\n      });\n      \n    });\n\n    let path = this.config.path || '/sockjs';\n    sockjsServer.installHandlers(this.server, {prefix: path});\n  }\n  /**\n   * add socket\n   * @param {Object} socket []\n   */\n  addSocket(socket){\n    let sockets = thinkCache(thinkCache.WEBSOCKET);\n    sockets.push(socket);\n  }\n  /**\n   * remove socket\n   * @param  {Object} socket []\n   * @return {}        []\n   */\n  removeSocket(socket){\n    let sockets = thinkCache(thinkCache.WEBSOCKET);\n    sockets.some((item, index) => {\n      if(item.id === socket.id){\n        sockets.splice(index, 1);\n        return true;\n      }\n    });\n  }\n  /**\n   * emit data\n   * @param  {String} event []\n   * @param  {Mixed} data  []\n   * @return {}       []\n   */\n  emit(event, data){\n    this.socket.write(JSON.stringify({event: event, data: data}));\n  }\n  /**\n   * broadcast data\n   * @param  {String} event []\n   * @param  {Mixed} data  []\n   * @return {}       []\n   */\n  broadcast(event, data, containSelf){\n    let sockets = thinkCache(thinkCache.WEBSOCKET);\n    sockets.forEach(socket => {\n      if(!containSelf && socket.id === this.socket.id){\n        return;\n      }\n      socket.write(JSON.stringify({event: event, data: data}));\n    });\n  }\n  /**\n   * deal message\n   * @param  {String} url  []\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n  async message(url, data, socket){\n    if(url[0] !== '/'){\n      url = `/${url}`;\n    }\n\n    let http = await think.http({\n      url: url,\n      headers: socket.headers,\n      ip: socket.remoteAddress\n    });\n    \n    http.data = data;\n    http.socket = socket;\n    http.sockjs = this.sockjs;\n\n    http.socketEmit = this.emit;\n    http.socketBroadcast = this.broadcast;\n\n    let instance = new this.app(http);\n    return instance.run();\n  }\n}"]}