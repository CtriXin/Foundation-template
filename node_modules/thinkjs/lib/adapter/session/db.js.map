{"version":3,"sources":["../../../src/adapter/session/db.js"],"names":["init","options","think","parseConfig","config","cookie","newCookie","timeout","isChanged","model","extend","from","gcType","gc","getData","data","add","expire","Date","now","await","where","find","isEmpty","JSON","parse","e","get","name","then","set","value","delete","flush","update","adapter","base"],"mappings":"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","file":"db.js","sourcesContent":["'use strict';\n/**\n * db session\n \n  DROP TABLE IF EXISTS `think_session`;\n  CREATE TABLE `think_session` (\n    `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n    `cookie` varchar(255) NOT NULL DEFAULT '',\n    `data` text,\n    `expire` bigint(11) NOT NULL,\n    PRIMARY KEY (`id`),\n    UNIQUE KEY `cookie` (`cookie`),\n    KEY `expire` (`expire`)\n  ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  init(options){\n    \n    options = think.parseConfig(think.config('session'), options);\n    this.cookie = options.cookie;\n    this.newCookie = options.newCookie;\n    \n    this.timeout = options.timeout;\n    this.isChanged = false;\n\n    //let dbConfig = think.extend({}, think.config('db'), options);\n    this.model = think.model('session', think.extend({\n      from: 'session'\n    }, think.config('db')));\n\n    this.gcType = 'session_db';\n    think.gc(this);\n  }\n  /**\n   * get session data\n   * @return {Promise} []\n   */\n  async getData(){\n    if(this.data){\n      return this.data;\n    }\n    //when session cookie is not exist, return direct\n    if(this.newCookie){\n      this.data = {};\n      await this.model.add({cookie: this.cookie, expire: Date.now() + this.timeout * 1000});\n      return this.data;\n    }\n    //let data = await this.model.where({cookie: this.cookie}).find();\n    let data = await think.await(`session_${this.cookie}`, () => {\n      return this.model.where({cookie: this.cookie}).find();\n    });\n\n    if(this.data){\n      return this.data;\n    }\n\n    this.data = {};\n    if(think.isEmpty(data)){\n      await this.model.add({cookie: this.cookie, expire: Date.now() + this.timeout * 1000});\n      return this.data;\n    }\n\n    if(Date.now() > data.expire){\n      return this.data;\n    }\n\n    try{\n      this.data = JSON.parse(data.data) || {};\n    }catch(e){}\n    \n    return this.data;\n  }\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    return this.getData().then(() => {\n      return name ? this.data[name] : this.data;\n    });\n  }\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n  set(name, value, timeout = this.timeout){\n    this.timeout = timeout;\n    return this.getData().then(() => {\n      this.isChanged = true;\n      this.data[name] = value;\n    });\n  }\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    return this.getData().then(() => {\n      this.isChanged = true;\n      if(name){\n        delete this.data[name];\n      }else{\n        this.data = {};\n      }\n    });\n  }\n  /**\n   * flush data\n   * @return {Promise} []\n   */\n  flush(){\n    let data = {\n      expire: Date.now() + this.timeout * 1000,\n      timeout: this.timeout\n    };\n    return this.getData().then(() => {\n      //if session is empty and not changed, not flush\n      if(!this.isChanged && think.isEmpty(this.data)){\n        return;\n      }\n      //update data when data is changed\n      if(this.isChanged){\n        data.data = JSON.stringify(this.data);\n      }\n      return this.model.where({cookie: this.cookie}).update(data);\n    });\n  }\n  /**\n   * gc\n   * @return {Promise} []\n   */\n  gc(){\n    return this.model.where({expire: {'<': Date.now()}}).delete();\n  }\n}"]}