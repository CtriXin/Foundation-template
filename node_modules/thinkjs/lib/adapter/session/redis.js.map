{"version":3,"sources":["../../../src/adapter/session/redis.js"],"names":["RedisSocket","think","adapter","init","options","parseConfig","config","timeout","cookie","getRedisInstance","name","call","command","from","getInstance","thinkCache","REDIS","getData","data","instance","await","get","JSON","parse","e","then","set","value","delete","flush","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,cAAcC,MAAMC,OAAN,CAAc,QAAd,EAAwB,OAAxB,CAAlB;;AAEA;;;;;;;;;;;;AAIE;;;;;mBAKAC,I,iBAAKC,O,EAAQ;;AAEX,SAAKA,OAAL,GAAeH,MAAMI,WAAN,CAAkBJ,MAAMK,MAAN,CAAa,SAAb,CAAlB,EAA2CF,OAA3C,CAAf;;AAEA,SAAKG,OAAL,GAAe,KAAKH,OAAL,CAAaG,OAA5B;AACA,SAAKC,MAAL,GAAc,KAAKJ,OAAL,CAAaI,MAA3B;AACD,G;AACD;;;;;;mBAIAC,gB,6BAAiBC,I,EAAK;AACpB,QAAIN,UAAUH,MAAMI,WAAN,CAAkBM,IAAlB,CAAuB,KAAKP,OAA5B,EAAqCH,MAAMK,MAAN,CAAa,OAAb,CAArC,EAA4D;AACxEM,eAASF,IAD+D;AAExEG,YAAM;AAFkE,KAA5D,CAAd;AAIA,SAAKN,OAAL,GAAeH,QAAQG,OAAR,IAAmB,KAAKA,OAAvC;AACA,WAAOP,YAAYc,WAAZ,CAAwBV,OAAxB,EAAiCW,WAAWC,KAA5C,EAAmD,CAAC,SAAD,EAAY,MAAZ,CAAnD,CAAP;AACD,G;AACD;;;;;;mBAIMC,O;;;;;;;;;mBAED,KAAKC,I;;;;;+CACC,KAAKA,I;;;AAGVC,sB,GAAW,KAAKV,gBAAL,CAAsB,KAAtB,C;;qBAEER,MAAMmB,KAAN,cAAuB,KAAKZ,MAA5B,EAAsC,YAAM;AAC3D,uBAAOW,SAASE,GAAT,CAAa,OAAKb,MAAlB,CAAP;AACD,eAFgB,C;;;AAAbU,kB;;mBAID,KAAKA,I;;;;;+CACC,KAAKA,I;;;;AAGd,mBAAKA,IAAL,GAAY,EAAZ;AACA,kBAAG;AACD,qBAAKA,IAAL,GAAYI,KAAKC,KAAL,CAAWL,IAAX,KAAoB,EAAhC;AACD,eAFD,CAEC,OAAMM,CAAN,EAAQ,CAAE;;+CAEJ,KAAKN,I;;;;;;;;;;;;;;;;AAEd;;;;;;;mBAKAG,G,gBAAIX,I,EAAK;AAAA;;AACP,WAAO,KAAKO,OAAL,GAAeQ,IAAf,CAAoB,YAAM;AAC/B,aAAO,CAACf,IAAD,GAAQ,OAAKQ,IAAb,GAAoB,OAAKA,IAAL,CAAUR,IAAV,CAA3B;AACD,KAFM,CAAP;AAGD,G;AACD;;;;;;;;mBAMAgB,G,gBAAIhB,I,EAAMiB,K,EAAOpB,O,EAAQ;AAAA;;AACvB,QAAGA,OAAH,EAAW;AACT,WAAKA,OAAL,GAAeA,OAAf;AACD;AACD,WAAO,KAAKU,OAAL,GAAeQ,IAAf,CAAoB,YAAM;AAC/B,aAAKP,IAAL,CAAUR,IAAV,IAAkBiB,KAAlB;AACD,KAFM,CAAP;AAGD,G;AACD;;;;;;;mBAKAC,M,oBAAOlB,I,EAAK;AAAA;;AACV,WAAO,KAAKO,OAAL,GAAeQ,IAAf,CAAoB,YAAM;AAC/B,UAAGf,IAAH,EAAQ;AACN,eAAO,OAAKQ,IAAL,CAAUR,IAAV,CAAP;AACD,OAFD,MAEK;AACH,eAAKQ,IAAL,GAAY,EAAZ;AACD;AACF,KANM,CAAP;AAOD,G;AACD;;;;;;mBAIAW,K,oBAAO;AAAA;;AACL,WAAO,KAAKZ,OAAL,GAAeQ,IAAf,CAAoB,YAAM;AAC/B,UAAIN,WAAW,OAAKV,gBAAL,CAAsB,KAAtB,CAAf;AACA,aAAOU,SAASO,GAAT,CAAa,OAAKlB,MAAlB,EAA0B,yBAAe,OAAKU,IAApB,CAA1B,EAAqD,OAAKX,OAA1D,CAAP;AACD,KAHM,CAAP;AAID,G;;;EAnG0BN,MAAMC,OAAN,CAAc4B,I","file":"redis.js","sourcesContent":["'use strict';\n\nlet RedisSocket = think.adapter('socket', 'redis');\n\n/**\n * redis session\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  init(options){\n\n    this.options = think.parseConfig(think.config('session'), options);\n\n    this.timeout = this.options.timeout;\n    this.cookie = this.options.cookie;\n  }\n  /**\n   * get redis instance\n   * @return {Object} []\n   */\n  getRedisInstance(name){\n    let options = think.parseConfig.call(this.options, think.config('redis'), {\n      command: name,\n      from: 'session'\n    });\n    this.timeout = options.timeout || this.timeout;\n    return RedisSocket.getInstance(options, thinkCache.REDIS, ['command', 'from']);\n  }\n  /**\n   * get session\n   * @return {Promise} []\n   */\n  async getData(){\n    \n    if(this.data){\n      return this.data;\n    }\n\n    let instance = this.getRedisInstance('get');\n\n    let data = await think.await(`session_${this.cookie}`, () => {\n      return instance.get(this.cookie);\n    });\n\n    if(this.data){\n      return this.data;\n    }\n\n    this.data = {};\n    try{\n      this.data = JSON.parse(data) || {};\n    }catch(e){}\n\n    return this.data;\n  }\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    return this.getData().then(() => {\n      return !name ? this.data : this.data[name];\n    });\n  }\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n  set(name, value, timeout){\n    if(timeout){\n      this.timeout = timeout;\n    }\n    return this.getData().then(() => {\n      this.data[name] = value;\n    });\n  }\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    return this.getData().then(() => {\n      if(name){\n        delete this.data[name];\n      }else{\n        this.data = {};\n      }\n    });\n  }\n  /**\n   * flush data\n   * @return {Promise} []\n   */\n  flush(){\n    return this.getData().then(() => {\n      let instance = this.getRedisInstance('set');\n      return instance.set(this.cookie, JSON.stringify(this.data), this.timeout);\n    });\n  }\n}"]}