{"version":3,"sources":["../../../src/adapter/session/memory.js"],"names":["BaseStore","think","adapter","init","options","parseConfig","config","timeout","cookie","store","type","thinkCache","SESSION","gcType","gc","get","name","then","data","Date","now","expire","delete","value","clone","set","extend","list","key","item","base"],"mappings":"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","file":"memory.js","sourcesContent":["'use strict';\n\n/**\n * base store\n * @type {Class}\n */\nlet BaseStore = think.adapter('store', 'memory');\n\n/**\n * memory session\n */\nexport default class extends think.adapter.base {\n  /**\n   * init \n   * @param  {Object} config []\n   * @return {}         []\n   */\n  init(options){\n\n    options = think.parseConfig(think.config('session'), options);\n\n    this.timeout = options.timeout;\n    //key is session cookie value\n    this.cookie = options.cookie;\n    //store\n    this.store = new BaseStore({\n      type: thinkCache.SESSION\n    });\n    //set gc type & start gc\n    this.gcType = 'session_base';\n    think.gc(this);\n  }\n  /**\n   * get session data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    return this.store.get(this.cookie).then(data => {\n      if(!data){\n        return;\n      }\n      if(Date.now() > data.expire){\n        return this.store.delete(this.cookie);\n      }\n      data.expire = Date.now() + this.timeout * 1000;\n      let value = data.data;\n      if(name){\n        return think.clone(value[name]);\n      }\n      return think.clone(value);\n    });\n  }\n  /**\n   * set session data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   * @return {Promise} []\n   */\n  set(name, value, timeout = this.timeout){\n    value = think.clone(value);\n    return this.store.get(this.cookie).then(data => {\n      data = data || {};\n      data = think.extend({}, data, {\n        expire: Date.now() + timeout * 1000,\n        timeout,\n        data: {\n          [name]: value\n        }\n      });\n      return this.store.set(this.cookie, data);\n    });\n  }\n  /**\n   * delete session data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    return this.store.get(this.cookie).then(data => {\n      if(!data){\n        return;\n      }\n      if(!name){\n        return this.store.delete(this.cookie);\n      }\n      delete data.data[name];\n    });\n  }\n  /**\n   * gc\n   * is internal method\n   * @return {} []\n   */\n  gc(){\n    let now = Date.now();\n    return this.store.list().then(list => {\n      for(let key in list){\n        let item = list[key];\n        if(item && now > item.expire){\n          delete list[key];\n        }\n      }\n    });\n  }\n}\n"]}