{"version":3,"sources":["../../../src/adapter/template/base.js"],"names":["parseConfig","defaultConf","extraConf","config","think","extend","isEmpty","options","log","type","prerender","isFunction","args","getContent","file","promisify","stat","mTime","mtime","getTime","fileCache","thinkCache","VIEW_CONTENT","await","fn","readFile","then","content","run","templateFile","adapter","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAEA;;;;;;;;;;;;AAKE;;;;;;mBAMAA,W,wBAAYC,W,EAAaC,S,EAAU;AACjC,QAAIC,SAASC,MAAMJ,WAAN,CAAkBI,MAAMC,MAAN,CAAa,EAAb,EAAiBJ,WAAjB,EAA8BG,MAAMD,MAAN,CAAa,MAAb,CAA9B,EAAoDD,SAApD,CAAlB,CAAb;AACA;AACA,QAAG,CAACE,MAAME,OAAN,CAAcH,OAAOI,OAArB,CAAJ,EAAkC;AAChCH,YAAMI,GAAN,mDAA0DL,OAAOM,IAAjE,eAAiF,SAAjF;AACAN,eAASC,MAAMC,MAAN,CAAaF,MAAb,EAAqBA,OAAOI,OAA5B,CAAT;AACD;AACD,WAAOJ,MAAP;AACD,G;AACD;;;;;;;;mBAMAO,S,wBAA+B;AAAA,QAArBP,MAAqB,uEAAZ,EAAY;;AAC7B,QAAGC,MAAMO,UAAN,CAAiBR,OAAOO,SAAxB,CAAH,EAAsC;AAAA,wCADdE,IACc;AADdA,YACc;AAAA;;AACpCT,aAAOO,SAAP,eAAoBE,IAApB;AACD;AACF,G;AACD;;;;;;mBAIMC,U;2FAAWC,I;;;;;;;qBACEV,MAAMW,SAAN,CAAgB,aAAGC,IAAnB,gBAA6BF,IAA7B,C;;;AAAbE,kB;AACAC,mB,GAAQD,KAAKE,KAAL,CAAWC,OAAX,E;AACRC,uB,GAAYC,WAAWA,WAAWC,YAAtB,EAAoCR,IAApC,C;;oBACbM,aAAaA,UAAU,CAAV,KAAgBH,K;;;;;+CACvBG,UAAU,CAAV,C;;;+CAEFhB,MAAMmB,KAAN,eAAwBT,IAAxB,EAAgC,YAAM;AAC3C,oBAAIU,KAAKpB,MAAMW,SAAN,CAAgB,aAAGU,QAAnB,eAAT;AACA,uBAAOD,GAAGV,IAAH,EAAS,MAAT,CAAP;AACD,eAHM,EAGJY,IAHI,CAGC,mBAAW;AACjB;AACA,oBAAG,CAACC,OAAJ,EAAY;AACV,yBAAOA,OAAP;AACD;AACDN,2BAAWA,WAAWC,YAAtB,EAAoCR,IAApC,EAA0C,CAACG,KAAD,EAAQU,OAAR,CAA1C;AACA,uBAAOA,OAAP;AACD,eAVM,C;;;;;;;;;;;;;;;;AAYT;;;;;;;;mBAMAC,G,gBAAIC,Y,EAAa;AACf,WAAO,KAAKhB,UAAL,CAAgBgB,YAAhB,CAAP;AACD,G;;;EA1D0BzB,MAAM0B,OAAN,CAAcC,I","file":"base.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\n\n/**\n * template base class\n * @type {Class}\n */\nexport default class extends think.adapter.base {\n  /**\n   * merge config\n   * @param  {Object} defaultConf []\n   * @param  {Object} extraConf   []\n   * @return {}             []\n   */\n  parseConfig(defaultConf, extraConf){\n    let config = think.parseConfig(think.extend({}, defaultConf, think.config('view'), extraConf));\n    //compatibility with view.options\n    if(!think.isEmpty(config.options)){\n      think.log(`view.options is deprecated, use view.adapter.${config.type} instead`, 'WARNING');\n      config = think.extend(config, config.options);\n    }\n    return config;\n  }\n  /**\n   * pre render\n   * @param  {Object}    config []\n   * @param  {...[type]} args   []\n   * @return {}           []\n   */\n  prerender(config = {}, ...args){\n    if(think.isFunction(config.prerender)){\n      config.prerender(...args);\n    }\n  }\n  /**\n   * get template file content\n   * @return {} []\n   */\n  async getContent(file){\n    let stat = await think.promisify(fs.stat, fs)(file);\n    let mTime = stat.mtime.getTime();\n    let fileCache = thinkCache(thinkCache.VIEW_CONTENT, file);\n    if(fileCache && fileCache[0] >= mTime){\n      return fileCache[1];\n    }\n    return think.await(`template_${file}`, () => {\n      let fn = think.promisify(fs.readFile, fs);\n      return fn(file, 'utf8');\n    }).then(content => {\n      //if content is empty, not cached\n      if(!content){\n        return content;\n      }\n      thinkCache(thinkCache.VIEW_CONTENT, file, [mTime, content]);\n      return content;\n    });\n  }\n  /**\n   * run\n   * @param  {String} templateFile []\n   * @param  {Object} tVar         []\n   * @return {promise}             []\n   */\n  run(templateFile){\n    return this.getContent(templateFile);\n  }\n}\n"]}