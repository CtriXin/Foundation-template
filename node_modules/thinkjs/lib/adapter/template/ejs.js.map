{"version":3,"sources":["../../../src/adapter/template/ejs.js"],"names":["run","templateFile","tVar","config","options","parseConfig","filename","cache","think","npm","ejs","prerender","getContent","content","compile"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAEA;;;;;;;;;;;;AAKE;;;;;;mBAMMA,G;2FAAIC,Y,EAAcC,I,EAAMC,M;;;;;;AAExBC,qB,GAAU,KAAKC,WAAL,CAAiB;AAC7BC,0BAAUL,YADmB;AAE7BM,uBAAO;AAFsB,eAAjB,EAGXJ,MAHW,C;;qBAIEK,MAAMC,GAAN,CAAU,KAAV,C;;;AAAZC,iB;;;AAEJ,mBAAKC,SAAL,CAAeP,OAAf,EAAwBM,GAAxB;;;qBAEoB,KAAKE,UAAL,CAAgBX,YAAhB,C;;;AAAhBY,qB;+CACGH,IAAII,OAAJ,CAAYD,OAAZ,EAAqBT,OAArB,EAA8BF,IAA9B,C","file":"ejs.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * ejs template\n * @type {Class}\n */\nexport default class extends Base {\n  /**\n   * run\n   * @param  {String} templateFile []\n   * @param  {Object} tVar         []\n   * @return {Promise}             []\n   */\n  async run(templateFile, tVar, config){\n\n    let options = this.parseConfig({\n      filename: templateFile,\n      cache: true\n    }, config);\n    let ejs = await think.npm('ejs');\n\n    this.prerender(options, ejs);\n\n    let content = await this.getContent(templateFile);\n    return ejs.compile(content, options)(tVar);\n  }\n}\n"]}