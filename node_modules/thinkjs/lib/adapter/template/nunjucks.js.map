{"version":3,"sources":["../../../src/adapter/template/nunjucks.js"],"names":["run","templateFile","tVar","config","options","parseConfig","autoescape","watch","noCache","throwOnUndefined","think","npm","nunjucks","env","root_path","isAbsolute","indexOf","configure","addGlobal","JSON","eval","prerender","fn","promisify","render"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;AAKE;;;;;;mBAMMA,G;2FAAIC,Y,EAAcC,I,EAAMC,M;;;;;;AAExBC,qB,GAAU,KAAKC,WAAL,CAAiB;AAC7BC,4BAAY,IADiB;AAE7BC,uBAAO,KAFsB;AAG7BC,yBAAS,KAHoB;AAI7BC,kCAAkB;AAJW,eAAjB,EAKXN,MALW,C;;qBAOOO,MAAMC,GAAN,CAAU,UAAV,C;;;AAAjBC,sB;AAEAC,iB;;AACJ,kBAAGT,QAAQU,SAAX,EAAqB;AACnB;AACA,oBAAG,eAAKC,UAAL,CAAgBd,YAAhB,KAAiCA,aAAae,OAAb,CAAqBZ,QAAQU,SAA7B,MAA4C,CAAhF,EAAkF;AAChFD,wBAAMD,SAASK,SAAT,CAAmBb,OAAnB,CAAN;AACD,iBAFD,MAEK;AACHS,wBAAMD,SAASK,SAAT,CAAmBb,QAAQU,SAA3B,EAAsCV,OAAtC,CAAN;AACD;AACF,eAPD,MAOK;AACHS,sBAAMD,SAASK,SAAT,CAAmBb,OAAnB,CAAN;AACD;;AAEDS,kBAAIK,SAAJ,CAAc,OAAd,EAAuBR,KAAvB;AACAG,kBAAIK,SAAJ,CAAc,MAAd,EAAsBC,IAAtB;AACAN,kBAAIK,SAAJ,CAAc,MAAd,EAAsBE,IAAtB;;AAEA,mBAAKC,SAAL,CAAejB,OAAf,EAAwBQ,QAAxB,EAAkCC,GAAlC;;AAEIS,gB,GAAKZ,MAAMa,SAAN,CAAgBX,SAASY,MAAzB,C;+CACFF,GAAGrB,YAAH,EAAiBC,IAAjB,C","file":"nunjucks.js","sourcesContent":["'use strict';\n\nimport path from 'path';\nimport Base from './base.js';\n\n/**\n * nunjucks template\n * @type {Class}\n */\nexport default class extends Base {\n  /**\n   * run\n   * @param  {String} templateFile []\n   * @param  {Object} tVar         []\n   * @return {Promise}             []\n   */\n  async run(templateFile, tVar, config){\n\n    let options = this.parseConfig({\n      autoescape: true,\n      watch: false,\n      noCache: false,\n      throwOnUndefined: false\n    }, config);\n    \n    let nunjucks = await think.npm('nunjucks');\n\n    let env;\n    if(options.root_path){\n      //if templateFile not start with root_path, can not set root_path\n      if(path.isAbsolute(templateFile) && templateFile.indexOf(options.root_path) !== 0){\n        env = nunjucks.configure(options);\n      }else{\n        env = nunjucks.configure(options.root_path, options);\n      }\n    }else{\n      env = nunjucks.configure(options);\n    }\n\n    env.addGlobal('think', think);\n    env.addGlobal('JSON', JSON);\n    env.addGlobal('eval', eval);\n\n    this.prerender(options, nunjucks, env);\n\n    let fn = think.promisify(nunjucks.render);\n    return fn(templateFile, tVar);\n  }\n}"]}