{"version":3,"sources":["../../../src/adapter/db/mysql.js"],"names":["MysqlSocket","think","adapter","socket","sql","_socket","config","extend","getInstance","thinkCache","DB","getSchema","table","query","parseKey","data","ret","forEach","item","Field","Type","Null","Key","Extra","toLowerCase","key","trim","isEmpty","isNumberString","test"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAEA,IAAIA,cAAcC,MAAMC,OAAN,CAAc,QAAd,EAAwB,OAAxB,CAAlB;AACA;;;;;;;;;;;;;AAKE;;;;;mBAKAC,M,mBAAOC,G,EAAI;AACT,QAAG,KAAKC,OAAR,EAAgB;AACd,aAAO,KAAKA,OAAZ;AACD;AACD,QAAIC,SAASL,MAAMM,MAAN,CAAa;AACxBH,WAAKA;AADmB,KAAb,EAEV,KAAKE,MAFK,CAAb;AAGA,SAAKD,OAAL,GAAeL,YAAYQ,WAAZ,CAAwBF,MAAxB,EAAgCG,WAAWC,EAA3C,EAA+C,CAAC,KAAD,CAA/C,CAAf;AACA,WAAO,KAAKL,OAAZ;AACD,G;AACD;;;;;;;mBAKMM,S;2FAAUC,K;;;;;;;qBACG,KAAKC,KAAL,wBAAgC,KAAKC,QAAL,CAAcF,KAAd,CAAhC,C;;;AAAbG,kB;AACAC,iB,GAAM,E;;AACVD,mBAAKE,OAAL,CAAa,gBAAQ;AACnBD,oBAAIE,KAAKC,KAAT,IAAkB;AAChB,0BAAQD,KAAKC,KADG;AAEhB,0BAAQD,KAAKE,IAFG;AAGhB,8BAAYF,KAAKG,IAAL,KAAc,EAHV;AAIhB;AACA,6BAAWH,KAAKI,GAAL,KAAa,KALR;AAMhB,4BAAUJ,KAAKI,GAAL,KAAa,KANP;AAOhB,oCAAkBJ,KAAKK,KAAL,CAAWC,WAAX,OAA6B;AAP/B,iBAAlB;AASD,eAVD;+CAWOR,G;;;;;;;;;;;;;;;;AAET;;;;;;;mBAKAF,Q,uBAAkB;AAAA,QAATW,GAAS,uEAAH,EAAG;;AAChBA,UAAMA,IAAIC,IAAJ,EAAN;AACA,QAAGzB,MAAM0B,OAAN,CAAcF,GAAd,CAAH,EAAsB;AACpB,aAAO,EAAP;AACD;AACD,QAAGxB,MAAM2B,cAAN,CAAqBH,GAArB,CAAH,EAA6B;AAC3B,aAAOA,GAAP;AACD;AACD,QAAI,CAAE,oBAAoBI,IAApB,CAAyBJ,GAAzB,CAAN,EAAsC;AACpCA,YAAM,MAAMA,GAAN,GAAY,GAAlB;AACD;AACD,WAAOA,GAAP;AACD,G","file":"mysql.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\nlet MysqlSocket = think.adapter('socket', 'mysql');\n/**\n * mysql db\n * @type {Class}\n */\nexport default class extends Base {\n  /**\n   * get mysql socket instance\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  socket(sql){\n    if(this._socket){\n      return this._socket;\n    }\n    let config = think.extend({\n      sql: sql\n    }, this.config);\n    this._socket = MysqlSocket.getInstance(config, thinkCache.DB, ['sql']);\n    return this._socket;\n  }\n  /**\n   * get table schema\n   * @param  {String} table [table name]\n   * @return {Promise}       []\n   */\n  async getSchema(table){\n    let data = await this.query(`SHOW COLUMNS FROM ${this.parseKey(table)}`);\n    let ret = {};\n    data.forEach(item => {\n      ret[item.Field] = {\n        'name': item.Field,\n        'type': item.Type,\n        'required': item.Null === '',\n        //'default': item.Default,\n        'primary': item.Key === 'PRI',\n        'unique': item.Key === 'UNI',\n        'auto_increment': item.Extra.toLowerCase() === 'auto_increment'\n      };\n    });\n    return ret;\n  }\n  /**\n   * parse key\n   * @param  {String} key []\n   * @return {String}     []\n   */\n  parseKey(key = ''){\n    key = key.trim();\n    if(think.isEmpty(key)){\n      return '';\n    }\n    if(think.isNumberString(key)){\n      return key;\n    }\n    if (!(/[,\\'\\\"\\*\\(\\)`.\\s]/.test(key))) {\n      key = '`' + key + '`';\n    }\n    return key;\n  }\n}"]}