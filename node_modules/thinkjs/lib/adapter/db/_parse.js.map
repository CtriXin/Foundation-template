{"version":3,"sources":["../../../src/adapter/db/_parse.js"],"names":["init","config","comparison","selectSql","parseExplain","explain","parseSet","data","set","key","value","parseValue","think","isString","isNumber","push","parseKey","length","join","escapeString","isArray","test","map","item","isBoolean","parseField","fields","indexOf","split","isObject","parseTable","table","getLogic","logic","_default","list","_logic","toUpperCase","parseWhere","where","isEmpty","keySafeRegExp","multi","_multi","val","result","str","fn","i","v","parseWhereItem","parseThinkWhere","Error","locale","opr","nop","parsedValue","flag","isNumberString","every","whereStr","val0","likeLogic","like","isArr","exp","op","substr","parse","arr","name","parseLimit","limit","Math","max","parseJoin","options","joinStr","defaultJoin","joins","forEach","hasJoin","toLowerCase","ret","joinType","trim","tablePrefix","as","on","mTable","alias","jTable","parseOrder","order","parseGroup","group","parseHaving","having","parseComment","comment","parseDistinct","distinct","parseUnion","union","sql","all","buildSelectSql","parseLock","lock","parseSql","replace","a","type","ucfirst","slice","isFunction","b","prefix","base"],"mappings":"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","file":"_parse.js","sourcesContent":["'use strict';\n\nimport querystring from 'querystring';\n\n/**\n * sql parse class\n */\nexport default class extends think.base {\n  /**\n   * init\n   * @return {} []\n   */\n  init(config = {}){\n    this.config = config;\n    //operate\n    this.comparison = {\n      'EQ': '=',\n      'NEQ': '!=',\n      '<>': '!=',\n      'GT': '>',\n      'EGT': '>=',\n      'LT': '<',\n      'ELT': '<=',\n      'NOTLIKE': 'NOT LIKE',\n      'LIKE': 'LIKE',\n      'IN': 'IN',\n      'NOTIN': 'NOT IN'\n    };\n    this.selectSql = '%EXPLAIN%SELECT%DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%%LIMIT%%UNION%%COMMENT%';\n  }\n  /**\n   * parse explain\n   * @param  {Boolean} explain []\n   * @return {String}         []\n   */\n  parseExplain(explain) {\n    if(!explain){\n      return '';\n    }\n    return 'EXPLAIN ';\n  }\n  /**\n   * parse set\n   * @param  {Object} data []\n   * @return {String}      []\n   */\n  parseSet(data = {}){\n    let set = [];\n    for(let key in data){\n      let value = this.parseValue(data[key]);\n      if (think.isString(value) || think.isNumber(value)) {\n        set.push(this.parseKey(key) + '=' + value);\n      }\n    }\n    if(set.length){\n      return ' SET ' + set.join(',');\n    }\n    return '';\n  }\n  /**\n   * parse key\n   * @param  {String} key []\n   * @return {String}     []\n   */\n  parseKey(key){\n    return key;\n  }\n  /**\n   * parse value\n   * @param  {Mixed} value []\n   * @return {Mixed}       []\n   */\n  parseValue(value){\n    if (think.isString(value)) {\n      value = '\\'' + this.escapeString(value) + '\\'';\n    }else if(think.isArray(value)){\n      if (/^exp$/.test(value[0])) {\n        value = value[1];\n      }else{\n        value = value.map(item => this.parseValue(item));\n      }\n    }else if(think.isBoolean(value)){\n      value = value ? '1' : '0';\n    }else if (value === null) {\n      value = 'null';\n    }\n    return value;\n  }\n  /**\n   * parse field\n   * parseField('name');\n   * parseField('name,email');\n   * parseField({\n   *     xx_name: 'name',\n   *     xx_email: 'email'\n   * })\n   * @return {String} []\n   */\n  parseField(fields){\n    if (think.isString(fields)) {\n      //fields('id, instr('30,35,31,',id+',') as d')\n      if(fields.indexOf('(') > -1 && fields.indexOf(')') > -1){\n        return fields;\n      }\n      if(fields.indexOf(',') > -1){\n        fields = fields.split(/\\s*,\\s*/);\n      }\n    }\n    if (think.isArray(fields)) {\n      return fields.map(item => this.parseKey(item)).join(',');\n    }else if(think.isObject(fields)){\n      let data = [];\n      for(let key in fields){\n        data.push(this.parseKey(key) + ' AS ' + this.parseKey(fields[key]));\n      }\n      return data.join(',');\n    }else if(think.isString(fields) && fields){\n      return this.parseKey(fields);\n    }\n    return '*';\n  }\n  /**\n   * parse table\n   * @param  {Mixed} tables []\n   * @return {}        []\n   */\n  parseTable(table){\n    if (think.isString(table)) {\n      table = table.split(/\\s*,\\s*/);\n    }\n    if (think.isArray(table)) {\n      return table.map(item => this.parseKey(item)).join(',');\n    }else if (think.isObject(table)) {\n      let data = [];\n      for(let key in table){\n        data.push(this.parseKey(key) + ' AS ' + this.parseKey(table[key]));\n      }\n      return data.join(',');\n    }\n    return '';\n  }\n  /**\n   * get logic\n   * @param  {String} logic    []\n   * @param  {String} _default []\n   * @return {String}          []\n   */\n  getLogic(logic, _default = 'AND'){\n    let list = ['AND', 'OR', 'XOR'];\n    if(think.isObject(logic)){\n      let _logic = logic._logic;\n      delete logic._logic;\n      logic = _logic;\n    }\n    if(!logic || !think.isString(logic)){\n      return _default;\n    }\n    logic = logic.toUpperCase();\n    if(list.indexOf(logic) > -1){\n      return logic;\n    }\n    return _default;\n  }\n  /**\n   * parse where\n   * @param  {Mixed} where []\n   * @return {String}       []\n   */\n  parseWhere(where){\n    if(think.isEmpty(where)){\n      return '';\n    }else if (think.isString(where)) {\n      return ` WHERE ${where}`;\n    }\n    let logic = this.getLogic(where);\n    //safe key regexp\n    let keySafeRegExp = /^[\\w\\|\\&\\-\\.\\(\\)\\,]+$/;\n    let multi = where._multi;\n    delete where._multi;\n\n    let key, val, result = [], str = '';\n\n    let fn = (item, i) => {\n      let v = multi ? val[i] : val;\n      return '(' + this.parseWhereItem(this.parseKey(item), v) + ')';\n    };\n    \n    for(key in where){\n      val = where[key];\n      str = '( ';\n      //_string: ''\n      if (['_string', '_complex', '_query'].indexOf(key) > -1) {\n        str += this.parseThinkWhere(key, val);\n      }\n      else if (!keySafeRegExp.test(key)) {\n        throw new Error(think.locale('INVALID_WHERE_CONDITION_KEY'));\n      }\n      //title|content\n      else if (key.indexOf('|') > -1) {\n        str += key.split('|').map(fn).join(' OR ');\n      }\n      //title&content\n      else if (key.indexOf('&') > -1) {\n        str += key.split('&').map(fn).join(' AND ');\n      }else{\n        str += this.parseWhereItem(this.parseKey(key), val);\n      }\n      str += ' )';\n      result.push(str);\n    }\n    result = result.join(` ${logic} `);\n    return result ? (` WHERE ` + result) : '';\n  }\n /**\n  * parse where item\n  * @param  {String} key []\n  * @param  {Mixed} val []\n  * @return {String}     []\n  */\n  parseWhereItem(key, val){\n    // {id: null}\n    if(val === null){\n      return `${key} IS NULL`;\n    }\n    // {id: {'<': 10, '>': 1}}\n    else if (think.isObject(val)) { \n      let logic = this.getLogic(val);\n      let result = [];\n      for(let opr in val){\n        let nop = opr.toUpperCase();\n        nop = this.comparison[nop] || nop;\n        let parsedValue = this.parseValue(val[opr]);\n        //{id: {IN: [1, 2, 3]}}\n        if(think.isArray(parsedValue)){\n          result.push(`${key} ${nop} (${parsedValue.join(', ')})`);\n        }\n        else if(parsedValue === 'null'){\n          result.push(key + ' ' + (nop === '!=' ? 'IS NOT NULL' : 'IS NULL'));\n        }\n        else{\n          result.push(key + ' ' + nop + ' ' + parsedValue);\n        }\n      }\n      return result.join(' ' + logic + ' ');\n    }\n    // where({id: [1, 2, 3]})\n    else if(think.isArray(val)){\n      let flag = think.isNumber(val[0]) || think.isNumberString(val[0]);\n      if(flag){\n        flag = val.every(item => {\n          return think.isNumber(item) || think.isNumberString(item);\n        });\n        if(flag){\n          return `${key} IN ( ${val.join(', ')} )`;\n        }\n      }\n    }\n    else {\n      return key + ' = ' + this.parseValue(val);\n    }\n\n    let whereStr = '';\n    let data;\n    if (think.isString(val[0])) {\n      let val0 = val[0].toUpperCase();\n      val0 = this.comparison[val0] || val0;\n      // compare\n      if (/^(=|!=|>|>=|<|<=)$/.test(val0)) {\n        if(val[1] === null){\n          whereStr += key + ' ' + (val[0] === '!=' ? 'IS NOT NULL' : 'IS NULL');\n        }else{\n          whereStr += key + ' ' + val0 + ' ' + this.parseValue(val[1]);\n        }\n      }\n      // like or not like\n      else if (/^(NOT\\s+LIKE|LIKE)$/.test(val0)) { \n        if (think.isArray(val[1])) {\n          //get like logic, default is OR\n          let likeLogic = this.getLogic(val[2], 'OR');\n          let like = val[1].map(item => key + ' ' + val0 + ' ' + this.parseValue(item)).join(' ' + likeLogic + ' ');\n          whereStr += '(' + like + ')';\n        }else{\n          whereStr += key + ' ' + val0 + ' ' + this.parseValue(val[1]);\n        }\n      }\n      // exp\n      else if(val0 === 'EXP'){ \n        whereStr += '(' + key + ' ' + val[1] + ')';\n      }\n      // in or not in\n      else if(val0 === 'IN' || val0 === 'NOT IN'){\n        if (val[2] === 'exp') {\n          whereStr += key + ' ' + val0 + ' ' + val[1];\n        }else{\n          if (think.isString(val[1])) {\n            val[1] = val[1].split(',');\n          }\n          if (!think.isArray(val[1])) {\n            val[1] = [val[1]];\n          }\n          val[1] = this.parseValue(val[1]);\n          if (val[1].length === 1) {\n            whereStr += key + (val0 === 'IN' ? ' = ' : ' != ') + val[1];\n          }else{\n            whereStr += key + ' ' + val0 + ' (' + val[1].join(',') + ')';\n          }\n        }\n      }\n      //between\n      else if(val0 === 'BETWEEN'){\n        data = think.isString(val[1]) ? val[1].split(',') : val[1];\n        if (!think.isArray(data)) {\n          data = [val[1], val[2]];\n        }\n        whereStr += ' (' + key + ' ' + val0 + ' ' + this.parseValue(data[0]);\n        whereStr += ' AND ' + this.parseValue(data[1]) + ')';\n      }else{\n        throw new Error(think.locale('WHERE_CONDITION_INVALID', key, JSON.stringify(val)));\n      }\n    }else{\n\n      let length = val.length;\n      let logic = this.getLogic(val[length - 1], '');\n      if(logic){\n        length--;\n      }else{\n        logic = 'AND';\n      }\n      let result = [];\n      for(let i = 0; i < length; i++){\n        let isArr = think.isArray(val[i]);\n        data = isArr ? val[i][1] : val[i];\n        let exp = ((isArr ? val[i][0] : '') + '').toUpperCase();\n        if (exp === 'EXP') {\n          result.push(`(${key} ${data})`);\n        }else{\n          let op = isArr ? (this.comparison[val[i][0].toUpperCase()] || val[i][0]) : '=';\n          result.push(`(${key} ${op} ${this.parseValue(data)})`);\n        }\n      }\n      whereStr = result.join(` ${logic} `);\n    }\n    return whereStr;\n  }\n  /**\n   * parse special condition\n   * @param  {String} key []\n   * @param  {Mixed} val []\n   * @return {String}     []\n   */\n  parseThinkWhere(key, val){\n    switch(key){\n      case '_string':\n        return val;\n      case '_complex':\n        return this.parseWhere(val).substr(6);\n      case '_query':\n        let where = think.isString(val) ? querystring.parse(val) : val;\n        let logic = this.getLogic(where);\n        let arr = [];\n        for(let name in where){\n          val = this.parseKey(name) + ' = ' + this.parseValue(where[name]);\n          arr.push(val);\n        }\n        return arr.join(` ${logic} `);\n    }\n    return '';\n  }\n  /**\n   * parse limit\n   * @param  {String} limit []\n   * @return {}       []\n   */\n  parseLimit(limit){\n    if (think.isEmpty(limit)) {\n      return '';\n    }\n    if(think.isNumber(limit)){\n      limit = Math.max(limit, 0);\n      return ` LIMIT ${limit}`;\n    }\n    if(think.isString(limit)){\n      limit = limit.split(/\\s*,\\s*/);\n    }\n    let data = [Math.max(limit[0] | 0, 0)];\n    if(limit[1]){\n      data.push(Math.max(limit[1] | 0, 0));\n    }\n    return ' LIMIT ' + data.join(',');\n  }\n  /**\n   * parse join\n   * @param  {String} join []\n   * @return {String}      []\n   */\n  parseJoin(join, options = {}){\n    if (think.isEmpty(join)) {\n      return '';\n    }\n    let joinStr = '';\n    let defaultJoin = ' LEFT JOIN ';\n    if (think.isArray(join)) {\n      let joins = {\n        'left': ' LEFT JOIN ',\n        'right': ' RIGHT JOIN ',\n        'inner': ' INNER JOIN '\n      };\n      join.forEach(val => {\n        if (think.isString(val)) {\n          let hasJoin = val.toLowerCase().indexOf(' join ') > -1;\n          joinStr += (hasJoin ? ' ' : defaultJoin) + val;\n        }else if (think.isObject(val)) {\n          let ret = [];\n          if (!('on' in val)) {\n            for(let key in val){\n              let v = val[key];\n              if(think.isObject(v)){\n                v.table = key;\n                ret.push(v);\n              }else{\n                ret.push(val);\n                break;\n              }\n            }\n          }else{\n            ret.push(val);\n          }\n          ret.forEach(item => {\n            let joinType = joins[item.join] || item.join || defaultJoin;\n            let table = item.table.trim();\n            //table is sql\n            if( table.indexOf(' ') > -1 ) {\n              if( table.indexOf('(') !== 0 ) {\n                table = '(' + table + ')';\n              }\n              joinStr += joinType + table;\n            } else {\n              table = options.tablePrefix + table;\n              if(table.indexOf('.') === -1){\n                joinStr += joinType + '`' + table + '`';\n              }else{\n                joinStr += joinType + table;\n              }\n            }\n            if (item.as) {\n              joinStr += ' AS `' + item.as + '`';\n            }\n            if (item.on) {\n              let mTable = options.alias || options.table;\n              if(mTable.indexOf('.') === -1){\n                mTable = '`' + mTable + '`';\n              }\n              let jTable = item.as || table;\n              if(jTable.indexOf('.') === -1){\n                jTable = '`' + jTable + '`';\n              }\n              if (think.isObject(item.on)) {\n                let where = [];\n                for(let key in item.on){\n                  where.push([\n                    key.indexOf('.') > -1 ? key : (mTable + '.`' + key + '`'),\n                    '=',\n                    item.on[key].indexOf('.') > -1 ? item.on[key] : (jTable + '.`' + item.on[key] + '`')\n                  ].join(''));\n                }\n                joinStr += ' ON (' + where.join(' AND ') + ')';\n              }else{\n                if (think.isString(item.on)) {\n                  item.on = item.on.split(/\\s*,\\s*/);\n                }\n                joinStr += ' ON ' + (item.on[0].indexOf('.') > -1 ? item.on[0] : (mTable + '.`' + item.on[0] + '`'));\n                joinStr += ' = ' + (item.on[1].indexOf('.') > -1 ? item.on[1] : (jTable + '.`' + item.on[1] + '`'));\n              }\n            }\n          });\n        }\n      });\n    }else{\n      joinStr += defaultJoin + join;\n    }\n    return joinStr;\n  }\n  /**\n   * parse order\n   * @param  {String} order []\n   * @return {String}       []\n   */\n  parseOrder(order){\n    if(think.isEmpty(order)){\n      return '';\n    }\n    if (think.isArray(order)) {\n      order = order.map(item => this.parseKey(item)).join(',');\n    }else if (think.isObject(order)) {\n      let arr = [];\n      for(let key in order){\n        let val = order[key];\n        val = this.parseKey(key) + ' ' + val;\n        arr.push(val);\n      }\n      order = arr.join(',');\n    }\n    return ` ORDER BY ${order}`;\n  }\n  /**\n   * parse group\n   * @param  {String} group []\n   * @return {String}       []\n   */\n  parseGroup(group){\n    if (think.isEmpty(group)) {\n      return '';\n    }\n    if (think.isString(group)) {\n      //group may be `date_format(create_time,'%Y-%m-%d')`\n      if(group.indexOf('(') !== -1){\n        return ' GROUP BY ' + group;\n      }\n      group = group.split(/\\s*,\\s*/);\n    }\n    let result = group.map(item => {\n      if (item.indexOf('.') === -1) {\n        return '`' + item + '`';\n      }else{\n        item = item.split('.');\n        return item[0] + '.`' + item[1] + '`'; \n      }\n    });\n    return ' GROUP BY ' + result.join(',');\n  }\n  /**\n   * parse having\n   * @param  {String} having []\n   * @return {}        []\n   */\n  parseHaving(having){\n    return having ? ` HAVING ${having}` : '';\n  }\n  /**\n   * parse comment\n   * @param  {String} comment []\n   * @return {String}         []\n   */\n  parseComment(comment){\n    return comment ? (` /*${comment}*/`) : '';   \n  }\n  /**\n   * parse distinct\n   * @param  {} distinct []\n   * @return {}          []\n   */\n  parseDistinct(distinct){\n    return distinct ? ' DISTINCT' : '';\n  }\n  /**\n   * parse union\n   * @param  {String} union []\n   * @return {}       []\n   */\n  parseUnion(union){\n    if (think.isEmpty(union)) {\n      return '';\n    }\n    if (think.isArray(union)) {\n      let sql = ' ';\n      union.forEach(item => {\n        sql += item.all ? 'UNION ALL ' : 'UNION ';\n        sql += '(' + (think.isObject(item.union) ? this.buildSelectSql(item.union) : item.union) + ')';\n      });\n      return sql;\n    }else{\n      return ' UNION (' + (think.isObject(union) ? this.buildSelectSql(union) : union) + ')'; \n    }\n  }\n  /**\n   * parse lock\n   * @param  {Boolean} lock []\n   * @return {}      []\n   */\n  parseLock(lock){\n    if (!lock) {\n      return '';\n    }\n    return ' FOR UPDATE ';\n  }\n  /**\n   * parse sql\n   * @param  {String} sql     []\n   * @param  {Object} options []\n   * @return {String}         []\n   */\n  parseSql(sql, options){\n    return sql.replace(/\\%([A-Z]+)\\%/g, (a, type) => {\n      type = type.toLowerCase();\n      let ucfirst = type[0].toUpperCase() + type.slice(1);\n      if(think.isFunction(this['parse' + ucfirst])){\n        return this['parse' + ucfirst](options[type] || '', options);\n      }\n      return a;\n    }).replace(/\\s__([A-Z_-]+)__\\s/g, (a, b) => {\n      return ' `' + this.config.prefix + b.toLowerCase() + '` ';\n    });\n  }\n  /**\n   * escape string, override in sub class\n   * @param  {String} str []\n   * @return {String}     []\n   */\n  escapeString(str){\n    return str;\n  }\n  /**\n   * get select sql\n   * @param  {Object} options []\n   * @return {String}         [sql string]\n   */\n  buildSelectSql(options){\n    return this.parseSql(this.selectSql, options) + this.parseLock(options.lock);\n  }\n}"]}