{"version":3,"sources":["../../../src/adapter/db/postgresql.js"],"names":["PostgreSocket","think","adapter","init","config","comparison","selectSql","socket","sql","_socket","extend","getInstance","thinkCache","DB","getSchema","table","columnSql","columnsPromise","query","indexSql","indexPromise","all","columns","indexs","schema","forEach","item","column_name","name","type","data_type","required","is_nullable","default","auto_increment","extra","reg","indexdef","match","others","indexOf","primary","index","length","startTrans","transTimes","execute","resolve","parseWhereItem","key","val","isObject","logic","getLogic","result","opr","nop","toUpperCase","parsedValue","parseValue","isArray","push","join","flag","isNumber","isNumberString","every","whereStr","data","isString","val0","test","likeLogic","like","map","split","Error","locale","i","isArr","exp","op","quoteKey","undefined","isEmpty","replace","parseKey","trim","isDistinct","k","j","tmp","parseGroup","group","regexp","matches","parseInt","parseLimit","limit","value","escapeString","isBoolean","await","then","bufferToString","rows","insertInto","prefix","slice","toLowerCase","isInsert","lastInsertId","id","rowCount"],"mappings":"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","file":"postgresql.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\nlet PostgreSocket = think.adapter('socket', 'postgresql');\n/**\n * postgre db\n */\nexport default class extends Base {\n  /**\n   * init\n   * @return {} []\n   */\n  init(config = {}){\n    this.config = config;\n    //operate\n    this.comparison = {\n      'EQ': '=',\n      'NEQ': '!=',\n      '<>': '!=',\n      'GT': '>',\n      'EGT': '>=',\n      'LT': '<',\n      'ELT': '<=',\n      'NOTLIKE': 'NOT LIKE',\n      'LIKE': 'LIKE',\n      'NOTILIKE': 'NOT ILIKE',\n      'ILIKE': 'ILIKE',\n      'IN': 'IN',\n      'NOTIN': 'NOT IN',\n      'BETWEEN': 'BETWEEN',\n      'NOTBETWEEN': 'NOT BETWEEN'\n    };\n    this.selectSql = '%EXPLAIN%SELECT%DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%%LIMIT%%UNION%%COMMENT%';\n  }\n  /**\n   * get postgre socket instance\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  socket(sql){\n    if(this._socket){\n      return this._socket;\n    }\n    let config = think.extend({\n      sql: sql\n    }, this.config);\n    this._socket = PostgreSocket.getInstance(config, thinkCache.DB, ['sql']);\n    return this._socket;\n  }\n  /**\n   * get table info\n   * @param  {String} table [table name]\n   * @return {Promise}       []\n   */\n  async getSchema(table){\n    let columnSql = `SELECT column_name,is_nullable,data_type FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name='${table}'`;\n    let columnsPromise = this.query(columnSql);\n    let indexSql = `SELECT indexname,indexdef FROM pg_indexes WHERE tablename='${table}'`;\n    let indexPromise = this.query(indexSql);\n    let [columns, indexs] = await Promise.all([columnsPromise, indexPromise]);\n    let schema = {};\n    columns.forEach(item => {\n      schema[item.column_name] = {\n        name: item.column_name,\n        type: item.data_type,\n        required: item.is_nullable === 'NO',\n        default: '',\n        auto_increment: false\n      };\n    });\n    let extra = {};\n    let reg = /\\((\\w+)(?:, (\\w+))*\\)/;\n    indexs.forEach(item => {\n      let [, name, ...others] = item.indexdef.match(reg);\n      extra[name] = {};\n      if(item.indexdef.indexOf(' pkey ') > -1){\n        extra[name].primary = true;\n      }\n      let index = item.indexdef.indexOf(' UNIQUE ') > -1 ? 'unique' : 'index';\n      extra[name][index] = others.length ? others : true;\n    });\n\n    return think.extend(schema, extra);\n  }\n  /**\n   * start transaction\n   * @return {Promise} []\n   */\n  startTrans(){\n    if (this.transTimes === 0) {\n      this.transTimes++;\n      return this.execute('BEGIN');\n    }\n    this.transTimes++;\n    return Promise.resolve();\n  }\n  /**\n  * parse where item\n  * @param  {String} key []\n  * @param  {Mixed} val []\n  * @return {String}     []\n  */\n  parseWhereItem(key, val){\n    // {id: null}\n    if(val === null){\n      return `${key} IS NULL`;\n    }\n    // {id: {'<': 10, '>': 1}}\n    else if (think.isObject(val)) { \n      let logic = this.getLogic(val);\n      let result = [];\n      for(let opr in val){\n        let nop = opr.toUpperCase();\n        nop = this.comparison[nop] || nop;\n        let parsedValue = this.parseValue(val[opr]);\n        //{id: {IN: [1, 2, 3]}}\n        if(think.isArray(parsedValue)){\n          result.push(`${key} ${nop} (${parsedValue.join(', ')})`);\n        }\n        else if(parsedValue === 'null'){\n          result.push(key + ' ' + (nop === '!=' ? 'IS NOT NULL' : 'IS NULL'));\n        }\n        else{\n          result.push(key + ' ' + nop + ' ' + parsedValue);\n        }\n      }\n      return result.join(' ' + logic + ' ');\n    }\n    // where({id: [1, 2, 3]})\n    else if(think.isArray(val)){\n      let flag = think.isNumber(val[0]) || think.isNumberString(val[0]);\n      if(flag){\n        flag = val.every(item => {\n          return think.isNumber(item) || think.isNumberString(item);\n        });\n        if(flag){\n          return `${key} IN ( ${val.join(', ')} )`;\n        }\n      }\n    }\n    else {\n      return key + ' = ' + this.parseValue(val);\n    }\n\n    let whereStr = '';\n    let data;\n    if (think.isString(val[0])) {\n      let val0 = val[0].toUpperCase();\n      val0 = this.comparison[val0] || val0;\n      // compare\n      if (/^(=|!=|>|>=|<|<=)$/.test(val0)) {\n        if(val[1] === null){\n          whereStr += key + ' ' + (val[0] === '!=' ? 'IS NOT NULL' : 'IS NULL');\n        }else{\n          whereStr += key + ' ' + val0 + ' ' + this.parseValue(val[1]);\n        }\n      }\n      // like or not like\n      else if (/^(NOT\\s+LIKE|LIKE|NOT\\s+ILIKE|ILIKE)$/.test(val0)) { \n        if (think.isArray(val[1])) {\n          //get like logic, default is OR\n          let likeLogic = this.getLogic(val[2], 'OR');\n          let like = val[1].map(item => key + ' ' + val0 + ' ' + this.parseValue(item)).join(' ' + likeLogic + ' ');\n          whereStr += '(' + like + ')';\n        }else{\n          whereStr += key + ' ' + val0 + ' ' + this.parseValue(val[1]);\n        }\n      }\n      // exp\n      else if(val0 === 'EXP'){ \n        whereStr += '(' + key + ' ' + val[1] + ')';\n      }\n      // in or not in\n      else if(val0 === 'IN' || val0 === 'NOT IN'){\n        if (val[2] === 'exp') {\n          whereStr += key + ' ' + val0 + ' ' + val[1];\n        }else{\n          if (think.isString(val[1])) {\n            val[1] = val[1].split(',');\n          }\n          if (!think.isArray(val[1])) {\n            val[1] = [val[1]];\n          }\n          val[1] = this.parseValue(val[1]);\n          if (val[1].length === 1) {\n            whereStr += key + (val0 === 'IN' ? ' = ' : ' != ') + val[1];\n          }else{\n            whereStr += key + ' ' + val0 + ' (' + val[1].join(',') + ')';\n          }\n        }\n      }\n      //between\n      else if(val0 === 'BETWEEN' || val0 === 'NOT BETWEEN'){\n        data = think.isString(val[1]) ? val[1].split(',') : val[1];\n        if (!think.isArray(data)) {\n          data = [val[1], val[2]];\n        }\n        whereStr += ' (' + key + ' ' + val0 + ' ' + this.parseValue(data[0]);\n        whereStr += ' AND ' + this.parseValue(data[1]) + ')';\n      }else{\n        throw new Error(think.locale('WHERE_CONDITION_INVALID', key, JSON.stringify(val)));\n      }\n    }else{\n\n      let length = val.length;\n      let logic = this.getLogic(val[length - 1], '');\n      if(logic){\n        length--;\n      }else{\n        logic = 'AND';\n      }\n      let result = [];\n      for(let i = 0; i < length; i++){\n        let isArr = think.isArray(val[i]);\n        data = isArr ? val[i][1] : val[i];\n        let exp = ((isArr ? val[i][0] : '') + '').toUpperCase();\n        if (exp === 'EXP') {\n          result.push(`(${key} ${data})`);\n        }else{\n          let op = isArr ? (this.comparison[val[i][0].toUpperCase()] || val[i][0]) : '=';\n          result.push(`(${key} ${op} ${this.parseValue(data)})`);\n        }\n      }\n      whereStr = result.join(` ${logic} `);\n    }\n    return whereStr;\n  }\n  quoteKey(key){\n    if (key === undefined || think.isEmpty(key)) {\n      return '';\n    }\n    if(think.isNumber(key) || think.isNumberString(key)){\n      return key;\n    }\n    if (/.*\\(.*\\)/.test(key)) {\n      return key;\n    }\n    if(/(.*[a-z0-9]+)(\\\")([a-z0-9]+.*)/i.test(key)) {\n      return key.replace(/(.*[a-z0-9]+)(\\\")([a-z0-9]+.*)/i, '\\\"$1\\\"\\\"$3\\\"');\n    } else {\n      return `\"${key}\"`;\n    }\n  }\n  /**\n   * parse key\n   * @param  {String} key []\n   * @return {String}     []\n   */\n  parseKey(key){\n    if (key === undefined) {\n      return '';\n    }\n    if(think.isNumber(key) || think.isNumberString(key)){\n      return key;\n    }\n    key = key.trim();\n    if(think.isEmpty(key)){\n      return '';\n    }\n    // EXAMPLE: 'user_age(birthday)' or 'user_age(birthday) AS age' \n    if (/.*\\(.*\\)/.test(key)) {\n      return key;\n    }\n    var isDistinct = false;\n    if(/DISTINCT (.*)/i.test(key)) {\n      isDistinct = true;\n      key = key.replace(/DISTINCT (.*)/i, '$1');\n    }\n    if(/.*\\..*/.test(key)) {\n      var k = key.split('.'), j = [];\n      k.forEach( i => {\n        var tmp = this.quoteKey(i.replace(/^[\\\"]+|[\\\"]+$/g, ''));\n        j.push(`${tmp}`);\n      } );\n      key = j.join('.');\n    } else {\n      key = this.quoteKey(key.replace(/^[\\\"]+|[\\\"]+$/g, ''));\n    }\n    return `${isDistinct ? 'DISTINCT ' : ''}${key}`;\n  }\n  /**\n   * parse group\n   * @param  {String} group []\n   * @return {String}       []\n   */\n  parseGroup(group){\n    if (think.isEmpty(group)) {\n      return '';\n    }\n    if (think.isString(group)) {\n      //group may be `date_format(create_time,'%Y-%m-%d')`\n      if (group.indexOf('(') !== -1) {\n        return ' GROUP BY ' + group;\n      }\n      group = group.split(/\\s*,\\s*/);\n    }\n    var result;\n\n    if (think.isArray(group)) {\n      result = group.map(function (item) {\n        item = item.replace(/[\\\"]/g, '');\n        var type = '',\n            regexp = /(.*) (ASC|DESC)/i,\n            matches = item.match(regexp);\n\n        if (matches !== null) {\n          type = ' ' + matches[2];\n          item = item.replace(regexp, '$1');\n        }\n\n        if (item.indexOf('.') === -1) {\n          return '\"' + item + '\"' + type;\n        } else {\n          item = item.split('.');\n          return '\"' + item[0] + '\".\"' + item[1] + '\"' + type;\n        }\n      });\n\n      return ' GROUP BY ' + result.join(', ');\n      /**\n       * Example: { 'name': 'DESC' } || { 'name': -1 }\n       */\n    } else if (think.isObject(group)) {\n      result = [];\n\n      for (let key in group) {\n        let type = group[key],\n            matches;\n\n        key = key.replace(/[\\\"]/g, '');\n\n        if (think.isString(type)) {\n          matches = type.match(/.*(ASC|DESC)/i);\n        }\n\n        if (matches) {\n          type = ' ' + matches[1];\n        } else if (think.isNumber(type) || think.isNumberString(type)) {\n          type = parseInt(type) === -1 ? ' DESC' : ' ASC';\n        }\n\n        if (key.indexOf('.') === -1) {\n          result.push('\"' + key + '\"' + type);\n        } else {\n          key = key.split('.');\n\n          result.push('\"' + key[0] + '\".\"' + key[1] + '\"' + type);\n        }\n      }\n\n      return ' GROUP BY ' + result.join(', ');\n    } else {\n      /** Unknown format: */\n    }\n  }\n  /**\n   * parse limit\n   * @param  {String} limit []\n   * @return {String}       []\n   */\n  parseLimit(limit){\n    if (think.isEmpty(limit)) {\n      return '';\n    }\n    if(think.isNumber(limit)){\n      return ` LIMIT ${limit}`;\n    }\n    if(think.isString(limit)){\n      limit = limit.split(/\\s*,\\s*/);\n    }\n    if(limit[1]){\n      return ' LIMIT ' + (limit[1] | 0) + ' OFFSET ' + (limit[0] | 0);\n    }\n    return ' LIMIT ' + (limit[0] | 0);\n  }\n  /**\n   * parse value\n   * @param  {Mixed} value []\n   * @return {Mixed}       []\n   */\n  parseValue(value){\n    if (think.isString(value)) {\n      value = 'E\\'' + this.escapeString(value) + '\\'';\n    }else if(think.isArray(value)){\n      if (/^exp$/.test(value[0])) {\n        value = value[1];\n      }else{\n        value = value.map(item => this.parseValue(item));\n      }\n    }else if(think.isBoolean(value)){\n      value = value ? 'true' : 'false';\n    }else if (value === null) {\n      value = 'null';\n    }\n    return value;\n  }\n  /**\n   * query string\n   * @param  string str\n   * @return promise\n   */\n  query(sql){\n    this.sql = sql;\n    return think.await(sql, () => {\n      return this.socket(sql).query(sql).then(data => {\n        return this.bufferToString(data.rows);\n      });\n    });\n  }\n  /**\n   * execute sql\n   * @param  {String} sql []\n   * @return {}     []\n   */\n  execute(sql){\n    this.sql = sql;\n    let insertInto = 'insert into ';\n    let prefix = sql.slice(0, insertInto.length).toLowerCase();\n    let isInsert = false;\n    if(prefix === insertInto){\n      sql += ' RETURNING id';\n      isInsert = true;\n    }\n    return this.socket(sql).execute(sql).then(data => {\n      if(isInsert){\n        this.lastInsertId = data.rows[0].id;\n      }\n      return data.rowCount || 0;\n    });\n  }\n}"]}