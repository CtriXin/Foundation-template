{"version":3,"sources":["../../../src/adapter/db/sqlite.js"],"names":["SqliteSocket","think","adapter","socket","sql","_socket","config","extend","getInstance","thinkCache","DB","getSchema","table","fieldPromise","query","indexPromise","then","indexes","promises","list","map","item","unique","name","data","forEach","all","ret","type","required","notnull","primary","pk","auto_increment","startTrans","transTimes","execute","resolve","escapeString","str","replace","parseLimit","limit","isEmpty","isNumber","isString","split"],"mappings":"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","file":"sqlite.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\nlet SqliteSocket = think.adapter('socket', 'sqlite');\n/**\n * sqlite db\n */\nexport default class extends Base {\n  /**\n   * get sqlite socket instance\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  socket(sql){\n    if(this._socket){\n      return this._socket;\n    }\n    let config = think.extend({\n      sql: sql\n    }, this.config);\n    this._socket = SqliteSocket.getInstance(config, thinkCache.DB, ['sql']);\n    return this._socket;\n  }\n  /**\n   * get table info\n   * @param  {String} table [table name]\n   * @return {Promise}       []\n   */\n  async getSchema(table){\n    let fieldPromise = this.query(`PRAGMA table_info( ${table} )`);\n    let indexPromise = this.query(`PRAGMA INDEX_LIST( ${table} )`).then(list => {\n      let indexes = {};\n      let promises = list.map(item => {\n        if(item.unique){\n          return this.query(`PRAGMA index_info( ${item.name} )`).then(data => {\n            data.forEach(item => {\n              indexes[item.name] = {unique: true};\n            });\n          });\n        }\n      });\n      return Promise.all(promises).then(() => {\n        return indexes;\n      });\n    });\n    let ret = {};\n    let [data, indexes] = await Promise.all([fieldPromise, indexPromise]);\n    data.forEach(item => {\n      ret[item.name] = {\n        name: item.name,\n        type: item.type,\n        required: !!item.notnull,\n        //default: item.dflt_value,\n        primary: !!item.pk,\n        auto_increment: false,\n        unique: !!(!item.pk && indexes[item.name] && indexes[item.name].unique)\n      };\n    });\n    return ret;\n  }\n  /**\n   * start transaction\n   * @return {Promise} []\n   */\n  startTrans(){\n    if (this.transTimes === 0) {\n      this.transTimes++;\n      return this.execute('BEGIN TRANSACTION');\n    }\n    this.transTimes++;\n    return Promise.resolve();\n  }\n  /**\n   * escape string\n   * @param  {String} str []\n   * @return {String}     []\n   */\n  escapeString(str){\n    return str.replace(/\\'/g, '\\'\\'');\n  }\n  /**\n   * parse limit\n   * @param  {Array} limit []\n   * @return {String}       []\n   */\n  parseLimit(limit){\n    if (think.isEmpty(limit)) {\n      return '';\n    }\n    if(think.isNumber(limit)){\n      return ` LIMIT ${limit}`;\n    }\n    if(think.isString(limit)){\n      limit = limit.split(/\\s*,\\s*/);\n    }\n    if(limit[1]){\n      return ' LIMIT ' + (limit[1] | 0) + ' OFFSET ' + (limit[0] | 0);\n    }\n    return ' LIMIT ' + (limit[0] | 0);\n  }\n}"]}