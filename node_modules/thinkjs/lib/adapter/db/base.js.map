{"version":3,"sources":["../../../src/adapter/db/base.js"],"names":["init","config","sql","lastInsertId","_socket","transTimes","socket","add","data","options","replace","values","fields","key","val","parseValue","think","isString","isBoolean","isNumber","push","parseKey","parseTable","table","join","parseLock","lock","parseComment","comment","execute","addMany","map","item","value","selectAdd","split","buildSelectSql","delete","parseWhere","where","parseOrder","order","parseLimit","limit","update","parseSet","select","cache","isObject","isEmpty","on","md5","query","escapeString","str","s","getLastSql","getLastInsertId","await","then","bufferToString","buffer_tostring","isArray","i","length","isBuffer","toString","insertId","affectedRows","startTrans","resolve","commit","rollback","close"],"mappings":"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","file":"base.js","sourcesContent":["'use strict';\n\nimport Parse from './_parse.js';\n\n/**\n * db base class\n * @type {Class}\n */\nexport default class extends Parse {\n  /**\n   * init\n   * @return {} []\n   */\n  init(config){\n    super.init(config);\n    this.sql = '';\n    this.lastInsertId = 0;\n    this._socket = null;\n    this.transTimes = 0; //transaction times\n  }\n  /**\n   * get socket instance, override by sub class\n   * @return {Object} [socket instance]\n   */\n  socket(){}\n  /**\n   * insert data\n   * @param  {Object} data    []\n   * @param  {Object} options []\n   * @param  {Boolean} replace []\n   * @return {Promise}         []\n   */\n  add(data, options, replace){\n    let values = [];\n    let fields = [];\n    for(let key in data){\n      let val = data[key];\n      val = this.parseValue(val);\n      if (think.isString(val) || think.isBoolean(val) || think.isNumber(val)) {\n        values.push(val);\n        fields.push(this.parseKey(key));\n      }\n    }\n    let sql = replace ? 'REPLACE' : 'INSERT';\n    sql += ' INTO ' + this.parseTable(options.table) + ' (' + fields.join(',') + ')';\n    sql += ' VALUES (' + values.join(',') + ')';\n    sql += this.parseLock(options.lock) + this.parseComment(options.comment);\n    return this.execute(sql);\n  }\n  /**\n   * insert multi data\n   * @param  {Array} data    [data list]\n   * @param  {Object} options []\n   * @param  {Boolean} replace []\n   * @return {Promise}         []\n   */\n  addMany(data, options, replace){\n    let fields = Object.keys(data[0]).map(item => this.parseKey(item)).join(',');\n    let values = data.map(item => {\n      let value = [];\n      for(let key in item){\n        let val = item[key];\n        val = this.parseValue(val);\n        if (think.isString(val) || think.isBoolean(val) || think.isNumber(val)) {\n          value.push(val);\n        }\n      }\n      return '(' + value.join(',') + ')';\n    }).join(',');\n    let sql = replace ? 'REPLACE' : 'INSERT';\n    sql += ' INTO ' + this.parseTable(options.table) + '(' + fields + ')';\n    sql += ' VALUES ' + values;\n    sql += this.parseLock(options.lock) + this.parseComment(options.comment);\n    return this.execute(sql);\n  }\n  /**\n   * select data\n   * @param  {String} fields  []\n   * @param  {String} table   []\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n  selectAdd(fields, table, options = {}){\n    if (think.isString(fields)) {\n      fields = fields.split(/\\s*,\\s*/);\n    }\n    fields = fields.map(item => this.parseKey(item));\n    let sql = 'INSERT INTO ' + this.parseTable(table) + ' (' + fields.join(',') + ') ';\n    sql += this.buildSelectSql(options);\n    return this.execute(sql);\n  }\n  /**\n   * delete data\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n  delete(options){\n    let sql = [\n      'DELETE FROM ',\n      this.parseTable(options.table),\n      this.parseWhere(options.where),\n      this.parseOrder(options.order),\n      this.parseLimit(options.limit),\n      this.parseLock(options.lock),\n      this.parseComment(options.comment)\n    ].join('');\n    return this.execute(sql);\n  }\n  /**\n   * update data\n   * @param  {Object} data    []\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n  update(data, options){\n    let sql = [\n      'UPDATE ',\n      this.parseTable(options.table),\n      this.parseSet(data),\n      this.parseWhere(options.where),\n      this.parseOrder(options.order),\n      this.parseLimit(options.limit),\n      this.parseLock(options.lock),\n      this.parseComment(options.comment)\n    ].join('');\n    return this.execute(sql);\n  }\n  /**\n   * select\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n  select(options, cache){\n    let sql;\n    if(think.isObject(options)){\n      sql = this.buildSelectSql(options);\n      cache = options.cache || cache;\n    }else{\n      sql = options;\n    }\n    if (!think.isEmpty(cache) && this.config.cache.on) {\n      let key = cache.key || think.md5(sql);\n      return think.cache(key, () => this.query(sql), cache);\n    }\n    return this.query(sql);\n  }\n  /**\n   * escape string\n   * @param  {String} str []\n   * @return {String}     []\n   */\n  escapeString(str){\n    if (!str) {\n      return '';\n    }\n    return str.replace(/[\\0\\n\\r\\b\\t\\\\\\'\\\"\\x1a]/g, s => {\n      switch(s) {\n        case '\\0': \n          return '\\\\0';\n        case '\\n': \n          return '\\\\n';\n        case '\\r': \n          return '\\\\r';\n        case '\\b': \n          return '\\\\b';\n        case '\\t': \n          return '\\\\t';\n        case '\\x1a': \n          return '\\\\Z';\n        default:   \n          return '\\\\' + s;\n      }\n    });\n  }\n  /**\n   * get last sql\n   * @return {String}       []\n   */\n  getLastSql(){\n    return this.sql;\n  }\n  /**\n   * get last insert id\n   * @return {String} []\n   */\n  getLastInsertId(){\n    return this.lastInsertId;\n  }\n  /**\n   * query string\n   * @param  string str\n   * @return promise\n   */\n  query(sql){\n    this.sql = sql;\n    return think.await(sql, () => {\n      return this.socket(sql).query(sql).then(data => {\n        return this.bufferToString(data);\n      });\n    });\n  }\n  /**\n   * buffer to string\n   * @param  {Array} data []\n   * @return {Array}      []\n   */\n  bufferToString(data){\n    if (!this.config.buffer_tostring || !think.isArray(data)) {\n      return data;\n    }\n    for(let i = 0, length = data.length; i < length; i++){\n      for(let key in data[i]){\n        if(think.isBuffer(data[i][key])){\n          data[i][key] = data[i][key].toString();\n        }\n      }\n    }\n    return data;\n  }\n  /**\n   * execute sql\n   * @param  {String} sql []\n   * @return {}     []\n   */\n  execute(sql){\n    this.sql = sql;\n    return this.socket(sql).execute(sql).then(data => {\n      if (data.insertId) {\n        this.lastInsertId = data.insertId;\n      }\n      return data.affectedRows || 0;\n    });\n  }\n  /**\n   * start transaction\n   * @return {Promise} []\n   */\n  startTrans(){\n    if (this.transTimes === 0) {\n      this.transTimes++;\n      return this.execute('START TRANSACTION');\n    }\n    this.transTimes++;\n    return Promise.resolve();\n  }\n  /**\n   * commit\n   * @return {Promise} []\n   */\n  commit(){\n    if (this.transTimes > 0) {\n      this.transTimes = 0;\n      return this.execute('COMMIT');\n    }\n    return Promise.resolve();\n  }\n  /**\n   * rollback\n   * @return {Promise} []\n   */\n  rollback(){\n    if (this.transTimes > 0) {\n      this.transTimes = 0;\n      return this.execute('ROLLBACK');\n    }\n    return Promise.resolve();\n  }\n  /**\n   * close connect\n   * @return {} []\n   */\n  close(){\n    if (this._socket) {\n      this._socket.close();\n      this._socket = null;\n    }\n  }\n}"]}