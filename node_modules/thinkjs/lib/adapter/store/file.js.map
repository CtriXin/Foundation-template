{"version":3,"sources":["../../../src/adapter/store/file.js"],"names":["init","config","think","extend","path","Error","isDir","mkdir","getFilePath","key","sep","get","times","filePath","isFile","resolve","promisify","readFile","encoding","then","content","set","dirname","fn","writeFile","chmod","delete","filepath","unlink","list","getFiles","adapter","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;;;AAEA;;;;;;;;;;;AAIE;;;;;mBAKAA,I,iBAAKC,M,EAAO;AACV,SAAKA,MAAL,GAAcC,MAAMC,MAAN,CAAa;AACzBC,YAAM;AADmB,KAAb,EAEXH,MAFW,CAAd;;AAIA,QAAG,CAAC,KAAKA,MAAL,CAAYG,IAAhB,EAAqB;AACnB,YAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,QAAG,CAACH,MAAMI,KAAN,CAAY,KAAKL,MAAL,CAAYG,IAAxB,CAAJ,EAAkC;AAChCF,YAAMK,KAAN,CAAY,KAAKN,MAAL,CAAYG,IAAxB;AACD;AACF,G;AACD;;;;;;;mBAKAI,W,wBAAYC,G,EAAI;AACd,WAAO,KAAKR,MAAL,CAAYG,IAAZ,GAAmB,eAAKM,GAAxB,GAA8BD,GAArC;AACD,G;AACD;;;;;;;mBAKAE,G,gBAAIF,G,EAAe;AAAA;;AAAA,QAAVG,KAAU,uEAAF,CAAE;;AACjB,QAAIC,WAAW,KAAKL,WAAL,CAAiBC,GAAjB,CAAf;AACA,QAAGG,UAAU,CAAV,IAAe,CAACV,MAAMY,MAAN,CAAaD,QAAb,CAAnB,EAA0C;AACxC,aAAO,kBAAQE,OAAR,EAAP;AACD;AACD;AACA,WAAOb,MAAMc,SAAN,CAAgB,aAAGC,QAAnB,gBAAiCJ,QAAjC,EAA2C,EAACK,UAAU,MAAX,EAA3C,EAA+DC,IAA/D,CAAoE,mBAAW;AACpF,UAAG,CAACC,OAAD,IAAYR,SAAS,CAAxB,EAA0B;AACxB,eAAO,OAAKD,GAAL,CAASF,GAAT,EAAcG,QAAQ,CAAtB,CAAP;AACD;AACD,aAAOQ,OAAP;AACD,KALM,CAAP;AAMD,G;AACD;;;;;;;mBAKMC,G;2FAAIZ,G,EAAKW,O;;;;;;AACTP,sB,GAAW,KAAKL,WAAL,CAAiBC,GAAjB,C;;AACfP,oBAAMK,KAAN,CAAY,eAAKe,OAAL,CAAaT,QAAb,CAAZ;AACIU,gB,GAAKrB,MAAMc,SAAN,CAAgB,aAAGQ,SAAnB,e;+CAEFD,GAAGV,QAAH,EAAaO,OAAb,EAAsBD,IAAtB,CAA2B,YAAM;AACtCjB,sBAAMuB,KAAN,CAAYZ,QAAZ;AACD,eAFM,C;;;;;;;;;;;;;;;;AAIT;;;;;;;mBAKAa,M,oBAAOjB,G,EAAI;AACT,QAAIkB,WAAW,KAAKnB,WAAL,CAAiBC,GAAjB,CAAf;AACA,QAAG,CAACP,MAAMY,MAAN,CAAaa,QAAb,CAAJ,EAA2B;AACzB,aAAO,kBAAQZ,OAAR,EAAP;AACD;AACD,WAAOb,MAAMc,SAAN,CAAgB,aAAGY,MAAnB,gBAA+BD,QAA/B,CAAP;AACD,G;AACD;;;;;;mBAIAE,I,mBAAM;AACJ,WAAO,kBAAQd,OAAR,CAAgBb,MAAM4B,QAAN,CAAe,KAAK7B,MAAL,CAAYG,IAA3B,CAAhB,CAAP;AACD,G;;;EA7E0BF,MAAM6B,OAAN,CAAcC,I","file":"file.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\n\n/**\n * file store class\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(config){\n    this.config = think.extend({\n      path: ''\n    }, config);\n\n    if(!this.config.path){\n      throw new Error('config.path must be set');\n    }\n\n    if(!think.isDir(this.config.path)){\n      think.mkdir(this.config.path);\n    }\n  }\n  /**\n   * get file path\n   * @param  {String} key []\n   * @return {String}     []\n   */\n  getFilePath(key){\n    return this.config.path + path.sep + key;\n  }\n  /**\n   * get data\n   * @param  {String} key []\n   * @return {Promise}    []\n   */\n  get(key, times = 1){\n    let filePath = this.getFilePath(key);\n    if(times === 1 && !think.isFile(filePath)){\n      return Promise.resolve();\n    }\n    // try 3 times when can not get file content\n    return think.promisify(fs.readFile, fs)(filePath, {encoding: 'utf8'}).then(content => {\n      if(!content && times <= 3){\n        return this.get(key, times + 1);\n      }\n      return content;\n    });\n  }\n  /**\n   * set file content\n   * @param {String} key     []\n   * @param {String} content []\n   */\n  async set(key, content){\n    let filePath = this.getFilePath(key);\n    think.mkdir(path.dirname(filePath));\n    let fn = think.promisify(fs.writeFile, fs);\n\n    return fn(filePath, content).then(() => {\n      think.chmod(filePath);\n    });\n  }\n  /**\n   * delete file\n   * @param  {String} key []\n   * @return {Promise}     []\n   */\n  delete(key){\n    let filepath = this.getFilePath(key);\n    if(!think.isFile(filepath)){\n      return Promise.resolve();\n    }\n    return think.promisify(fs.unlink, fs)(filepath);\n  }\n  /**\n   * get all files\n   * @return {Promise} []\n   */\n  list(){\n    return Promise.resolve(think.getFiles(this.config.path));\n  }\n}"]}