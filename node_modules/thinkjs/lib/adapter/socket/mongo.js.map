{"version":3,"sources":["../../../src/adapter/socket/mongo.js"],"names":["init","config","think","extend","host","port","getConnection","connection","npm","mongo","auth","user","password","options","stringify","hostStr","isArray","map","item","i","join","str","database","await","fn","promisify","MongoClient","connect","promise","then","logConnect","log_level","Logger","setLevel","on","close","catch","reject","err","Error","error"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;;;AAEA;;;;;;;;;;;AAIE;;;;;mBAKAA,I,iBAAKC,M,EAAO;AACV,oBAAMD,IAAN,YAAWC,MAAX;;AAEA,SAAKA,MAAL,GAAcC,MAAMC,MAAN,CAAa,EAAb,EAAiB;AAC7BC,YAAM;AADuB,KAAjB,EAEXH,MAFW,CAAd;AAGA,SAAKA,MAAL,CAAYI,IAAZ,GAAmB,KAAKJ,MAAL,CAAYI,IAAZ,IAAoB,KAAvC;AACD,G;AACD;;;;;;mBAIMC,a;;;;;;;;;mBACD,KAAKC,U;;;;;+CACC,KAAKA,U;;;;qBAEIL,MAAMM,GAAN,CAAU,SAAV,C;;;AAAdC,mB;AACAR,oB,GAAS,KAAKA,M;AACdS,kB,GAAO,E;;;AAEX,mBAAKD,KAAL,GAAaA,KAAb;AACA;AACA,kBAAG,KAAKR,MAAL,CAAYU,IAAf,EAAoB;AAClBD,uBAAUT,OAAOU,IAAjB,SAAyBV,OAAOW,QAAhC;AACD;AACD;AACA;AACIC,qB,GAAU,E;;AACd,kBAAGZ,OAAOY,OAAV,EAAkB;AAChBA,0BAAU,MAAM,sBAAYC,SAAZ,CAAsBb,OAAOY,OAA7B,CAAhB;AACD;;AAED;AACIE,qB,GAAU,E;;AACd,kBAAGb,MAAMc,OAAN,CAAcf,OAAOG,IAArB,CAAH,EAA8B;AAC5BW,0BAAUd,OAAOG,IAAP,CAAYa,GAAZ,CAAgB,UAACC,IAAD,EAAOC,CAAP,EAAa;AACrC,yBAAOD,OAAO,GAAP,IAAcjB,OAAOI,IAAP,CAAYc,CAAZ,KAAkBlB,OAAOI,IAAP,CAAY,CAAZ,CAAhC,CAAP;AACD,iBAFS,EAEPe,IAFO,CAEF,GAFE,CAAV;AAGD,eAJD,MAIK;AACHL,0BAAUd,OAAOG,IAAP,GAAc,GAAd,GAAoBH,OAAOI,IAArC;AACD;;AAEGgB,iB,kBAAmBX,I,GAAOK,O,SAAWd,OAAOqB,Q,GAAWT,O;+CAEpDX,MAAMqB,KAAN,CAAYF,GAAZ,EAAiB,YAAM;AAC5B,oBAAIG,KAAKtB,MAAMuB,SAAN,CAAgBhB,MAAMiB,WAAN,CAAkBC,OAAlC,EAA2ClB,MAAMiB,WAAjD,CAAT;AACA,oBAAIE,UAAUJ,GAAGH,GAAH,EAAQ,OAAKpB,MAAb,EAAqB4B,IAArB,CAA0B,sBAAc;AACpD,yBAAKC,UAAL,CAAgBT,GAAhB,EAAqB,SAArB;AACA;AACA,sBAAGpB,OAAO8B,SAAV,EAAoB;AAClBtB,0BAAMuB,MAAN,CAAaC,QAAb,CAAsBhC,OAAO8B,SAA7B;AACD;AACDxB,6BAAW2B,EAAX,CAAc,OAAd,EAAuB,YAAM;AAC3B,2BAAKC,KAAL;AACD,mBAFD;AAGA5B,6BAAW2B,EAAX,CAAc,OAAd,EAAuB,YAAM;AAC3B,2BAAK3B,UAAL,GAAkB,IAAlB;AACD,mBAFD;AAGA,yBAAKA,UAAL,GAAkBA,UAAlB;AACA,yBAAOA,UAAP;AACD,iBAda,EAcX6B,KAdW,CAcL,eAAO;AACd,yBAAKN,UAAL,CAAgBT,GAAhB,EAAqB,SAArB;AACA,yBAAO,kBAAQgB,MAAR,CAAeC,GAAf,CAAP;AACD,iBAjBa,CAAd;AAkBA,oBAAIA,MAAM,IAAIC,KAAJ,CAAUlB,GAAV,CAAV;AACA,uBAAOnB,MAAMsC,KAAN,CAAYZ,OAAZ,EAAqBU,GAArB,CAAP;AACD,eAtBM,C","file":"mongo.js","sourcesContent":["'use strict';\n\nimport querystring from 'querystring';\nimport Base from './base.js';\n\n/**\n * mongodb socket\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(config){\n    super.init(config);\n\n    this.config = think.extend({}, {\n      host: '127.0.0.1'\n    }, config);\n    this.config.port = this.config.port || 27017;\n  }\n  /**\n   * get connection\n   * @return {Promise} []\n   */\n  async getConnection(){\n    if(this.connection){\n      return this.connection;\n    }\n    let mongo = await think.npm('mongodb');\n    let config = this.config;\n    let auth = '';\n\n    this.mongo = mongo;\n    //connect with auth\n    if(this.config.user){\n      auth = `${config.user}:${config.password}@`;\n    }\n    // connection options\n    // http://mongodb.github.io/node-mongodb-native/2.0/tutorials/urls/\n    let options = '';\n    if(config.options){\n      options = '?' + querystring.stringify(config.options);\n    }\n\n    //many hosts\n    let hostStr = '';\n    if(think.isArray(config.host)){\n      hostStr = config.host.map((item, i) => {\n        return item + ':' + (config.port[i] || config.port[0]);\n      }).join(',');\n    }else{\n      hostStr = config.host + ':' + config.port;\n    }\n\n    let str = `mongodb://${auth}${hostStr}/${config.database}${options}`;\n\n    return think.await(str, () => {\n      let fn = think.promisify(mongo.MongoClient.connect, mongo.MongoClient);\n      let promise = fn(str, this.config).then(connection => {\n        this.logConnect(str, 'mongodb');\n        //set logger level\n        if(config.log_level){\n          mongo.Logger.setLevel(config.log_level);\n        }\n        connection.on('error', () => {\n          this.close();\n        });\n        connection.on('close', () => {\n          this.connection = null;\n        });\n        this.connection = connection;\n        return connection;\n      }).catch(err => {\n        this.logConnect(str, 'mongodb');\n        return Promise.reject(err);\n      });\n      let err = new Error(str);\n      return think.error(promise, err);\n    });\n  }\n}"]}