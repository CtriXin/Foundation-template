{"version":3,"sources":["../../../src/adapter/socket/mysql.js"],"names":["init","config","think","extend","host","user","password","port","charset","encoding","pool","getConnection","connection","resolve","str","database","fn","promisify","promise","catch","close","reject","err","Error","error","connectionLimit","logConnect","createPool","awaitKey","forceNewNum","await","deferred","defer","createConnection","connect","on","then","setNames","query","sql","nestTables","times","data","timeout","startTime","Date","now","rows","release","log_sql","log","code","autoClose","execute","end"],"mappings":"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","file":"mysql.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\nimport mysql from 'mysql';\n\n/**\n * mysql socket class\n * @return {} []\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} config [connection options]\n   * @return {}        []\n   */\n  init(config = {}){\n    super.init(config);\n    \n    //merge config\n    this.config = think.extend({\n      host: '127.0.0.1',\n      user: 'root',\n      password: ''\n    }, config);\n    this.config.port = this.config.port || 3306;\n\n    //rename encoding to charset\n    if(!this.config.charset && this.config.encoding){\n      this.config.charset = this.config.encoding;\n      delete this.config.encoding;\n    }\n\n    this.pool = null;\n  }\n  /**\n   * get connection\n   * @return {Promise} [conneciton handle]\n   */\n  getConnection(){\n    if (this.connection) {\n      return Promise.resolve(this.connection);\n    }\n\n    let config = this.config;\n    let str = `mysql://${config.user}:${config.password}@${config.host}:${config.port}/${config.database}`;\n\n    if (this.pool) {\n      let fn = think.promisify(this.pool.getConnection, this.pool);\n      let promise = fn().catch(err => {\n        this.close();\n        return Promise.reject(err);\n      });\n      let err = new Error(str);\n      return think.error(promise, err);\n    }\n\n    if (config.connectionLimit) {\n      this.logConnect(str, 'mysql');\n      \n      this.pool = mysql.createPool(config);\n      return this.getConnection();\n    }\n\n    let awaitKey = str;\n    if(this.config.forceNewNum){\n      awaitKey += '_' + this.config.forceNewNum;\n    }\n    return think.await(awaitKey, () => {\n      let deferred = think.defer();\n      this.connection = mysql.createConnection(config);\n      this.connection.connect(err => {\n        \n        this.logConnect(str, 'mysql');\n\n        if (err) {\n          deferred.reject(err);\n          this.close();\n        } else {\n          deferred.resolve(this.connection);\n        }\n      });\n      this.connection.on('error', () => {\n        this.close();\n      });\n      this.connection.on('close', () => {\n        this.close();\n      });\n      //PROTOCOL_CONNECTION_LOST\n      this.connection.on('end', () => {\n        this.connection = null;\n      });\n      let err = new Error(str);\n      return think.error(deferred.promise, err);\n    }).then(connection => {\n      if(config.setNames){\n        let fn = think.promisify(connection.query, connection);\n        return fn(`SET NAMES ${config.charset}`).then(() => connection);\n      }\n      return connection;\n    });\n  }\n  /**\n   * query sql\n   * @param  {String} sql []\n   * @return {[type]}     []\n   */\n  async query(sql, nestTables, times = 1){\n    let connection = await this.getConnection();\n    let data = {\n      sql: sql,\n      nestTables: nestTables\n    };\n    //query timeout\n    if (this.config.timeout) {\n      data.timeout = this.config.timeout;\n    }\n    let startTime = Date.now();\n    let fn = think.promisify(connection.query, connection);\n    let promise = fn(data).then((rows = []) => {\n      // just call connection.release() and the connection will return to the pool, \n      // ready to be used again by someone else.\n      // https://github.com/felixge/node-mysql#pooling-connections\n      if(this.pool && connection.release){\n        connection.release();\n      }\n\n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return rows;\n    }).catch(async err => {\n      if(this.pool && connection.release){\n        connection.release();\n      }\n      //Connection lost: The server closed the connection.\n      if(err.code === 'PROTOCOL_CONNECTION_LOST' || err.code === 'EPIPE'){\n        await this.close();\n        if(times <= 3){\n          return this.query(sql, nestTables, ++times);\n        }\n      }\n      \n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return Promise.reject(err);\n    });\n    promise = this.autoClose(promise);\n    return think.error(promise);\n  }\n  /**\n   * execute\n   * @param  {Array} args []\n   * @return {Promise}         []\n   */\n  execute(...args){\n    return this.query(...args);\n  }\n  /**\n   * close connections\n   * @return {} []\n   */\n  close(){\n    if (this.pool) {\n      let fn = think.promisify(this.pool.end, this.pool);\n      return fn().then(() => this.pool = null);\n    } else if (this.connection) {\n      let fn = think.promisify(this.connection.end, this.connection);\n      return fn().then(() => this.connection = null);\n    }\n  }\n}"]}