{"version":3,"sources":["../../../src/adapter/socket/base.js"],"names":["init","connection","queueNums","closeTimer","logConnect","str","type","config","log_connect","think","log","colors","magenta","autoClose","promise","close","setTimeout","clearTimeout","then","data","catch","reject","err","getInstance","extraKeys","parseConfig","forEach","item","key","md5","slice","instance","thinkCache","adapter","base"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIE;;;;mBAIAA,I,mBAAM;AACJ,SAAKC,UAAL,GAAkB,IAAlB;AACA;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACD,G;AACD;;;;;;mBAIAC,U,uBAAWC,G,EAAKC,I,EAAK;AACnB;AACA,QAAG,KAAKC,MAAL,CAAYC,WAAf,EAA2B;AACzBC,YAAMC,GAAN,CAAU,kBAAU;AAClB,eAAO,aAAWJ,IAAX,cAA0BK,OAAOC,OAAP,CAAeP,GAAf,CAAjC;AACD,OAFD,EAEG,QAFH;AAGD;AACF,G;AACD;;;;;;mBAIAQ,S,sBAAUC,O,EAAQ;AAAA;;AAChB,QAAG,CAACL,MAAMF,MAAN,CAAa,mBAAb,CAAJ,EAAsC;AACpC,aAAOO,OAAP;AACD;;AAED,QAAIC,QAAQ,SAARA,KAAQ,GAAM;AAChB,aAAKb,SAAL;AACA,UAAG,OAAKA,SAAL,KAAmB,CAAtB,EAAwB;AACtB,eAAKC,UAAL,GAAkBa,WAAW,YAAM;AACjC,iBAAKD,KAAL;AACD,SAFiB,EAEf,IAFe,CAAlB;AAGD;AACF,KAPD;;AASAE,iBAAa,KAAKd,UAAlB;;AAEA,SAAKD,SAAL;AACA,WAAOY,QAAQI,IAAR,CAAa,gBAAQ;AAC1BH;AACA,aAAOI,IAAP;AACD,KAHM,EAGJC,KAHI,CAGE,eAAO;AACdL;AACA,aAAO,kBAAQM,MAAR,CAAeC,GAAf,CAAP;AACD,KANM,CAAP;AAOD,G;AACD;;;;;;mBAIAP,K,oBAAO;AACL,QAAG,KAAKd,UAAR,EAAmB;AACjB,WAAKA,UAAL,CAAgBc,KAAhB;AACA,WAAKd,UAAL,GAAkB,IAAlB;AACD;AACF,G;;AAED;;;;;;;SAKOsB,W,wBAAYhB,M,EAAQD,I,EAAqB;AAAA,QAAfkB,SAAe,uEAAH,EAAG;;AAC9CjB,aAASE,MAAMgB,WAAN,CAAkBlB,MAAlB,CAAT;;AAEA;AACAiB,cAAUE,OAAV,CAAkB;AAAA,aAAQ,OAAOnB,OAAOoB,IAAP,CAAf;AAAA,KAAlB;AACA,QAAIC,MAAMnB,MAAMoB,GAAN,CAAU,yBAAetB,MAAf,CAAV,EAAkCuB,KAAlC,CAAwC,CAAxC,EAA2C,CAA3C,CAAV;;AAEA,QAAIC,WAAWC,WAAW1B,IAAX,EAAiBsB,GAAjB,CAAf;AACA,QAAG,CAACG,QAAJ,EAAa;AACXA,iBAAW,IAAI,IAAJ,CAASxB,MAAT,CAAX;AACAyB,iBAAW1B,IAAX,EAAiBsB,GAAjB,EAAsBG,QAAtB;AACD;AACD,WAAOA,QAAP;AACD,G;;;EAlF0BtB,MAAMwB,OAAN,CAAcC,I","file":"base.js","sourcesContent":["'use strict';\n\n/**\n * socket base class\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @return {} []\n   */\n  init(){\n    this.connection = null;\n    //query queue nums\n    this.queueNums = 0;\n    //auto close socket timer\n    this.closeTimer = 0;\n  }\n  /**\n   * log connection\n   * @return {} []\n   */\n  logConnect(str, type){\n    //log mongodb connection infomation\n    if(this.config.log_connect){\n      think.log(colors => {\n        return `Connect ${type} with ` + colors.magenta(str);\n      }, 'SOCKET');\n    }\n  }\n  /**\n   * auto close socket on cli mode\n   * @return {Promise} []\n   */\n  autoClose(promise){\n    if(!think.config('auto_close_socket')){\n      return promise;\n    }\n\n    let close = () => {\n      this.queueNums--;\n      if(this.queueNums === 0){\n        this.closeTimer = setTimeout(() => {\n          this.close();\n        }, 3000);\n      }\n    };\n\n    clearTimeout(this.closeTimer);\n\n    this.queueNums++;\n    return promise.then(data => {\n      close();\n      return data;\n    }).catch(err => {\n      close();\n      return Promise.reject(err);\n    });\n  }\n  /**\n   * close socket connection\n   * @return {} []\n   */\n  close(){\n    if(this.connection){\n      this.connection.close();\n      this.connection = null;\n    }\n  }\n\n  /**\n   * get instance\n   * @param  {Object} config []\n   * @return {Object}        []\n   */\n  static getInstance(config, type, extraKeys = []){\n    config = think.parseConfig(config);\n\n    //delete extra keys when caculate config md5 value\n    extraKeys.forEach(item => delete config[item]);\n    let key = think.md5(JSON.stringify(config)).slice(0, 5);\n\n    let instance = thinkCache(type, key);\n    if(!instance){\n      instance = new this(config);\n      thinkCache(type, key, instance);\n    }\n    return instance;\n  }\n}"]}