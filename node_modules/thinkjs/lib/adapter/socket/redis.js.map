{"version":3,"sources":["../../../src/adapter/socket/redis.js"],"names":["init","config","think","extend","port","host","password","getConnection","connection","npm","redis","str","await","deferred","defer","createClient","auth","on","logConnect","resolve","close","reject","err","Error","error","promise","event","callback","then","wrap","name","data","fn","promisify","get","set","value","timeout","setP","push","expire","all","delete","end"],"mappings":"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","file":"redis.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * Redis socket class\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(config = {}){\n    super.init(config);\n\n    this.config = think.extend({\n      port: 6379,\n      host: '127.0.0.1',\n      password: ''\n    }, config);\n  }\n  /**\n   * connect redis\n   * @return {Promise} []\n   */\n  async getConnection(){\n    if (this.connection) {\n      return this.connection;\n    }\n    let redis = await think.npm('redis');\n    let config = this.config;\n    let str = `redis://${config.host}:${config.port}`;\n    return think.await(str, () => {\n\n      let deferred = think.defer();\n      let connection = redis.createClient(config.port, config.host, config);\n      if (config.password) {\n        connection.auth(config.password, () => {});\n      }\n      connection.on('connect', () => {\n        this.connection = connection;\n        this.logConnect(str, 'redis');\n        deferred.resolve(connection);\n      });\n      connection.on('error', err => {\n        this.close();\n        this.logConnect(str, 'redis');\n        deferred.reject(err);\n      });\n      let err = new Error(str);\n      return think.error(deferred.promise, err);\n    });\n  }\n  /**\n   * add event\n   * @param  {String}   event    []\n   * @param  {Function} callback []\n   * @return {}            []\n   */\n  on(event, callback){\n    return this.getConnection().then(connection => {\n      connection.on(event, callback);\n    });\n  }\n  /**\n   * wrap\n   * @param  {String}    name []\n   * @param  {Array} data []\n   * @return {Promise}         []\n   */\n  async wrap(name, ...data){\n    await this.getConnection();\n    let fn = think.promisify(this.connection[name], this.connection);\n    return think.error(fn(...data));\n  }\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    return this.wrap('get', name);\n  }\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {String} value   []\n   * @param {Number} timeout []\n   */\n  set(name, value, timeout = this.config.timeout){\n    let setP = [this.wrap('set', name, value)];\n    if (timeout) {\n      setP.push(this.expire(name, timeout));\n    }\n    return Promise.all(setP);\n  }\n  /**\n   * set data expire\n   * @param  {String} name    []\n   * @param  {Number} timeout []\n   * @return {Promise}         []\n   */\n  expire(name, timeout){\n    return this.wrap('expire', name, timeout);\n  }\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    return this.wrap('del', name);\n  }\n  /**\n   * close socket connection\n   * @return {} []\n   */\n  close(){\n    if(this.connection){\n      this.connection.end();\n      this.connection = null;\n    }\n  }\n}"]}