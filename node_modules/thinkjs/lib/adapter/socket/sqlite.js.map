{"version":3,"sources":["../../../src/adapter/socket/sqlite.js"],"names":["init","config","path","think","RUNTIME_PATH","sep","mkdir","database","getConnection","connection","npm","sqlite","verbose","await","deferred","defer","db","Database","logConnect","err","reject","resolve","timeout","configure","Error","error","promise","execute","sql","startTime","Date","now","logSql","log_sql","run","log","insertId","lastID","affectedRows","changes","query","fn","promisify","all","then","data","catch"],"mappings":"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","file":"sqlite.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\nimport path from 'path';\n\n/**\n * sqlite socket\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(config = {}){\n    super.init(config);\n\n    if(config.path === true){\n      config.path = ':memory:';\n    }else{\n      config.path = config.path || think.RUNTIME_PATH + path.sep + 'sqlite';\n      think.mkdir(config.path);\n      config.path += `${path.sep}${config.database}.sqlite`;\n    }\n    this.config = config;\n  }\n  /**\n   * get connection\n   * @return {Promise} []\n   */\n  async getConnection(){\n    if(this.connection){\n      return this.connection;\n    }\n    let sqlite = await think.npm('sqlite3');\n    if(this.config.verbose){\n      sqlite = sqlite.verbose();\n    }\n    return think.await(this.config.path, () => {\n      let deferred = think.defer();\n      let db = new sqlite.Database(this.config.path, err => {\n        this.logConnect(`sqlite://${this.config.path}`, 'sqlite');\n        \n        if(err){\n          deferred.reject(err);\n        }else {\n          this.connection = db;\n          deferred.resolve(db);\n        }\n      });\n      //set timeout\n      if(this.config.timeout){\n        db.configure('busyTimeout', this.config.timeout * 1000);\n      }\n      let err = new Error(`sqlite://${this.config.path}`);\n      return think.error(deferred.promise, err);\n    });\n  }\n  /**\n   * query sql\n   * @param  {String} sql []\n   * @return {Promise}     []\n   */\n  async execute(sql){\n    let connection = await this.getConnection();\n    let deferred = think.defer();\n    let startTime = Date.now();\n    let logSql = this.config.log_sql;\n    //can not use arrow functions in here\n    connection.run(sql, function(err) {\n      if (logSql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      if(err){\n        deferred.reject(err);\n      }else{\n        deferred.resolve({\n          insertId: this.lastID,\n          affectedRows: this.changes\n        });\n      }\n    });\n    return think.error(deferred.promise);\n  }\n  /**\n   * execute sql\n   * @param  {String} sql []\n   * @return {Promise}     []\n   */\n  async query(sql){\n    let connection = await this.getConnection();\n    let startTime = Date.now();\n    let fn = think.promisify(connection.all, connection);\n    let promise = fn(sql).then(data => {\n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return data;\n    }).catch(err => {\n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return Promise.reject(err);\n    });\n    return think.error(promise);\n  }\n}"]}