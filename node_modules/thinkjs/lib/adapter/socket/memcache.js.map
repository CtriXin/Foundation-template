{"version":3,"sources":["../../../src/adapter/socket/memcache.js"],"names":["init","config","think","extend","host","port","username","password","getSocketStr","protocal","str","getConnection","connection","npm","memjs","Client","create","logger","log","logConnect","wrap","name","args","deferred","defer","callback","err","data","reject","resolve","toString","length","push","Error","error","promise","get","key","set","value","timeout","delete","increment","amount","decrement"],"mappings":"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","file":"memcache.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * memcache socket\n */\nexport default class extends Base {\n  /**\n   * inti\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(config = {}){\n    super.init(config);\n    \n    this.config = think.extend({\n      host: '127.0.0.1',\n      port: 11211,\n      username: '',\n      password: ''\n    }, config);\n  }\n  /**\n   * get socket connect str\n   * @return {String} []\n   */\n  getSocketStr(protocal){\n    let str = '';\n    let config = this.config;\n    if(config.username){\n      str += config.username;\n    }\n    if(config.password){\n      str += ':' + config.password;\n    }\n    if(str){\n      str += '@';\n    }\n    str += config.host + ':' + config.port;\n    if(protocal){\n      return 'memcache://' + str;\n    }\n    return str;\n  }\n  /**\n   * get connection\n   * @return {Promise} []\n   */\n  async getConnection(){\n    if(this.connection){\n      return this.connection;\n    }\n    let memjs = await think.npm('memjs');\n    this.connection = memjs.Client.create(this.getSocketStr(), {\n      logger: {\n        log: () => {}\n      }\n    });\n\n    this.logConnect(this.getSocketStr(true), 'memcache');\n\n    return this.connection;\n  }\n  /**\n   * wrap method\n   * @param  {String}    name []\n   * @param  {} args []\n   * @return {Promise}         []\n   */\n  async wrap(name, ...args){\n    let connection = await this.getConnection();\n    let deferred = think.defer();\n    let callback = (err, data) => err ? deferred.reject(err) : deferred.resolve(data && data.toString());\n    if(args.length === 1){\n      args.push(callback);\n    }else{\n      args = [args[0], args[1], callback, args[2]];\n    }\n    connection[name](...args);\n    let err = new Error(this.getSocketStr(true));\n    return think.error(deferred.promise, err);\n  }\n  /**\n   * get data\n   * @param  {String} key []\n   * @return {Promise}     []\n   */\n  get(key){\n    return this.wrap('get', key);\n  }\n  /**\n   * set data \n   * @param {String} key     []\n   * @param {String} value   []\n   * @param {Number} timeout []\n   */\n  set(key, value, timeout = this.config.timeout){\n    return this.wrap('set', key, value, timeout);\n  }\n  /**\n   * delete data\n   * @param  {String} key []\n   * @return {Promise}     []\n   */\n  delete(key){\n    return this.wrap('delete', key);  \n  }\n  /**\n   * increment\n   * @param  {String} key     []\n   * @param  {Number} amount  []\n   * @param  {Number} timeout []\n   * @return {Promise}         []\n   */\n  increment(key, amount, timeout = this.config.timeout){\n    return this.wrap('increment', key, amount, timeout);\n  }\n  /**\n   * decrement\n   * @param  {String} key     []\n   * @param  {Number} amount  []\n   * @param  {Number} timeout []\n   * @return {Promise}         []\n   */\n  decrement(key, amount, timeout = this.config.timeout){\n    return this.wrap('decrement', key, amount, timeout);\n  }\n}"]}