{"version":3,"sources":["../../../src/adapter/socket/postgresql.js"],"names":["init","config","port","getPG","pg","think","npm","poolSize","defaults","poolIdleTimeout","on","close","getConnection","connection","connectionStr","user","password","host","database","await","deferred","defer","connect","err","client","done","logConnect","reject","release","resolve","promise","query","sql","startTime","Date","now","fn","promisify","then","log_sql","log","data","catch","code","error","execute","end"],"mappings":"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","file":"postgresql.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * postgres socket class\n * @return {} []\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(config){\n    super.init(config);\n\n    config.port = config.port || 5432;\n    //config.password = config.pwd;\n    //delete config.pwd;\n\n    this.config = config;\n  }\n  /**\n   * get pg\n   * @return {} []\n   */\n  async getPG(){\n    if(this.pg){\n      return this.pg;\n    }\n    let pg = await think.npm('pg');\n    //set poolSize\n    if(this.config.poolSize){\n      pg.defaults.poolSize = this.config.poolSize;\n    }\n    //set poolIdleTimeout, change default `30 seconds` to 8 hours\n    pg.defaults.poolIdleTimeout = this.config.poolIdleTimeout * 1000 || 8 * 60 * 60 * 1000;\n\n    //when has error, close connection\n    pg.on('error', () => {\n      this.close();\n    });\n    pg.on('end', () => {\n      this.close();\n    });\n    pg.on('close', () => {\n      this.close();\n    });\n    this.pg = pg;\n    return pg;\n  }\n  /**\n   * get connection\n   * @return {} []\n   */\n  async getConnection(){\n    if(this.connection){\n      return this.connection;\n    }\n    let pg = await this.getPG();\n    let config = this.config;\n    let connectionStr = `postgres://${config.user}:${config.password}@${config.host}:${config.port}/${config.database}`;\n\n    return think.await(connectionStr, () => {\n      let deferred = think.defer();\n      pg.connect(this.config, (err, client, done) => {\n        this.logConnect(connectionStr, 'postgre');\n        if(err){\n          deferred.reject(err);\n        }else{\n          this.connection = client;\n          this.release = done;\n          deferred.resolve(client);\n        }\n      });\n      return deferred.promise;\n    });\n  }\n  /**\n   * query\n   * @return {Promise} []\n   */\n  async query(sql){\n    let connection = await this.getConnection();\n    let startTime = Date.now();\n    let fn = think.promisify(connection.query, connection);\n    let promise = fn(sql).then(data => {\n      this.release();\n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return data;\n    }).catch(err => {\n      this.release();\n\n      //when socket is closed, try it\n      if(err.code === 'EPIPE'){\n        this.close();\n        return this.query(sql);\n      }\n\n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return Promise.reject(err);\n    });\n    return think.error(promise);\n  }\n  /**\n   * execute sql\n   * @param  {Array} args []\n   * @return {Promise}         []\n   */\n  execute(...args){\n    return this.query(...args);\n  }\n  /**\n   * close connection\n   * @return {} []\n   */\n  close(){\n    if(this.connection){\n      this.connection.end();\n      this.connection = null;\n    }\n  }\n}"]}