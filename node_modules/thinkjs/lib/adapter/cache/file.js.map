{"version":3,"sources":["../../../src/adapter/cache/file.js"],"names":["FileStore","think","adapter","init","options","parseConfig","config","timeout","file_ext","path","path_depth","store","gcType","gc","getFilepath","name","md5","dir","slice","split","join","sep","get","filepath","then","data","JSON","parse","expire","Date","now","delete","e","catch","set","value","isObject","key","list","files","forEach","file","content","readFileSync","unlink","base"],"mappings":"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","file":"file.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\n\n/**\n * file store\n * @type {Class}\n */\nlet FileStore = think.adapter('store', 'file');\n\n/**\n * file cache\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  init(options){\n    \n    options = think.parseConfig(think.config('cache'), options);\n    \n    this.timeout = options.timeout;\n    this.file_ext = options.file_ext;\n    this.path = options.path;\n    this.path_depth = options.path_depth || 1;\n\n    this.store = new FileStore({\n      path: this.path\n    });\n\n    this.gcType = this.path;\n    think.gc(this);\n  }\n  /**\n   * get stored file path\n   * @return {String} []\n   */\n  getFilepath(name){\n    name = think.md5(name);\n    let dir = name.slice(0, this.path_depth).split('').join(path.sep);\n    return `${dir}${path.sep}${name}${this.file_ext}`;\n  }\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    let filepath = this.getFilepath(name);\n    return this.store.get(filepath).then(data => {\n      if(!data){\n        return;\n      }\n      try{\n        data = JSON.parse(data);\n        if(data.expire && Date.now() > data.expire){\n          return this.store.delete(filepath);\n        }else{\n          return data.data;\n        }\n      }catch(e){\n        return this.store.delete(filepath);\n      }\n    }).catch(() => {});\n  }\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n  set(name, value, timeout = this.timeout){\n    if (think.isObject(name)) {\n      timeout = value || timeout;\n      let key = Object.keys(name)[0];\n      value = name[key];\n      name = key;\n    }\n    let filepath = this.getFilepath(name);\n    let data = {\n      data: value,\n      expire: Date.now() + timeout * 1000,\n      timeout: timeout\n    };\n    return this.store.set(filepath, JSON.stringify(data)).catch(() => {});\n  }\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    let filepath = this.getFilepath(name);\n    return this.store.delete(filepath).catch(() => {});\n  }\n  /**\n   * gc\n   * @return {} []\n   */\n  gc(){\n    let now = Date.now();\n    return this.store.list().then(files => {\n      files.forEach(file => {\n        let filepath = `${this.path}${path.sep}${file}`;\n        let content = fs.readFileSync(filepath, 'utf8');\n        try{\n          let data = JSON.parse(content);\n          if(now > data.expire){\n            fs.unlink(filepath, () => {});\n          }\n        }catch(e){\n          fs.unlink(filepath, () => {});\n        }\n      });\n    });\n  }\n}"]}