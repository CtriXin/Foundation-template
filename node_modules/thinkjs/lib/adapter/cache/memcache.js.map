{"version":3,"sources":["../../../src/adapter/cache/memcache.js"],"names":["MemcacheSocket","think","adapter","init","options","parseConfig","config","timeout","prefix","getMemcacheInstance","name","call","command","from","getInstance","thinkCache","MEMCACHE","get","instance","then","value","JSON","parse","catch","set","isObject","key","data","delete","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,iBAAiBC,MAAMC,OAAN,CAAc,QAAd,EAAwB,UAAxB,CAArB;;AAEA;;;;;;;;;;;;AAIE;;;;;mBAKAC,I,iBAAKC,O,EAAQ;AACX,SAAKA,OAAL,GAAeH,MAAMI,WAAN,CAAkBJ,MAAMK,MAAN,CAAa,OAAb,CAAlB,EAAyCF,OAAzC,CAAf;AACA,SAAKG,OAAL,GAAe,KAAKH,OAAL,CAAaG,OAAb,IAAwB,CAAvC;AACA,SAAKC,MAAL,GAAc,KAAKJ,OAAL,CAAaI,MAAb,IAAuB,EAArC;AACD,G;AACD;;;;;;;mBAKAC,mB,gCAAoBC,I,EAAK;AACvB,QAAIN,UAAUH,MAAMI,WAAN,CAAkBM,IAAlB,CAAuB,KAAKP,OAA5B,EAAqCH,MAAMK,MAAN,CAAa,UAAb,CAArC,EAA+D;AAC3EM,eAASF,IADkE;AAE3EG,YAAM;AAFqE,KAA/D,CAAd;AAIA,SAAKN,OAAL,GAAeH,QAAQG,OAAR,IAAmB,KAAKA,OAAvC;AACA,SAAKC,MAAL,GAAcJ,QAAQI,MAAR,IAAkB,KAAKA,MAArC;AACA,WAAOR,eAAec,WAAf,CAA2BV,OAA3B,EAAoCW,WAAWC,QAA/C,EAAyD,CAAC,SAAD,EAAY,MAAZ,CAAzD,CAAP;AACD,G;AACD;;;;;;;mBAKAC,G,gBAAIP,I,EAAK;AACP,QAAIQ,WAAW,KAAKT,mBAAL,CAAyB,KAAzB,CAAf;AACA,WAAOS,SAASD,GAAT,CAAa,KAAKT,MAAL,GAAcE,IAA3B,EAAiCS,IAAjC,CAAsC,iBAAS;AACpD,UAAIC,KAAJ,EAAW;AACT,eAAOC,KAAKC,KAAL,CAAWF,KAAX,CAAP;AACD;AACF,KAJM,EAIJG,KAJI,CAIE,YAAM,CAAE,CAJV,CAAP;AAKD,G;AACD;;;;;;;;mBAMAC,G,gBAAId,I,EAAMU,K,EAA8B;AAAA,QAAvBb,OAAuB,uEAAb,KAAKA,OAAQ;;AACtC,QAAIN,MAAMwB,QAAN,CAAef,IAAf,CAAJ,EAA0B;AACxBH,gBAAUa,SAASb,OAAnB;AACA,UAAImB,MAAM,oBAAYhB,IAAZ,EAAkB,CAAlB,CAAV;AACAU,cAAQV,KAAKgB,GAAL,CAAR;AACAhB,aAAOgB,GAAP;AACD;AACD,QAAIR,WAAW,KAAKT,mBAAL,CAAyB,KAAzB,CAAf;AACA,QAAIkB,OAAO,yBAAeP,KAAf,CAAX;AACA,WAAOF,SAASM,GAAT,CAAa,KAAKhB,MAAL,GAAcE,IAA3B,EAAiCiB,IAAjC,EAAuCpB,OAAvC,EAAgDgB,KAAhD,CAAsD,YAAM,CAAE,CAA9D,CAAP;AACD,G;AACD;;;;;;;mBAKAK,M,oBAAOlB,I,EAAK;AACV,QAAIQ,WAAW,KAAKT,mBAAL,CAAyB,QAAzB,CAAf;AACA,WAAOS,SAASU,MAAT,CAAgB,KAAKpB,MAAL,GAAcE,IAA9B,EAAoCa,KAApC,CAA0C,YAAM,CAAE,CAAlD,CAAP;AACD,G;;;EA/D0BtB,MAAMC,OAAN,CAAc2B,I","file":"memcache.js","sourcesContent":["'use strict';\n\nlet MemcacheSocket = think.adapter('socket', 'memcache');\n\n/**\n * memcache cache\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  init(options){\n    this.options = think.parseConfig(think.config('cache'), options);\n    this.timeout = this.options.timeout || 0;\n    this.prefix = this.options.prefix || '';\n  }\n  /**\n   * get memcache instance\n   * @param  {String} command []\n   * @return {}         []\n   */\n  getMemcacheInstance(name){\n    let options = think.parseConfig.call(this.options, think.config('memcache'), {\n      command: name,\n      from: 'cache'\n    });\n    this.timeout = options.timeout || this.timeout;\n    this.prefix = options.prefix || this.prefix;\n    return MemcacheSocket.getInstance(options, thinkCache.MEMCACHE, ['command', 'from']);\n  }\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    let instance = this.getMemcacheInstance('get');\n    return instance.get(this.prefix + name).then(value => {\n      if (value) {\n        return JSON.parse(value);\n      }\n    }).catch(() => {});\n  }\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n  set(name, value, timeout = this.timeout){\n    if (think.isObject(name)) {\n      timeout = value || timeout;\n      let key = Object.keys(name)[0];\n      value = name[key];\n      name = key;\n    }\n    let instance = this.getMemcacheInstance('set');\n    let data = JSON.stringify(value);\n    return instance.set(this.prefix + name, data, timeout).catch(() => {});\n  }\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    let instance = this.getMemcacheInstance('delete');\n    return instance.delete(this.prefix + name).catch(() => {});\n  }\n}"]}