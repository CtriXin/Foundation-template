{"version":3,"sources":["../../src/controller/base.js"],"names":["init","http","_baseAssigned","ip","view","method","toLowerCase","isMethod","toUpperCase","isGet","isPost","isAjax","isWebSocket","socket","isCli","isJsonp","name","get","value","post","param","file","header","userAgent","referrer","onlyHost","referer","cookie","options","session","lang","asViewPath","locale","key","data","redirect","url","code","think","prevent","assign","_baseAssign","controller","config","_config","_","bind","fetch","templateFile","display","charset","contentType","render","jsonp","json","status","deny","end","expires","time","write","obj","encoding","send","type","ext","download","filepath","filename","isString","indexOf","require","lookup","basename","middleware","success","message","fail","errno","errmsg","error","sendTime","emit","event","Error","socketEmit","broadcast","containSelf","socketBroadcast","base"],"mappings":"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","file":"base.js","sourcesContent":["'use strict';\n\nimport path from 'path';\n/**\n * base controller class\n * all controllers will inherits this class\n */\nexport default class extends think.http.base {\n  /**\n   * init\n   * @return {void} []\n   */\n  init(http){\n    this.http = http;\n    this._baseAssigned = false;\n  }\n  /**\n   * get client ip\n   * @return {String} []\n   */\n  ip(){\n    return this.http.ip();\n  }\n  /**\n   * init view instance\n   * @return {Object} []\n   */\n  view(){\n    return this.http.view();\n  }\n  /**\n   * get http method\n   * @return {String} []\n   */\n  method(){\n    return this.http.method.toLowerCase();\n  }\n  /**\n   * check http method\n   * @param  {String}  method [http method]\n   * @return {Boolean}        []\n   */\n  isMethod(method){\n    return this.http.method === method.toUpperCase();\n  }\n  /**\n   * check http method is get\n   * @return {Boolean} []\n   */\n  isGet(){\n    return this.http.isGet();\n  }\n  /**\n   * check http method is post\n   * @return {Boolean} []\n   */\n  isPost(){\n    return this.http.isPost();\n  }\n  /**\n   * check is ajax request\n   * @param  {String}  method [http method]\n   * @return {Boolean}        []\n   */\n  isAjax(method) {\n    return this.http.isAjax(method);\n  }\n  /**\n   * check is websocket request\n   * @return {Boolean} []\n   */\n  isWebSocket(){\n    return !!this.http.socket;\n  }\n  /**\n   * check is command line invoke\n   * @return {Boolean} []\n   */\n  isCli(){\n    return this.http.isCli();\n  }\n  /**\n   * check is jsonp\n   * @param  {String}  name [callback name]\n   * @return {Boolean}      []\n   */\n  isJsonp(name){\n    return this.http.isJsonp(name);\n  }\n  /**\n   * get get params\n   * @param  {String} name [query name]\n   * @return {String}      []\n   */\n  get(name, value){\n    return this.http.get(name, value);\n  }\n  /**\n   * get post params\n   * @param  {String} name [query name]\n   * @return {String}      []\n   */\n  post(name, value) {\n    return this.http.post(name, value);\n  }\n  /**\n   * get post or get params\n   * @param  {String} name []\n   * @return {String}      []\n   */\n  param(name) {\n    return this.http.param(name);\n  }\n  /**\n   * get upload files\n   * @param  {String} name []\n   * @return {Object}      []\n   */\n  file(name, value) {\n    return this.http.file(name, value);\n  }\n  /**\n   * get or set header\n   * @param  {String} name  [header name]\n   * @param  {String} value [header value]\n   * @return {}       []\n   */\n  header(name, value) {\n    return this.http.header(name, value);\n  }\n  /**\n   * get user agent\n   * @return {String} []\n   */\n  userAgent(){\n    return this.http.userAgent();\n  }\n  /**\n   * get page referer\n   * @param  {String} host [only get referer host]\n   * @return {String}      []\n   */\n  referrer(onlyHost){\n    return this.http.referrer(onlyHost);\n  }\n  /**\n   * get page referer\n   * @param  {String} host [only get referer host]\n   * @return {String}      []\n   */\n  referer(onlyHost){\n    return this.http.referrer(onlyHost);\n  }\n  /**\n   * get or set cookie\n   * @param  {String} name    [cookie name]\n   * @param  {String} value   [cookie value]\n   * @param  {Object} options [cookie options]\n   * @return {}         []\n   */\n  cookie(name, value, options) {\n    return this.http.cookie(name, value, options);\n  }\n  /**\n   * get or set session\n   * @param  {String} name  [session name]\n   * @param  {mixed} value [session value]\n   * @return {Promise}       []\n   */\n  session(name, value) {\n    return this.http.session(name, value);\n  }\n  /**\n   * get language\n   * @param  {Boolean} useCookie [get from cookie set]\n   * @return {String}           []\n   */\n  lang(lang, asViewPath){\n    return this.http.lang(lang, asViewPath);\n  }\n  /**\n   * get locale value\n   * @param  {String} key []\n   * @return {String}     []\n   */\n  locale(key, ...data){\n    return this.http.locale(key, ...data);\n  }\n  /**\n   * redirect\n   * @param  {String} url  [redirect url]\n   * @param  {Number} code [301 or 302]\n   * @return {promise}      [pedding promise]\n   */\n  redirect(url, code) {\n    this.http.redirect(url, code);\n    return think.prevent();\n  }\n  /**\n   * assign value to template\n   * @param  {String} name  [template name]\n   * @param  {mixed} value []\n   * @return {}       []\n   */\n  assign(name, value) {\n    this._baseAssign();\n    return this.view().assign(name, value);\n  }\n  /**\n   * base assign\n   * @return {} []\n   */\n  _baseAssign(){\n    if(this._baseAssigned){\n      return;\n    }\n    this._baseAssigned = true;\n    this.view().assign({\n      controller: this,\n      http: this.http,\n      config: this.http._config,\n      _: this.locale.bind(this)\n    });\n  }\n  /**\n   * fetch template content\n   * @param  {String} templateFile [template filepath]\n   * @return {promise}              []\n   */\n  fetch(templateFile, data, config) {\n    this._baseAssign();\n    return this.view().fetch(templateFile, data, config);\n  }\n  /**\n   * display template\n   * @param  {String} templateFile [template filepath]\n   * @param  {String} charset      [content encoding]\n   * @param  {String} contentType  [content type]\n   * @return {Promise}              []\n   */\n  display(templateFile, charset, contentType) {\n    this._baseAssign();\n    return this.view().display(templateFile, charset, contentType);\n  }\n  /**\n   * alias of display\n   * @param  {String} templateFile [template filepath]\n   * @param  {String} charset      [content encoding]\n   * @param  {String} contentType  [content type]\n   * @return {Promise}              []\n   */\n  render(templateFile, charset, contentType){\n    return this.display(templateFile, charset, contentType);\n  }\n  /**\n   * output with jsonp\n   * @param  {Object} data [output data]\n   * @return {}      []\n   */\n  jsonp(data) {\n    this.http.jsonp(data);\n    return think.prevent();\n  }\n  /**\n   * output with json\n   * @param  {Object} data [output data]\n   * @return {Promise}      []\n   */\n  json(data){\n    this.http.json(data);\n    return think.prevent();\n  }\n  /**\n   * set http status code\n   * @param  {Number} status [status code]\n   * @return {}        []\n   */\n  status(status = 404) {\n    this.http.status(status);\n    return this;\n  }\n  /**\n   * deny request\n   * @param  {Number} status [status code]\n   * @return {[type]}        []\n   */\n  deny(status = 403){\n    this.status(status);\n    this.http.end();\n    return think.prevent();\n  }\n  /**\n   * set cache-control and expires header\n   * @param  {Number} time []\n   * @return {}      []\n   */\n  expires(time){\n    this.http.expires(time);\n    return this;\n  }\n  /**\n   * write content\n   * @param  {mixed} obj      []\n   * @param  {String} encoding [content encoding]\n   * @return {}          []\n   */\n  write(obj, encoding) {\n    return this.http.write(obj, encoding);\n  }\n  /**\n   * end output\n   * @param  {Object} obj      []\n   * @param  {String} encoding [content encoding]\n   * @return {}          []\n   */\n  end(obj, encoding) {\n    this.http.end(obj, encoding);\n    return think.prevent();\n  }\n  /**\n   * send content\n   * @param  {Mixed} obj      []\n   * @param  {String} encoding []\n   * @return {Promise}          []\n   */\n  send(obj, encoding){\n    return this.end(obj, encoding);\n  }\n  /**\n   * get or set content type\n   * @param  {String} ext [content type]\n   * @return {}     []\n   */\n  type(ext, encoding){\n    return this.http.type(ext, encoding);\n  }\n  /**\n   * download file\n   * @param  {String} file        [filepath]\n   * @param  {String} contentType [content type]\n   * @param  {String} filename    [download filename]\n   * @return {Promise}             []\n   */\n  download(filepath, contentType, filename) {\n    if (think.isString(contentType) && contentType.indexOf('.') > -1) {\n      filename = contentType;\n      contentType = '';\n    }\n    if (!contentType || contentType.indexOf('/') === -1) {\n      contentType = require('mime').lookup(contentType || filepath);\n    }\n    this.type(contentType, false);\n\n    this.header('Content-Disposition', 'attachment; filename=\"' + (filename || path.basename(filepath)) + '\"');\n    return think.middleware('output_resource', this.http, filepath);\n  }\n  /**\n   * output with success errno & errmsg\n   * @param  {Object} data    [output data]\n   * @param  {String} message [errmsg]\n   * @return {Promise}         [pedding promise]\n   */\n  success(data, message){\n    this.http.success(data, message);\n    return think.prevent();\n  }\n  /**\n   * output with fail errno & errmsg\n   * @param  {Number} errno  [error number]\n   * @param  {String} errmsg [error message]\n   * @param  {Object} data   [output data]\n   * @return {Promise}        [pedding promise]\n   */\n  fail(errno, errmsg, data){\n    this.http.fail(errno, errmsg, data);\n    return think.prevent();\n  }\n  /**\n   * alias for fail\n   * @param  {} args []\n   * @return {Promise}         []\n   */\n  error(...args){\n    return this.fail(...args);\n  }\n  /**\n   * send exec time\n   * @param  {String} name [header name]\n   * @return {}      []\n   */\n  sendTime(name){\n    return this.http.sendTime(name);\n  }\n  /**\n   * emit socket data\n   * @param  {String} event []\n   * @param  {Miex} data  []\n   * @return {}       []\n   */\n  emit(event, data){\n    if(!this.http.socket){\n      throw new Error('emit method can only used in websocket request');\n    }\n    return this.http.socketEmit(event, data);\n  }\n  /**\n   * broadcast socket data\n   * @param  {String} event       []\n   * @param  {Mixed} data        []\n   * @param  {Boolean} containSelf []\n   * @return {}             []\n   */\n  broadcast(event, data, containSelf){\n    if(!this.http.socket){\n      throw new Error('broadcast method can only used in websocket request');\n    }\n    return this.http.socketBroadcast(event, data, containSelf);\n  }\n}"]}