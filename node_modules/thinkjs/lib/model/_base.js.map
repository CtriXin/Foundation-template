{"version":3,"sources":["../../src/model/_base.js"],"names":["forceNewNum","init","name","config","options","pk","tablePrefix","undefined","tableName","schema","indexes","key","think","isObject","parseConfig","database","log","pwd","password","isEmpty","fields","_db","_data","_options","prefix","model","module","isString","indexOf","parseModuleFromPath","type","extend","getTablePrefix","db","forceNew","parser","DB","adapter","getModelName","filename","__filename","last","lastIndexOf","sep","substr","length","getTableName","cache","timeout","isNumber","limit","offset","isArray","Math","max","parseInt","page","listRows","nums_per_page","where","_string","field","reverse","split","fieldReverse","table","hasPrefix","trim","union","all","push","join","concat","order","value","alias","having","group","lock","auto","filter","distinct","data","explain","optionsFilter","dataFilter","beforeAdd","map","item","ret","extRet","fieldSchema","_default","default","isTrueEmpty","_isSubSchema","values","keys","every","afterAdd","beforeDelete","afterDelete","beforeUpdate","readonlyFields","forEach","readonly","result","update","afterUpdate","beforeFind","afterFind","beforeSelect","afterSelect","close","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAEA,IAAIA,cAAc,CAAlB;;AAEA;;;;;;;;;;;;AAIE;;;;;;mBAMAC,I,mBAA4B;AAAA,QAAvBC,IAAuB,uEAAhB,EAAgB;AAAA,QAAZC,MAAY,uEAAH,EAAG;;;AAE1B,QAAIC,UAAU;AACZC,UAAI,IADQ,EACF;AACVH,YAAM,EAFM,EAEF;AACVI,mBAAaC,SAHD,EAGY;AACxBC,iBAAW,EAJC,EAIG;AACf;;;;;;;;;;;;;AAaAC,cAAQ,EAlBI,EAkBA;AACZ;;;;;;;;AAQAC,eAAS;AACT;AA5BY,KAAd;AA8BA;AACA,SAAI,IAAIC,GAAR,IAAeP,OAAf,EAAuB;AACrB,UAAG,KAAKO,GAAL,MAAcJ,SAAjB,EAA2B;AACzB,aAAKI,GAAL,IAAYP,QAAQO,GAAR,CAAZ;AACD;AACF;;AAED,QAAGC,MAAMC,QAAN,CAAeX,IAAf,CAAH,EAAwB;AACtBC,eAASD,IAAT;AACAA,aAAO,EAAP;AACD;;AAEDC,aAASS,MAAME,WAAN,CAAkB,IAAlB,EAAwBX,MAAxB,CAAT;;AAEA;AACA,QAAGA,OAAOD,IAAP,IAAe,CAACC,OAAOY,QAA1B,EAAmC;AACjCZ,aAAOY,QAAP,GAAkBZ,OAAOD,IAAzB;AACA,aAAOC,OAAOD,IAAd;AACAU,YAAMI,GAAN,mDAA4D,SAA5D;AACD;;AAED,QAAGb,OAAOc,GAAP,IAAc,CAACd,OAAOe,QAAzB,EAAkC;AAChCf,aAAOe,QAAP,GAAkBf,OAAOc,GAAzB;AACA,aAAOd,OAAOc,GAAd;AACAL,YAAMI,GAAN,kDAA2D,SAA3D;AACD;;AAED;AACA,QAAG,CAACJ,MAAMO,OAAN,CAAc,KAAKC,MAAnB,CAAJ,EAA+B;AAC7B,WAAKX,MAAL,GAAc,KAAKW,MAAnB;AACA,aAAO,KAAKA,MAAZ;AACAR,YAAMI,GAAN,sDAA+D,SAA/D;AACD;;AAED,SAAKb,MAAL,GAAcA,MAAd;AACA,SAAKkB,GAAL,GAAW,IAAX;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,QAAL,GAAgB,EAAhB;;AAEA;AACA,QAAGrB,IAAH,EAAQ;AACN,WAAKA,IAAL,GAAYA,IAAZ;AACD;AACD;AACA,QAAI,KAAKC,MAAL,CAAYqB,MAAZ,IAAsB,KAAKlB,WAAL,KAAqBC,SAA/C,EAA0D;AACxD,WAAKD,WAAL,GAAmB,KAAKH,MAAL,CAAYqB,MAA/B;AACD;AACF,G;AACD;;;;;;;;mBAMAC,K,kBAAMvB,I,EAAME,O,EAASsB,M,EAAO;AAC1B,QAAGd,MAAMe,QAAN,CAAevB,OAAf,KAA2BQ,MAAMc,MAAN,CAAaE,OAAb,CAAqBxB,OAArB,IAAgC,CAAC,CAA/D,EAAiE;AAC/DsB,eAAStB,OAAT;AACAA,gBAAU,EAAV;AACD;AACDsB,aAASA,UAAU,KAAKG,mBAAL,EAAnB;AACA,QAAGjB,MAAMe,QAAN,CAAevB,OAAf,CAAH,EAA2B;AACzBA,gBAAU,EAAC0B,MAAM1B,OAAP,EAAV;AACD;AACDA,cAAUQ,MAAMmB,MAAN,CAAa,EAAb,EAAiB,KAAK5B,MAAtB,EAA8BC,OAA9B,CAAV;AACA,WAAOQ,MAAMa,KAAN,CAAYvB,IAAZ,EAAkBE,OAAlB,EAA2BsB,MAA3B,CAAP;AACD,G;AACD;;;;;;mBAIAM,c,6BAAgB;AACd,WAAO,KAAK1B,WAAL,IAAoB,EAA3B;AACD,G;AACD;;;;;;mBAIA2B,E,iBAAoB;AAAA,QAAjBC,QAAiB,uEAAN,KAAM;;AAClB;AACA,QAAGtB,MAAMC,QAAN,CAAeqB,QAAf,CAAH,EAA4B;AAC1B,WAAKb,GAAL,GAAWa,QAAX;AACA,aAAO,IAAP;AACD;AACD,QAAI,KAAKb,GAAL,IAAY,CAACa,QAAb,IAAyB,CAAC,KAAK/B,MAAL,CAAYgC,MAA1C,EAAkD;AAChD,aAAO,KAAKd,GAAZ;AACD;AACD,QAAIe,KAAKxB,MAAMyB,OAAN,CAAc,IAAd,EAAoB,KAAKlC,MAAL,CAAY2B,IAAZ,IAAoB,OAAxC,CAAT;AACA,QAAI3B,SAAS,KAAKA,MAAlB;AACA,QAAGH,cAAe,2BAA0B,CAA5C,EAA+C;AAC7CA,oBAAc,CAAd;AACD;AACD,QAAGkC,QAAH,EAAY;AACV/B,eAASS,MAAMmB,MAAN,CAAa,EAAb,EAAiB5B,MAAjB,EAAyB,EAACH,aAAaA,aAAd,EAAzB,CAAT;AACD;AACD,SAAKqB,GAAL,GAAW,IAAIe,EAAJ,CAAOjC,MAAP,CAAX;AACA,WAAO,KAAKkB,GAAZ;AACD,G;AACD;;;;;;mBAIAiB,Y,2BAAc;AACZ,QAAI,KAAKpC,IAAT,EAAe;AACb,aAAO,KAAKA,IAAZ;AACD;AACD,QAAIqC,WAAW,KAAKC,UAAL,IAAmBA,UAAlC;AACA,QAAIC,OAAOF,SAASG,WAAT,CAAqB9B,MAAM+B,GAA3B,CAAX;AACA,SAAKzC,IAAL,GAAYqC,SAASK,MAAT,CAAgBH,OAAO,CAAvB,EAA0BF,SAASM,MAAT,GAAkBJ,IAAlB,GAAyB,CAAnD,CAAZ;AACA,WAAO,KAAKvC,IAAZ;AACD,G;AACD;;;;;;mBAIA4C,Y,2BAAc;AACZ,QAAG,CAAC,KAAKtC,SAAT,EAAmB;AACjB,WAAKA,SAAL,GAAiB,KAAK8B,YAAL,EAAjB;AACD;AACD,WAAO,KAAKN,cAAL,KAAwB,KAAKxB,SAApC;AACD,G;AACD;;;;;;;;mBAMAuC,K,kBAAMpC,G,EAAyC;AAAA,QAApCqC,OAAoC,uEAA1B,KAAK7C,MAAL,CAAY4C,KAAZ,CAAkBC,OAAQ;;AAC7C,QAAIrC,QAAQJ,SAAZ,EAAuB;AACrB,aAAO,IAAP;AACD;AACD,QAAIH,gBAAJ;AACA,QAAG,CAACQ,MAAMC,QAAN,CAAeF,GAAf,CAAJ,EAAwB;AACtB,UAAGC,MAAMqC,QAAN,CAAetC,GAAf,CAAH,EAAuB;AACrBqC,kBAAUrC,GAAV;AACAA,cAAM,EAAN;AACD;AACDP,gBAAUQ,MAAMmB,MAAN,CAAa,EAAb,EAAiB,KAAK5B,MAAL,CAAY4C,KAA7B,EAAoC,EAACpC,QAAD,EAAMqC,gBAAN,EAApC,CAAV;AACD,KAND,MAMK;AACH5C,gBAAUO,GAAV;AACD;AACD,SAAKY,QAAL,CAAcwB,KAAd,GAAsB3C,OAAtB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;;mBAMA8C,K,kBAAMC,M,EAAQN,M,EAAO;AACnB,QAAIM,WAAW5C,SAAf,EAA0B;AACxB,aAAO,IAAP;AACD;AACD,QAAGK,MAAMwC,OAAN,CAAcD,MAAd,CAAH,EAAyB;AACvBN,eAASM,OAAO,CAAP,KAAaN,MAAtB;AACAM,eAASA,OAAO,CAAP,CAAT;AACD;AACDA,aAASE,KAAKC,GAAL,CAASC,SAASJ,MAAT,KAAoB,CAA7B,EAAgC,CAAhC,CAAT;AACA,QAAGN,MAAH,EAAU;AACRA,eAASQ,KAAKC,GAAL,CAASC,SAASV,MAAT,KAAoB,CAA7B,EAAgC,CAAhC,CAAT;AACD;AACD,SAAKtB,QAAL,CAAc2B,KAAd,GAAsB,CAACC,MAAD,EAASN,MAAT,CAAtB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;;mBAMAW,I,iBAAKA,K,EAA2C;AAAA,QAArCC,QAAqC,uEAA1B,KAAKtD,MAAL,CAAYuD,aAAc;;AAC9C,QAAIF,UAASjD,SAAb,EAAwB;AACtB,aAAO,IAAP;AACD;AACD,QAAGK,MAAMwC,OAAN,CAAcI,KAAd,CAAH,EAAuB;AACrBC,iBAAWD,MAAK,CAAL,KAAWC,QAAtB;AACAD,cAAOA,MAAK,CAAL,CAAP;AACD;AACDA,YAAOH,KAAKC,GAAL,CAASC,SAASC,KAAT,KAAkB,CAA3B,EAA8B,CAA9B,CAAP;AACAC,eAAWJ,KAAKC,GAAL,CAASC,SAASE,QAAT,KAAsB,EAA/B,EAAmC,CAAnC,CAAX;AACA,SAAKlC,QAAL,CAAc2B,KAAd,GAAsB,CAACO,YAAYD,QAAO,CAAnB,CAAD,EAAwBC,QAAxB,CAAtB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;mBAIAE,K,kBAAMA,M,EAAM;AACV,QAAI,CAACA,MAAL,EAAY;AACV,aAAO,IAAP;AACD;AACD,QAAI/C,MAAMe,QAAN,CAAegC,MAAf,CAAJ,EAA2B;AACzBA,eAAQ,EAACC,SAASD,MAAV,EAAR;AACD;AACD,QAAIvD,UAAU,KAAKmB,QAAnB;AACA,QAAGnB,QAAQuD,KAAR,IAAiB/C,MAAMe,QAAN,CAAevB,QAAQuD,KAAvB,CAApB,EAAkD;AAChDvD,cAAQuD,KAAR,GAAgB,EAACC,SAASxD,QAAQuD,KAAlB,EAAhB;AACD;AACDvD,YAAQuD,KAAR,GAAgB/C,MAAMmB,MAAN,CAAa,EAAb,EAAiB3B,QAAQuD,KAAzB,EAAgCA,MAAhC,CAAhB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;;mBAMAE,K,kBAAMA,M,EAAuB;AAAA,QAAhBC,OAAgB,uEAAN,KAAM;;AAC3B,QAAG,CAACD,MAAJ,EAAU;AACR,aAAO,IAAP;AACD;AACD,QAAIjD,MAAMe,QAAN,CAAekC,MAAf,CAAJ,EAA2B;AACzB,UAAGA,OAAMjC,OAAN,CAAc,GAAd,MAAuB,CAAC,CAA3B,EAA6B;AAC3BiC,iBAAQA,OAAME,KAAN,CAAY,SAAZ,CAAR;AACD;AACF;AACD,SAAKxC,QAAL,CAAcsC,KAAd,GAAsBA,MAAtB;AACA,SAAKtC,QAAL,CAAcyC,YAAd,GAA6BF,OAA7B;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKAE,Y,yBAAaH,K,EAAM;AACjB,WAAO,KAAKA,KAAL,CAAWA,KAAX,EAAkB,IAAlB,CAAP;AACD,G;AACD;;;;;;;mBAKAI,K,kBAAMA,M,EAAOC,S,EAAU;AACrB,QAAI,CAACD,MAAL,EAAY;AACV,aAAO,IAAP;AACD;AACDA,aAAQA,OAAME,IAAN,EAAR;AACA;AACA,QAAIF,OAAMrC,OAAN,CAAc,GAAd,IAAqB,CAAC,CAA1B,EAA6B;AAC3BsC,kBAAY,IAAZ;AACD;AACD,SAAK3C,QAAL,CAAc0C,KAAd,GAAsBC,YAAYD,MAAZ,GAAoB,KAAKjC,cAAL,KAAwBiC,MAAlE;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;;mBAMAG,K,kBAAMA,M,EAAmB;AAAA,QAAZC,GAAY,uEAAN,KAAM;;AACvB,QAAI,CAACD,MAAL,EAAY;AACV,aAAO,IAAP;AACD;AACD,QAAI,CAAC,KAAK7C,QAAL,CAAc6C,KAAnB,EAA0B;AACxB,WAAK7C,QAAL,CAAc6C,KAAd,GAAsB,EAAtB;AACD;AACD,SAAK7C,QAAL,CAAc6C,KAAd,CAAoBE,IAApB,CAAyB;AACvBF,aAAOA,MADgB;AAEvBC,WAAKA;AAFkB,KAAzB;AAIA,WAAO,IAAP;AACD,G;AACD;;;;;;;;;;;;;mBAWAE,I,iBAAKA,K,EAAK;AACR,QAAI,CAACA,KAAL,EAAW;AACT,aAAO,IAAP;AACD;AACD,QAAI,CAAC,KAAKhD,QAAL,CAAcgD,IAAnB,EAAyB;AACvB,WAAKhD,QAAL,CAAcgD,IAAd,GAAqB,EAArB;AACD;AACD,QAAI3D,MAAMwC,OAAN,CAAcmB,KAAd,CAAJ,EAAyB;AACvB,WAAKhD,QAAL,CAAcgD,IAAd,GAAqB,KAAKhD,QAAL,CAAcgD,IAAd,CAAmBC,MAAnB,CAA0BD,KAA1B,CAArB;AACD,KAFD,MAEK;AACH,WAAKhD,QAAL,CAAcgD,IAAd,CAAmBD,IAAnB,CAAwBC,KAAxB;AACD;AACD,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKAE,K,kBAAMC,K,EAAM;AACV,SAAKnD,QAAL,CAAckD,KAAd,GAAsBC,KAAtB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKAC,K,kBAAMD,K,EAAM;AACV,SAAKnD,QAAL,CAAcoD,KAAd,GAAsBD,KAAtB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKAE,M,mBAAOF,K,EAAM;AACX,SAAKnD,QAAL,CAAcqD,MAAd,GAAuBF,KAAvB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKAG,K,kBAAMH,K,EAAM;AACV,SAAKnD,QAAL,CAAcsD,KAAd,GAAsBH,KAAtB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKAI,I,iBAAKJ,K,EAAM;AACT,SAAKnD,QAAL,CAAcuD,IAAd,GAAqBJ,KAArB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKAK,I,iBAAKL,K,EAAM;AACT,SAAKnD,QAAL,CAAcwD,IAAd,GAAqBL,KAArB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKAM,M,mBAAON,K,EAAM;AACX,SAAKnD,QAAL,CAAcyD,MAAd,GAAuBN,KAAvB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKAO,Q,qBAASC,I,EAAK;AACZ,SAAK3D,QAAL,CAAc0D,QAAd,GAAyBC,IAAzB;AACA,QAAItE,MAAMe,QAAN,CAAeuD,IAAf,CAAJ,EAA0B;AACxB,WAAK3D,QAAL,CAAcsC,KAAd,GAAsBqB,IAAtB;AACD;AACD,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKAC,O,oBAAQA,Q,EAAQ;AACd,SAAK5D,QAAL,CAAc4D,OAAd,GAAwBA,QAAxB;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKAC,a,0BAAchF,O,EAAQ;AACpB,WAAOA,OAAP;AACD,G;AACD;;;;;;;mBAKAiF,U,uBAAWH,I,EAAK;AACd,WAAOA,IAAP;AACD,G;AACD;;;;;;;mBAKAI,S,sBAAUJ,I,EAAM9E,O,EAASK,M,EAAO;AAAA;;AAE9B;AACA,QAAGG,MAAMwC,OAAN,CAAc8B,IAAd,CAAH,EAAuB;AACrB,aAAOA,KAAKK,GAAL,CAAS,gBAAQ;AACtB,eAAO,OAAKD,SAAL,CAAeE,IAAf,EAAqBpF,OAArB,CAAP;AACD,OAFM,CAAP;AAGD;;AAED,QAAIqF,MAAM,EAAV;AACA,QAAIC,SAAS,EAAb;AACAjF,aAASA,UAAU,KAAKA,MAAxB;AACA;AACA,SAAI,IAAIoD,KAAR,IAAiBpD,MAAjB,EAAwB;AACtB,UAAIkF,cAAclF,OAAOoD,KAAP,CAAlB;AACA,UAAI+B,WAAWD,YAAYE,OAA3B;AACA;AACA,UAAG,CAACjF,MAAMkF,WAAN,CAAkBF,QAAlB,CAAJ,EAAgC;AAC9BH,YAAI5B,KAAJ,IAAa;AACXa,iBAAOQ,KAAKrB,KAAL,CADI;AAEXgC,mBAASD;AAFE,SAAb;AAID,OALD,MAKK;AACH,YAAG,KAAKG,YAAL,CAAkBJ,WAAlB,CAAH,EAAkC;AAChCD,iBAAO7B,KAAP,IAAgB,KAAKyB,SAAL,CAAeJ,KAAKrB,KAAL,KAAe,EAA9B,EAAkCzD,OAAlC,EAA2CuF,WAA3C,CAAhB;AACD;AACF;AACF;AACD,SAAI,IAAI9B,OAAR,IAAiBqB,IAAjB,EAAsB;AACpB,UAAG,CAACO,IAAI5B,OAAJ,CAAD,IAAe,CAAC6B,OAAO7B,OAAP,CAAnB,EAAiC;AAC/B4B,YAAI5B,OAAJ,IAAa;AACXa,iBAAOQ,KAAKrB,OAAL;AADI,SAAb;AAGD;AACF;AACD4B,UAAM,yBAAUO,MAAV,CAAiBP,GAAjB,CAAN;AACA,QAAG,CAAC7E,MAAMO,OAAN,CAAcuE,MAAd,CAAJ,EAA0B;AACxBD,YAAM7E,MAAMmB,MAAN,CAAa0D,GAAb,EAAkBC,MAAlB,CAAN;AACD;AACD,WAAOD,GAAP;AACD,G;AACD;;;;;;;;;;;;;;;mBAaAM,Y,yBAAatF,M,EAAO;AAClB,QAAG,CAACA,MAAD,IAAW,CAACG,MAAMC,QAAN,CAAeJ,MAAf,CAAf,EAAsC;AACpC,aAAO,KAAP;AACD;AACD,QAAIwF,OAAO,oBAAYxF,MAAZ,CAAX;AACA,WAAOwF,KAAKpD,MAAL,IAAeoD,KAAKC,KAAL,CAAW;AAAA,aAAOtF,MAAMC,QAAN,CAAeJ,OAAOE,GAAP,CAAf,CAAP;AAAA,KAAX,CAAtB;AACD,G;AACD;;;;;;;mBAKAwF,Q,qBAASjB,I,EAAK;AACZ,WAAOA,IAAP;AACD,G;AACD;;;;;mBAGAkB,Y,yBAAahG,O,EAAQ;AACnB,WAAOA,OAAP;AACD,G;AACD;;;;;;;mBAKAiG,W,wBAAYnB,I,EAAK;AACf,WAAOA,IAAP;AACD,G;AACD;;;;;;;mBAKAoB,Y,yBAAapB,I,EAAM9E,O,EAASK,M,EAAO;AAAA;;AACjC;AACA,QAAG,CAACG,MAAMO,OAAN,CAAc,KAAKoF,cAAnB,CAAJ,EAAuC;AAAA;AACrC,YAAId,MAAM,EAAV;AACA,eAAKc,cAAL,CAAoBC,OAApB,CAA4B,gBAAQ;AAClCf,cAAID,IAAJ,IAAY,EAACiB,UAAU,IAAX,EAAZ;AACD,SAFD;AAGA,eAAO,OAAKF,cAAZ;AACA,eAAK9F,MAAL,GAAcG,MAAMmB,MAAN,CAAa0D,GAAb,EAAkB,OAAKhF,MAAvB,CAAd;AACAG,cAAMI,GAAN,8EAAuF,SAAvF;AAPqC;AAQtC;;AAED,QAAIyE,MAAM,EAAV;AACA,QAAIC,SAAS,EAAb;AACAjF,aAASA,UAAU,KAAKA,MAAxB;;AAEA,SAAI,IAAIoD,KAAR,IAAiBqB,IAAjB,EAAsB;AACpB,UAAIS,cAAclF,OAAOoD,KAAP,CAAlB;AACA,UAAG,CAAC8B,WAAJ,EAAgB;AACdF,YAAI5B,KAAJ,IAAa,EAACa,OAAOQ,KAAKrB,KAAL,CAAR,EAAb;AACD,OAFD,MAEK;AACH,YAAG,KAAKkC,YAAL,CAAkBJ,WAAlB,CAAH,EAAkC;AAChC,cAAIe,SAAS,KAAKJ,YAAL,CAAkBpB,KAAKrB,KAAL,KAAe,EAAjC,EAAqCzD,OAArC,EAA8CuF,WAA9C,CAAb;AACA,cAAG,CAAC/E,MAAMO,OAAN,CAAcuF,MAAd,CAAJ,EAA0B;AACxBhB,mBAAO7B,KAAP,IAAgB6C,MAAhB;AACD;AACF,SALD,MAKM,IAAG,CAACf,YAAYc,QAAhB,EAAyB;AAC7BhB,cAAI5B,KAAJ,IAAa,EAACa,OAAOQ,KAAKrB,KAAL,CAAR,EAAb;AACD;AACF;AACF;;AAED,SAAI,IAAIA,OAAR,IAAiBpD,MAAjB,EAAwB;AACtB,UAAIkF,eAAclF,OAAOoD,OAAP,CAAlB;AACA,UAAI+B,WAAWD,aAAYE,OAA3B;AACA,UAAG,CAACjF,MAAMkF,WAAN,CAAkBF,QAAlB,CAAD,IAAgC,CAACD,aAAYc,QAA7C,IAAyDd,aAAYgB,MAAxE,EAA+E;AAC7ElB,YAAI5B,OAAJ,IAAa;AACXa,iBAAOQ,KAAKrB,OAAL,CADI;AAEXgC,mBAASD;AAFE,SAAb;AAID,OALD,MAKM,IAAG,KAAKG,YAAL,CAAkBJ,YAAlB,CAAH,EAAkC;AACtC,YAAIe,UAAS,KAAKJ,YAAL,CAAkBpB,KAAKrB,OAAL,KAAe,EAAjC,EAAqCzD,OAArC,EAA8CuF,YAA9C,CAAb;AACA,YAAG,CAAC/E,MAAMO,OAAN,CAAcuF,OAAd,CAAJ,EAA0B;AACxBhB,iBAAO7B,OAAP,IAAgB6C,OAAhB;AACD;AACF;AACF;AACDjB,UAAM,yBAAUO,MAAV,CAAiBP,GAAjB,CAAN;AACA,QAAG,CAAC7E,MAAMO,OAAN,CAAcuE,MAAd,CAAJ,EAA0B;AACxBD,YAAM7E,MAAMmB,MAAN,CAAa0D,GAAb,EAAkBC,MAAlB,CAAN;AACD;AACD,WAAOD,GAAP;AACD,G;AACD;;;;;;;;mBAMAmB,W,wBAAY1B,I,EAAK;AACf,WAAOA,IAAP;AACD,G;AACD;;;;;mBAGA2B,U,uBAAWzG,O,EAAQ;AACjB,WAAOA,OAAP;AACD,G;AACD;;;;;;mBAIA0G,S,sBAAU5B,I,EAAK;AACb,WAAOA,IAAP;AACD,G;AACD;;;;;mBAGA6B,Y,yBAAa3G,O,EAAQ;AACnB,WAAOA,OAAP;AACD,G;AACD;;;;;;;mBAKA4G,W,wBAAY9B,I,EAAK;AACf,WAAOA,IAAP;AACD,G;AACD;;;;;;;mBAKAA,I,iBAAKA,K,EAAK;AACR,QAAIA,UAAS,IAAb,EAAmB;AACjB,aAAO,KAAK5D,KAAZ;AACD;AACD,SAAKA,KAAL,GAAa4D,KAAb;AACA,WAAO,IAAP;AACD,G;AACD;;;;;;;mBAKA9E,O,oBAAQA,Q,EAAQ;AACd,QAAI,CAACA,QAAL,EAAc;AACZ,aAAO,KAAKmB,QAAZ;AACD;AACD,SAAKA,QAAL,GAAgBnB,QAAhB;AACA;AACA,QAAGA,SAAQoD,IAAX,EAAgB;AACd,WAAKA,IAAL,CAAUpD,SAAQoD,IAAlB;AACD;AACD,WAAO,IAAP;AACD,G;AACD;;;;;;mBAIAyD,K,oBAAO;AACL,QAAI,KAAK5F,GAAT,EAAc;AACZ,WAAKA,GAAL,CAAS4F,KAAT;AACA,WAAK5F,GAAL,GAAW,IAAX;AACD;AACF,G;;;EAvoB0BT,MAAMsG,I","file":"_base.js","sourcesContent":["'use strict';\n\nimport Validator from '../core/think_validate.js';\n\nlet forceNewNum = 1;\n\n/**\n * base model class\n */\nexport default class extends think.base {\n  /**\n   * init\n   * @param  {} name   []\n   * @param  {} config []\n   * @return {}        []\n   */\n  init(name = '', config = {}){\n\n    let options = {\n      pk: 'id', //primary key\n      name: '', //model name\n      tablePrefix: undefined, //table prefix\n      tableName: '', //table name, without prefix\n      /**\n       * schema\n       * {\n       *   name: {\n       *     type: 'string',\n       *     required: true,\n       *     default: '',\n       *     unique: true,\n       *     primary: true,\n       *     auto_increment: true\n       *   }\n       * }\n       */\n      schema: {}, //table schema\n      /**\n       * table indexes\n       * {\n       *   name: {name: 1, $unique: true}, //single indexes\n       *   test1: {name1: 1, title1: 1, $unique: 1}, //compound indexes\n       * }\n       * @type {Object}\n       */\n      indexes: {}\n      //readonlyFields: []// readonly fields\n    };\n    //if is set in subclass, can't be override\n    for(let key in options){\n      if(this[key] === undefined){\n        this[key] = options[key];\n      }\n    }\n\n    if(think.isObject(name)){\n      config = name;\n      name = '';\n    }\n\n    config = think.parseConfig(true, config);\n    \n    //change property name `name`\n    if(config.name && !config.database){\n      config.database = config.name;\n      delete config.name;\n      think.log(`db.name is deprecated, use db.database instead`, 'WARNING');\n    }\n\n    if(config.pwd && !config.password){\n      config.password = config.pwd;\n      delete config.pwd;\n      think.log(`db.pwd is deprecated, use db.password instead`, 'WARNING');\n    }\n\n    //check property name `fields`\n    if(!think.isEmpty(this.fields)){\n      this.schema = this.fields;\n      delete this.fields;\n      think.log(`fields property is deprecated, use schema instead`, 'WARNING');\n    }\n\n    this.config = config;\n    this._db = null;\n    this._data = {};\n    this._options = {};\n\n    //model name\n    if(name){\n      this.name = name;\n    }\n    // get table prefix from config\n    if (this.config.prefix && this.tablePrefix === undefined) {\n      this.tablePrefix = this.config.prefix;\n    }\n  }\n  /**\n   * get model instance\n   * @param  {String} name    [model name]\n   * @param  {Object} options [options]\n   * @return {Object}         []\n   */\n  model(name, options, module){\n    if(think.isString(options) && think.module.indexOf(options) > -1){\n      module = options;\n      options = {};\n    }\n    module = module || this.parseModuleFromPath();\n    if(think.isString(options)){\n      options = {type: options};\n    }\n    options = think.extend({}, this.config, options);\n    return think.model(name, options, module);\n  }\n  /**\n   * get table prefix\n   * @return {String} []\n   */\n  getTablePrefix(){\n    return this.tablePrefix || '';\n  }\n  /**\n   * get db instance\n   * @return {Object} []\n   */\n  db(forceNew = false){\n    // set db\n    if(think.isObject(forceNew)){\n      this._db = forceNew;\n      return this;\n    }\n    if (this._db && !forceNew && !this.config.parser) {\n      return this._db;\n    }\n    let DB = think.adapter('db', this.config.type || 'mysql');\n    let config = this.config;\n    if(forceNewNum > (Number.MAX_SAFE_INTEGER - 1)){\n      forceNewNum = 1;\n    }\n    if(forceNew){\n      config = think.extend({}, config, {forceNewNum: forceNewNum++});\n    }\n    this._db = new DB(config);\n    return this._db;\n  }\n  /**\n   * get model name\n   * @return {String} []\n   */\n  getModelName(){\n    if (this.name) {\n      return this.name;\n    }\n    let filename = this.__filename || __filename;\n    let last = filename.lastIndexOf(think.sep);\n    this.name = filename.substr(last + 1, filename.length - last - 4);\n    return this.name;\n  }\n  /**\n   * get table name\n   * @return {String} []\n   */\n  getTableName(){\n    if(!this.tableName){\n      this.tableName = this.getModelName();\n    }\n    return this.getTablePrefix() + this.tableName;\n  }\n  /**\n   * set cache options\n   * @param  {String} key     []\n   * @param  {Number} timeout []\n   * @return {}         []\n   */\n  cache(key, timeout = this.config.cache.timeout){\n    if (key === undefined) {\n      return this;\n    }\n    let options;\n    if(!think.isObject(key)){\n      if(think.isNumber(key)){\n        timeout = key;\n        key = '';\n      }\n      options = think.extend({}, this.config.cache, {key, timeout});\n    }else{\n      options = key;\n    }\n    this._options.cache = options;\n    return this;\n  }\n  /**\n   * set limit options\n   * @param  {Number} offset []\n   * @param  {Number} length []\n   * @return {}        []\n   */\n  limit(offset, length){\n    if (offset === undefined) {\n      return this;\n    }\n    if(think.isArray(offset)){\n      length = offset[1] || length;\n      offset = offset[0];\n    }\n    offset = Math.max(parseInt(offset) || 0, 0);\n    if(length){\n      length = Math.max(parseInt(length) || 0, 0);\n    }\n    this._options.limit = [offset, length];\n    return this;\n  }\n  /**\n   * set page options\n   * @param  {Number} page     []\n   * @param  {} listRows []\n   * @return {}          []\n   */\n  page(page, listRows = this.config.nums_per_page){\n    if (page === undefined) {\n      return this;\n    }\n    if(think.isArray(page)){\n      listRows = page[1] || listRows;\n      page = page[0];\n    }\n    page = Math.max(parseInt(page) || 1, 1);\n    listRows = Math.max(parseInt(listRows) || 10, 1);\n    this._options.limit = [listRows * (page - 1), listRows];\n    return this;\n  }\n  /**\n   * set where options\n   * @return {} []\n   */\n  where(where){\n    if (!where) {\n      return this;\n    }\n    if (think.isString(where)) {\n      where = {_string: where};\n    }\n    let options = this._options;\n    if(options.where && think.isString(options.where)){\n      options.where = {_string: options.where};\n    }\n    options.where = think.extend({}, options.where, where);\n    return this;\n  }\n  /**\n   * set field options\n   * @param  {String} field   []\n   * @param  {Boolean} reverse []\n   * @return {}         []\n   */\n  field(field, reverse = false){\n    if(!field){\n      return this;\n    }\n    if (think.isString(field)) {\n      if(field.indexOf(')') === -1){\n        field = field.split(/\\s*,\\s*/);\n      }\n    }\n    this._options.field = field;\n    this._options.fieldReverse = reverse;\n    return this;\n  }\n  /**\n   * set field reverse\n   * @param  {String} field [field list]\n   * @return {Object}       []\n   */\n  fieldReverse(field){\n    return this.field(field, true);\n  }\n  /**\n   * set table name\n   * @param  {String} table []\n   * @return {}       []\n   */\n  table(table, hasPrefix){\n    if (!table) {\n      return this;\n    }\n    table = table.trim();\n    //table is sql, `SELECT * FROM`\n    if (table.indexOf(' ') > -1) {\n      hasPrefix = true;\n    }\n    this._options.table = hasPrefix ? table : this.getTablePrefix() + table;\n    return this;\n  }\n  /**\n   * union options\n   * @param  {} union []\n   * @param  {} all   []\n   * @return {}       []\n   */\n  union(union, all = false){\n    if (!union) {\n      return this;\n    }\n    if (!this._options.union) {\n      this._options.union = [];\n    }\n    this._options.union.push({\n      union: union,\n      all: all\n    });\n    return this;\n  }\n  /**\n   * .join({\n   *   'xxx': {\n   *     join: 'left',\n   *     as: 'c',\n   *     on: ['id', 'cid']\n   *   }\n   * })\n   * @param  {[type]} join [description]\n   * @return {[type]}      [description]\n   */\n  join(join){\n    if (!join) {\n      return this;\n    }\n    if (!this._options.join) {\n      this._options.join = [];\n    }\n    if (think.isArray(join)) {\n      this._options.join = this._options.join.concat(join);\n    }else{\n      this._options.join.push(join);\n    }\n    return this;\n  }\n  /**\n   * set order options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  order(value){\n    this._options.order = value;\n    return this;\n  }\n  /**\n   * set table alias\n   * @param  {String} value []\n   * @return {}       []\n   */\n  alias(value){\n    this._options.alias = value;\n    return this;\n  }\n  /**\n   * set having options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  having(value){\n    this._options.having = value;\n    return this;\n  }\n  /**\n   * set group options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  group(value){\n    this._options.group = value;\n    return this;\n  }\n  /**\n   * set lock options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  lock(value){\n    this._options.lock = value;\n    return this;\n  }\n  /**\n   * set auto options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  auto(value){\n    this._options.auto = value;\n    return this;\n  }\n  /**\n   * set filter options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  filter(value){\n    this._options.filter = value;\n    return this;\n  }\n  /**\n   * set distinct options\n   * @param  {String} data []\n   * @return {}      []\n   */\n  distinct(data){\n    this._options.distinct = data;\n    if (think.isString(data)) {\n      this._options.field = data;\n    }\n    return this;\n  }\n  /**\n   * set explain\n   * @param  {Boolean} explain []\n   * @return {}         []\n   */\n  explain(explain){\n    this._options.explain = explain;\n    return this;\n  }\n  /**\n   * options filter\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  optionsFilter(options){\n    return options;\n  }\n  /**\n   * data filter\n   * @param  {Object} data []\n   * @return {}      []\n   */\n  dataFilter(data){\n    return data;\n  }\n  /**\n   * before add\n   * @param  {Object} data []\n   * @return {}      []\n   */\n  beforeAdd(data, options, schema){\n    \n    //for addMany invoked\n    if(think.isArray(data)){\n      return data.map(item => {\n        return this.beforeAdd(item, options);\n      });\n    }\n\n    let ret = {};\n    let extRet = {};\n    schema = schema || this.schema;\n    //fields in schema\n    for(let field in schema){\n      let fieldSchema = schema[field];\n      let _default = fieldSchema.default;\n      //default value is setted\n      if(!think.isTrueEmpty(_default)){\n        ret[field] = {\n          value: data[field],\n          default: _default\n        };\n      }else{\n        if(this._isSubSchema(fieldSchema)){\n          extRet[field] = this.beforeAdd(data[field] || {}, options, fieldSchema);\n        }\n      }\n    }\n    for(let field in data){\n      if(!ret[field] && !extRet[field]){\n        ret[field] = {\n          value: data[field]\n        };\n      }\n    }\n    ret = Validator.values(ret);\n    if(!think.isEmpty(extRet)){\n      ret = think.extend(ret, extRet);\n    }\n    return ret;\n  }\n  /**\n   * check is sub schema\n    // meta: {\n    //   createAt: {\n    //     default: ()=>new Date()\n    //   },\n    //   updateAt: {\n    //     default: ()=>new Date()\n    //   }\n    // }\n   * @param  {Mixed}  schema []\n   * @return {Boolean}        []\n   */\n  _isSubSchema(schema){\n    if(!schema || !think.isObject(schema)){\n      return false;\n    }\n    let keys = Object.keys(schema);\n    return keys.length && keys.every(key => think.isObject(schema[key]));\n  }\n  /**\n   * after add\n   * @param  {} data []\n   * @return {}      []\n   */\n  afterAdd(data){\n    return data;\n  }\n  /**\n   * before delete\n   */\n  beforeDelete(options){\n    return options;\n  }\n  /**\n   * after delete\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n  afterDelete(data){\n    return data;\n  }\n  /**\n   * before update\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n  beforeUpdate(data, options, schema){\n    //check property readonlyFields\n    if(!think.isEmpty(this.readonlyFields)){\n      let ret = {};\n      this.readonlyFields.forEach(item => {\n        ret[item] = {readonly: true};\n      });\n      delete this.readonlyFields;\n      this.schema = think.extend(ret, this.schema);\n      think.log(`readonlyFields property is deprecated, use schema[field].readonly instead`, 'WARNING');\n    }\n\n    let ret = {};\n    let extRet = {};\n    schema = schema || this.schema;\n\n    for(let field in data){\n      let fieldSchema = schema[field];\n      if(!fieldSchema){\n        ret[field] = {value: data[field]};\n      }else{\n        if(this._isSubSchema(fieldSchema)){\n          let result = this.beforeUpdate(data[field] || {}, options, fieldSchema);\n          if(!think.isEmpty(result)){\n            extRet[field] = result;\n          }\n        }else if(!fieldSchema.readonly){\n          ret[field] = {value: data[field]};\n        }\n      }\n    }\n\n    for(let field in schema){\n      let fieldSchema = schema[field];\n      let _default = fieldSchema.default;\n      if(!think.isTrueEmpty(_default) && !fieldSchema.readonly && fieldSchema.update){\n        ret[field] = {\n          value: data[field],\n          default: _default\n        };\n      }else if(this._isSubSchema(fieldSchema)){\n        let result = this.beforeUpdate(data[field] || {}, options, fieldSchema);\n        if(!think.isEmpty(result)){\n          extRet[field] = result;\n        }\n      }\n    }\n    ret = Validator.values(ret);\n    if(!think.isEmpty(extRet)){\n      ret = think.extend(ret, extRet);\n    }\n    return ret;\n  }\n  /**\n   * after update\n   * @param  {} data    []\n   * @param  {} options []\n   * @return {}         []\n   */\n  afterUpdate(data){\n    return data;\n  }\n  /**\n   * before find\n   */\n  beforeFind(options){\n    return options;\n  }\n  /**\n   * after find\n   * @return {} []\n   */\n  afterFind(data){\n    return data;\n  }\n  /**\n   * before select\n   */\n  beforeSelect(options){\n    return options;\n  }\n  /**\n   * after select\n   * @param  {Mixed} result []\n   * @return {}        []\n   */\n  afterSelect(data){\n    return data;\n  }\n  /**\n   * set data\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n  data(data){\n    if (data === true) {\n      return this._data;\n    }\n    this._data = data;\n    return this;\n  }\n  /**\n   * set options\n   * @param  {Mixed} options []\n   * @return {}         []\n   */\n  options(options){\n    if (!options) {\n      return this._options;\n    }\n    this._options = options;\n    //page to limit\n    if(options.page){\n      this.page(options.page);\n    }\n    return this;\n  }\n  /**\n   * close db socket\n   * @return {} []\n   */\n  close(){\n    if (this._db) {\n      this._db.close();\n      this._db = null;\n    }\n  }\n}"]}