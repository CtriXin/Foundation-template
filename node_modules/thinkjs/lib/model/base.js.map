{"version":3,"sources":["../../src/model/base.js"],"names":["getSchema","table","getTableName","storeKey","config","type","schema","schema_force_update","db","thinkCache","TABLE","name","primary","pk","think","extend","getTableFields","log","getUniqueField","data","unique","getLastSql","getPk","resolve","then","buildSql","options","noParentheses","parseOptions","sql","buildSelectSql","trim","oriOpts","extraOptions","_options","isObject","tablePrefix","getTablePrefix","model","getModelName","alias","undefined","parseWhereOptions","where","isEmpty","keyReg","key","test","msg","Error","locale","reject","field","fieldReverse","optionsField","filter","indexOf","item","optionsFilter","isNumber","isString","IN","parseType","value","fieldType","parseInt","parseFloat","parseData","val","isBoolean","dataFilter","add","replace","_data","parsedData","beforeAdd","insertId","getLastInsertId","copyData","afterAdd","thenAdd","find","findData","thenUpdate","update","addMany","isArray","promises","map","all","insertIds","i","id","length","push","delete","beforeDelete","rows","afterDelete","beforeUpdate","afterUpdate","updateMany","dataList","reduce","a","b","increment","step","decrement","limit","beforeFind","select","afterFind","beforeSelect","afterSelect","selectAdd","promise","Class","module","exports","default","fields","countSelect","pageFlag","count","order","nums_per_page","numsPerPage","totalPage","Math","ceil","currentPage","result","totalPages","cache","getField","one","multi","split","forEach","every","fItem","_getQuoteField","sum","min","max","avg","query","parseSql","execute","format","toLowerCase","startTrans","commit","close","_db","rollback","transaction","fn","co"],"mappings":"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","file":"base.js","sourcesContent":["'use strict';\n\nimport util from 'util';\nimport Base from './_base.js';\n\n/**\n * model base class\n * @type {Class}\n */\nexport default class extends Base {\n  /**\n   * get table schema\n   * @param  {String} table [table name]\n   * @return {}       []\n   */\n  async getSchema(table){\n    table = table || this.getTableName();\n    let storeKey = `${this.config.type}_${table}_schema`;\n    let schema = {};\n    //force update table schema\n    if(this.config.schema_force_update){\n      schema = await this.db().getSchema(table);\n    }else{\n      schema = thinkCache(thinkCache.TABLE, storeKey);\n      if(!schema){\n        schema = await this.db().getSchema(table);\n        thinkCache(thinkCache.TABLE, storeKey, schema);\n      }\n    }\n    if(table !== this.getTableName()){\n      return schema;\n    }\n    //get primary key\n    for(let name in schema){\n      if(schema[name].primary){\n        this.pk = name;\n        break;\n      }\n    }\n    //merge user set schema config\n    this.schema = think.extend({}, schema, this.schema);\n    return this.schema;\n  }\n  /**\n   * get table fields\n   * @param  {String} table []\n   * @return {Promise}       []\n   */\n  getTableFields(table){\n    think.log('model.getTableFields is deprecated, use model.getSchema instead.', 'WARNING');\n    return this.getSchema(table);\n  }\n  /**\n   * get unique field\n   * @param  {Object} data []\n   * @return {Promise}      []\n   */\n  async getUniqueField(data){\n    let schema = await this.getSchema();\n    for(let name in schema){\n      if(schema[name].unique && (!data || data[name])){\n        return name;\n      }\n    }\n  }\n  /**\n   * get last sql\n   * @return {Promise} []\n   */\n  getLastSql(){\n    return this.db().getLastSql();\n  }\n  /**\n   * get primary key\n   * @return {Promise} []\n   */\n  getPk(){\n    if(this.pk !== 'id'){\n      return Promise.resolve(this.pk);\n    }\n    return this.getSchema().then(() => this.pk);\n  }\n  /**\n   * build sql\n   * @param  {[type]} options [description]\n   * @return {[type]}         [description]\n   */\n  async buildSql(options, noParentheses){\n    options = await this.parseOptions(options);\n    let sql = this.db().buildSelectSql(options).trim();\n    if(noParentheses){\n      return sql;\n    }\n    return '( ' + sql + ' )';\n  }\n  /**\n   * parse options\n   * @param  {Object} options []\n   * @return promise         []\n   */\n  async parseOptions(oriOpts, extraOptions){\n    let options = think.extend({}, this._options);\n    if (think.isObject(oriOpts)) {\n      options = think.extend(options, oriOpts);\n    }\n    if(extraOptions){\n      options = think.extend(options, extraOptions);\n    }\n    //clear options\n    this._options = {};\n    //get table name\n    options.table = options.table || this.getTableName();\n\n    options.tablePrefix = this.getTablePrefix();\n    options.model = this.getModelName();\n\n    //get table schema can not use table alias\n    let schema = await this.getSchema(options.table);\n\n    //table alias\n    if (options.alias) {\n      options.table += ' AS ' + options.alias;\n    }\n\n    if(oriOpts !== undefined && !think.isObject(oriOpts)){\n      options = think.extend(options, this.parseWhereOptions(oriOpts));\n    }\n    //check where key\n    if(options.where && !think.isEmpty(schema)){\n      let keyReg = /^[\\w\\.\\|\\&]+$/;\n      for(let key in options.where){\n        if(!keyReg.test(key)){\n          let msg = new Error(think.locale('FIELD_KEY_NOT_VALID', key));\n          return think.reject(msg);\n        }\n      }\n    }\n    //field reverse\n    if(options.field && options.fieldReverse){\n      //reset fieldReverse value\n      options.fieldReverse = false;\n      let optionsField = options.field;\n      options.field = Object.keys(schema).filter(item => {\n        if(optionsField.indexOf(item) === -1){\n          return item;\n        }\n      });\n    }\n    return this.optionsFilter(options, schema);\n  }\n  /**\n   * parse where options\n   * @return {Object}\n   */\n  parseWhereOptions(options){\n    if (think.isNumber(options) || think.isString(options)) {\n      options += '';\n      let where = {\n        [this.pk]: options.indexOf(',') > -1 ? {IN: options} : options\n      };\n      return {where: where};\n    }\n    return options;\n  }\n  /**\n   * parse type\n   * @param  {Object} data []\n   * @param  {} key  []\n   * @return {}      []\n   */\n  parseType(key, value){\n    let fieldType = this.schema[key].type || '';\n    if(fieldType.indexOf('enum') > -1 || fieldType.indexOf('set') > -1){\n      return value;\n    }\n    if (fieldType.indexOf('bigint') === -1 && fieldType.indexOf('int') > -1) {\n      return parseInt(value, 10) || 0;\n    }else if(fieldType.indexOf('double') > -1 || fieldType.indexOf('float') > -1){\n      return parseFloat(value) || 0.0;\n    }else if(fieldType.indexOf('bool') > -1){\n      return !!value;\n    }\n    return value;\n  }\n  /**\n   * parse data, after fields getted\n   * @param  {} data []\n   * @return {}      []\n   */\n  parseData(data){\n    //deep clone data\n    data = think.extend({}, data);\n    for(let key in data){\n      let val = data[key];\n      //remove data not in fields\n      if (!this.schema[key]) {\n        delete data[key];\n      }else if(think.isNumber(val) || think.isString(val) || think.isBoolean(val)){\n        data[key] = this.parseType(key, val);\n      }\n    }\n    return this.dataFilter(data);\n  }\n  /**\n   * add data\n   * @param {Object} data    []\n   * @param {Object} options []\n   * @param {} replace []\n   */\n  async add(data, options, replace){\n    if (options === true) {\n      replace = true;\n      options = {};\n    }\n    //copy data\n    data = think.extend({}, this._data, data);\n    //clear data\n    this._data = {};\n\n    options = await this.parseOptions(options);\n\n    let parsedData = this.parseData(data);\n    parsedData = await this.beforeAdd(parsedData, options);\n    if (think.isEmpty(parsedData)) {\n      let msg = new Error(think.locale('DATA_EMPTY'));\n      return think.reject(msg);\n    }\n\n    let db = this.db();\n    await db.add(parsedData, options, replace);\n    let insertId = parsedData[this.pk] = db.getLastInsertId();\n    let copyData = think.extend({}, data, parsedData, {[this.pk]: insertId});\n    await this.afterAdd(copyData, options);\n    return insertId;\n  }\n  /**\n   * add data when not exist\n   * @param  {Object} data       []\n   * @param  {Object} where      []\n   * @return {}            []\n   */\n  async thenAdd(data, where){\n    let findData = await this.where(where).find();\n    if(!think.isEmpty(findData)){\n      return {[this.pk]: findData[this.pk], type: 'exist'};\n    }\n    let insertId = await this.add(data);\n    return {[this.pk]: insertId, type: 'add'};\n  }\n  /**\n   * update data when exist, otherwise add data\n   * @return {id}\n   */\n  async thenUpdate(data, where){\n    let findData = await this.where(where).find();\n    if(think.isEmpty(findData)){\n      return this.add(data);\n    }\n    await this.where(where).update(data);\n    return findData[this.pk];\n  }\n  /**\n   * add multi data\n   * @param {Object} data    []\n   * @param {} options []\n   * @param {} replace []\n   */\n  async addMany(data, options, replace){\n    if (!think.isArray(data) || !think.isObject(data[0])) {\n      return think.reject(new Error(think.locale('DATA_MUST_BE_ARRAY')));\n    }\n    if (options === true) {\n      replace = true;\n      options = {};\n    }\n    options = await this.parseOptions(options);\n    let promises = data.map(item => {\n      item = this.parseData(item);\n      return this.beforeAdd(item, options);\n    });\n    data = await Promise.all(promises);\n    let db = this.db();\n    await db.addMany(data, options, replace);\n    let insertId = db.getLastInsertId();\n    let insertIds = [];\n    promises = data.map((item, i) => {\n      let id = insertId + i;\n      if(this.config.type === 'sqlite'){\n        id = insertId - data.length + i + 1;\n      }\n      item[this.pk] = id;\n      insertIds.push(id);\n      return this.afterAdd(item, options);\n    });\n    data = await Promise.all(promises);\n    return insertIds;\n  }\n  /**\n   * delete data\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n  async delete(options){\n    options = await this.parseOptions(options);\n    options = await this.beforeDelete(options);\n    let rows = await this.db().delete(options);\n    await this.afterDelete(options);\n    return rows;\n  }\n  /**\n   * update data\n   * @param  {Object} data      []\n   * @param  {Object} options   []\n   * @param  {Boolean} ignoreWhere []\n   * @return {Promise}          []\n   */\n  async update(data, options){\n\n    data = think.extend({}, this._data, data);\n    //clear data\n    this._data = {};\n\n    options = await this.parseOptions(options);\n\n    let parsedData = this.parseData(data);\n\n    //check where condition\n    if(think.isEmpty(options.where)){\n      //get where condition from data\n      let pk = await this.getPk();\n      if(parsedData[pk]){\n        options.where = {[pk]: parsedData[pk]};\n        delete parsedData[pk];\n      }else{\n        return think.reject(new Error(think.locale('MISS_WHERE_CONDITION')));\n      }\n    }\n\n    parsedData = await this.beforeUpdate(parsedData, options);\n    //check data is empty\n    if (think.isEmpty(parsedData)) {\n      return think.reject(new Error(think.locale('DATA_EMPTY')));\n    }\n\n    let rows = await this.db().update(parsedData, options);\n    let copyData = think.extend({}, data, parsedData);\n    await this.afterUpdate(copyData, options);\n    return rows;\n  }\n  /**\n   * update all data\n   * @param  {Array} dataList []\n   * @return {Promise}          []\n   */\n  updateMany(dataList, options){\n    if (!think.isArray(dataList)) {\n      //empty data and options\n      this._options = {};\n      this._data = {};\n\n      return think.reject(new Error(think.locale('DATA_MUST_BE_ARRAY')));\n    }\n    let promises = dataList.map(data => {\n      return this.update(data, options);\n    });\n    return Promise.all(promises).then(data => {\n      return data.reduce((a, b) => a + b);\n    });\n  }\n  /**\n   * increment field data\n   * @return {Promise} []\n   */\n  increment(field, step = 1){\n    let data = {\n      [field]: ['exp', `\\`${field}\\`+${step}`]\n    };\n    return this.update(data);\n  }\n  /**\n   * decrement field data\n   * @return {} []\n   */\n  decrement(field, step = 1){\n    let data = {\n      [field]: ['exp', `\\`${field}\\`-${step}`]\n    };\n    return this.update(data);\n  }\n  /**\n   * find data\n   * @return Promise\n   */\n  async find(options){\n    options = await this.parseOptions(options, {limit: 1});\n    options = await this.beforeFind(options);\n    let data = await this.db().select(options);\n    return this.afterFind(data[0] || {}, options);\n  }\n  /**\n   * select\n   * @return Promise\n   */\n  async select(options){\n    options = await this.parseOptions(options);\n    options = await this.beforeSelect(options);\n    let data = await this.db().select(options);\n    return this.afterSelect(data, options);\n  }\n  /**\n   * select add\n   * @param  {} options []\n   * @return {Promise}         []\n   */\n  async selectAdd(options){\n    let promise = Promise.resolve(options);\n    let Class = module.exports.default || module.exports;\n    if (options instanceof Class) {\n      promise = options.parseOptions();\n    }\n    let data = await Promise.all([this.parseOptions(), promise]);\n    let fields = data[0].field || Object.keys(this.schema);\n    return this.db().selectAdd(fields, data[0].table, data[1]);\n  }\n  /**\n   * count select\n   * @param  options\n   * @param  pageFlag\n   * @return promise\n   */\n  async countSelect(options, pageFlag){\n    let count;\n    if (think.isBoolean(options)) {\n      pageFlag = options;\n      options = {};\n    }else if(think.isNumber(options)){\n      count = options;\n      options = {};\n    }\n\n    options = await this.parseOptions(options);\n    let pk = this.pk;\n    let table = options.alias || this.getTableName();\n\n    //delete table options avoid error when has alias\n    delete options.table;\n    //reserve and delete the possible order option\n    let order = options.order;\n    delete options.order;\n\n    if(!count){\n      count = await this.options(options).count(`${table}.${pk}`);\n    }\n\n    options.limit = options.limit || [0, this.config.nums_per_page];\n    //recover the deleted possible order\n    options.order = order;\n    let numsPerPage = options.limit[1];\n    //get page options\n    let data = {numsPerPage: numsPerPage};\n    let totalPage = Math.ceil(count / data.numsPerPage);\n\n    data.currentPage = parseInt((options.limit[0] / options.limit[1]) + 1);\n\n    if (think.isBoolean(pageFlag) && data.currentPage > totalPage) {\n      if(pageFlag){\n        data.currentPage = 1;\n        options.limit = [0, numsPerPage];\n      }else{\n        data.currentPage = totalPage;\n        options.limit = [(totalPage - 1) * numsPerPage, numsPerPage];\n      }\n    }\n    let result = think.extend({count: count, totalPages: totalPage}, data);\n\n    if(options.cache && options.cache.key){\n      options.cache.key += '_count';\n    }\n    result.data = count ? await this.select(options) : [];\n    return result;\n  }\n  /**\n   * get field data\n   * @return {[type]} [description]\n   */\n  async getField(field, one){\n    let options = await this.parseOptions({'field': field});\n    if (think.isNumber(one)) {\n      options.limit = one;\n    }else if (one === true) {\n      options.limit = 1;\n    }\n    let data = await this.db().select(options);\n    let multi = field.indexOf(',') > -1 && field.indexOf('(') === -1;\n    if (multi) {\n      let fields = field.split(/\\s*,\\s*/);\n      let result = {};\n      fields.forEach(item => result[item] = []);\n      data.every(item => {\n        fields.forEach(fItem => {\n          if (one === true) {\n            result[fItem] = item[fItem];\n          }else{\n            result[fItem].push(item[fItem]);\n          }\n        });\n        return one !== true;\n      });\n      return result;\n    }else{\n      data = data.map(item => {\n        for(let key in item){\n          return item[key];\n        }\n      });\n      return one === true ? data[0] : data;\n    }\n  }\n  /**\n   * get quote field\n   * @param  {String} field []\n   * @return {String}       []\n   */\n  async _getQuoteField(field){\n    if(field){\n      return /^\\w+$/.test(field) ? '`' + field + '`' : field;\n    }\n    return await this.getPk() || '*';\n  }\n  /**\n   * get count\n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n  async count(field){\n    field = await this._getQuoteField(field);\n    return this.getField('COUNT(' + field + ') AS think_count', true);\n  }\n  /**\n   * get sum\n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n  async sum(field){\n    field = await this._getQuoteField(field);\n    return this.getField('SUM(' + field + ') AS think_sum', true);\n  }\n  /**\n   * get min value\n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n  async min(field){\n    field = await this._getQuoteField(field);\n    return this.getField('MIN(' + field + ') AS think_min', true);\n  }\n  /**\n   * get max valud\n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n  async max(field){\n    field = await this._getQuoteField(field);\n    return this.getField('MAX(' + field + ') AS think_max', true);\n  }\n  /**\n   * get value average\n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n  async avg(field){\n    field = await this._getQuoteField(field);\n    return this.getField('AVG(' + field + ') AS think_avg', true);\n  }\n  /**\n   * query\n   * @return {Promise} []\n   */\n  query(...args){\n    let sql = this.parseSql(...args);\n    return this.db().select(sql, this._options.cache);\n  }\n  /**\n   * execute sql\n   * @param  {[type]} sql   [description]\n   * @param  {[type]} parse [description]\n   * @return {[type]}       [description]\n   */\n  execute(...args){\n    let sql = this.parseSql(...args);\n    return this.db().execute(sql);\n  }\n  /**\n   * parse sql\n   * @return promise [description]\n   */\n  parseSql(...args){\n    let sql = util.format(...args);\n    //replace table name\n    return sql.replace(/\\s__([A-Z]+)__\\s/g, (a, b) => {\n      if(b === 'TABLE'){\n        return ' `' + this.getTableName() + '` ';\n      }\n      return ' `' + this.getTablePrefix() + b.toLowerCase() + '` ';\n    });\n  }\n  /**\n   * start transaction\n   * @return {Promise} []\n   */\n  startTrans(){\n    return this.db(true).startTrans();\n  }\n  /**\n   * commit transcation\n   * @return {Promise} []\n   */\n  async commit(){\n    let data = await this.db().commit();\n    this.close();\n    this._db = null;\n    return data;\n  }\n  /**\n   * rollback transaction\n   * @return {Promise} []\n   */\n  async rollback(){\n    let data = await this.db().rollback();\n    this.close();\n    this._db = null;\n    return data;\n  }\n  /**\n   * transaction exec functions\n   * @param  {Function} fn [exec function]\n   * @return {Promise}      []\n   */\n  async transaction(fn){\n    let result;\n    await this.startTrans();\n    try{\n      result = await think.co(fn());\n      await this.commit();\n    }catch(e){\n      await this.rollback();\n    }\n    return result;\n  }\n}\n"]}