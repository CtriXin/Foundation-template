{"version":3,"sources":["../../src/middleware/check_resource.js"],"names":["run","pathname","http","config","decodeURIComponent","replace","e","reg","test","file","think","RESOURCE_PATH","indexOf","isFile","middleware","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA;;;;AAEA;;;;;;;;;;;;;AAME;;;;mBAIAA,G,kBAAK;AACH,QAAIC,WAAW,KAAKC,IAAL,CAAUD,QAAzB;AACA,QAAI,CAAC,KAAKE,MAAL,CAAY,aAAZ,CAAD,IAA+B,CAACF,QAAhC,IAA4CA,aAAa,GAA7D,EAAkE;AAChE,aAAO,IAAP;AACD;AACD;AACA,QAAG;AACDA,iBAAWG,mBAAmBH,QAAnB,EAA6BI,OAA7B,CAAqC,KAArC,EAA4C,GAA5C,CAAX;AACD,KAFD,CAEC,OAAMC,CAAN,EAAQ;AACP,aAAO,IAAP;AACD;AACDL,eAAW,qBAAUA,QAAV,CAAX;AACA;AACAA,eAAWA,SAASI,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAX;AACA,QAAIE,MAAM,KAAKJ,MAAL,CAAY,cAAZ,CAAV;AACA,QAAI,CAACI,IAAIC,IAAJ,CAASP,QAAT,CAAL,EAAyB;AACvB,aAAO,IAAP;AACD;AACD,QAAIQ,OAAO,qBAAaC,MAAMC,aAAnB,SAAoCV,QAApC,CAAX;AACA,QAAGQ,KAAKG,OAAL,CAAaF,MAAMC,aAAnB,MAAsC,CAAzC,EAA2C;AACzC,aAAO,IAAP;AACD;AACD;AACA,QAAID,MAAMG,MAAN,CAAaJ,IAAb,CAAJ,EAAwB;AACtB,aAAOA,IAAP;AACD,KAFD,MAEK;AACH,aAAO,IAAP;AACD;AACF,G;;;EAjC0BC,MAAMI,UAAN,CAAiBC,I","file":"check_resource.js","sourcesContent":["'use strict';\n\nimport { normalize } from 'path';\n\n/**\n * resource check\n * @param  {}            \n * @return {}     []\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {Promise} []\n   */\n  run(){\n    let pathname = this.http.pathname;\n    if (!this.config('resource_on') || !pathname || pathname === '/') {\n      return null;\n    }\n    // pathname maybe not valid, then throw an `URI malformed` error\n    try{\n      pathname = decodeURIComponent(pathname).replace(/\\\\/g, '/');\n    }catch(e){\n      return null;\n    }\n    pathname = normalize(pathname);\n    // replace \\ to / on windows\n    pathname = pathname.replace(/\\\\/g, '/');\n    let reg = this.config('resource_reg');\n    if (!reg.test(pathname)) {\n      return null;\n    }\n    let file = normalize(`${think.RESOURCE_PATH}/${pathname}`);\n    if(file.indexOf(think.RESOURCE_PATH) !== 0){\n      return null;\n    }\n    //resource exist\n    if (think.isFile(file)) {\n      return file;\n    }else{\n      return true;\n    }\n  }\n}"]}