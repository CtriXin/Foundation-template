{"version":3,"sources":["../../src/middleware/parse_route.js"],"names":["run","cleanPathname","config","parsePathname","rules","think","route","isEmpty","parse","isArray","parseRules","module","reg","test","http","pathname","children","length","match","item","rule","i","getRoute","isRegExp","parseRegExpRule","checkUrlMatch","parseRoute","slice","parseModule","defaultModule","mode","mode_normal","pos","indexOf","mod","substr","dirname","common","getModule","parseController","subControllers","thinkData","subController","controller","getController","action","getAction","paths","split","shift","parseExtPath","error","Error","locale","url","statusAction","name","Math","ceil","_get","decodeURIComponent","plength","pitem","toLowerCase","key","isString","method","toUpperCase","urlInfo","query","matches","replace","a","b","checkLowerCase","value","lower","log","colors","yellow","middleware","base"],"mappings":"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","file":"parse_route.js","sourcesContent":["'use strict';\n\nimport url from 'url';\n\n/**\n * route array rules:\n * [\n *   [/^user\\/(\\d+)/, 'home/user/detail?id=:1'],\n *   [/^usr\\/(\\d+)/, {\n *     get: 'home/user/detail?id=:1',\n *     post: 'home/user/delete?id=:1'\n *   }],\n *   ...\n * ]\n *\n * route object rules:\n * {\n *   admin: {\n *     reg: /^admin/,\n *     children: [\n *       \n *     ]\n *   }\n * }\n */\n\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {Promise} []\n   */\n  run(){\n    this.cleanPathname();\n\n    if (!this.config('route_on')) {\n      return this.parsePathname();\n    }\n\n    let rules = think.route();\n    if(think.isEmpty(rules)){\n      return this.parsePathname();\n    }\n    return this.parse(rules);\n  }\n  /**\n   * parse routes\n   * @param  {Array} routes [routes]\n   * @return {}        []\n   */\n  parse(rules){\n    if(think.isArray(rules)){\n      return this.parseRules(rules);\n    }\n    for(let module in rules){\n      let reg = rules[module].reg;\n      if(!reg || reg.test(this.http.pathname)){\n        this.module = module;\n        return this.parseRules(rules[module].children);\n      }\n    }\n    return this.parsePathname();\n  }\n  /**\n   * parse array rules\n   * @param  {Array} rules []\n   * @return {}       []\n   */\n  parseRules(rules){\n    let length = rules.length;\n    let pathname = this.http.pathname;\n    if (length === 0 || !pathname) {\n      return this.parsePathname();\n    }\n    let match, item, route, rule;\n    for(let i = 0; i < length; i++){\n      item = rules[i];\n      route = this.getRoute(item[1]);\n      if (!route) {\n        continue;\n      }\n      rule = item[0];\n      //regexp route\n      if (think.isRegExp(rule)) {\n        match = pathname.match(rule);\n        if (match) {\n          return this.parseRegExpRule(match, route);\n        }\n      }\n      //is string route\n      else if (this.checkUrlMatch(rule)) {\n        return this.parseRoute(route);\n      }\n    }\n    return this.parsePathname();\n  }\n  /**\n   * remove / start | end of pathname\n   * @return {} []\n   */\n  cleanPathname(){\n    let pathname = this.http.pathname;\n    if(pathname === '/'){\n      this.http.pathname = '';\n      return;\n    }\n    if (pathname[0] === '/') {\n      pathname = pathname.slice(1);\n    }\n    if (pathname.slice(-1) === '/') {\n      pathname = pathname.slice(0, -1);\n    }\n    this.http.pathname = pathname;\n  }\n  /**\n   * get module from pathname\n   * @return {String} []\n   */\n  parseModule(){\n    let defaultModule = think.config('default_module');\n    if(think.mode === think.mode_normal){\n      return defaultModule;\n    }\n    let http = this.http;\n    let pathname = http.pathname;\n    let pos = pathname.indexOf('/');\n    let mod = pos === -1 ? pathname : pathname.substr(0, pos);\n    if(this.module){\n      if(this.module === mod){\n        http.pathname = pathname.substr(mod.length + 1);\n      }else {\n        mod = this.module;\n      }\n    }else if (mod && mod !== think.dirname.common && think.module.indexOf(mod) > -1) {\n      http.pathname = pathname.substr(mod.length + 1);\n    }else{\n      mod = '';\n    }\n    return this.getModule(mod);\n  }\n  /**\n   * get controller from pathname\n   * @return {} []\n   */\n  parseController(module){\n    let subControllers = thinkData.subController[module];\n    let http = this.http;\n    let pathname = http.pathname;\n    if(!pathname){\n      return '';\n    }\n    let pos = pathname.indexOf('/');\n    //search sub controller\n    if(pos > -1 && subControllers){\n      for(let i = 0, length = subControllers.length, item; i < length; i++){\n        item = subControllers[i];\n        if(pathname === item || pathname.indexOf(item + '/') === 0){\n          http.pathname = http.pathname.substr(item.length + 1);\n          return item;\n        }\n      } \n    }\n    let controller = pos === -1 ? pathname : pathname.substr(0, pos);\n    http.pathname = http.pathname.substr(controller.length + 1);\n    return controller;\n  }\n  /**\n   * parse pathname\n   * @return {} []\n   */\n  parsePathname(){\n    let http = this.http;\n    if (!http.pathname) {\n      this.http.module = this.getModule();\n      this.http.controller = this.getController();\n      this.http.action = this.getAction();\n      return;\n    }\n    let module = this.parseModule();\n    let controller = this.parseController(module);\n    let paths = http.pathname.split('/');\n    let action = paths.shift();\n\n    this.parseExtPath(paths);\n\n    this.http.module = module; //module not need check\n    this.http.controller = this.getController(controller);\n    this.http.action = this.getAction(action);\n\n    if (!this.http.controller) {\n      this.http.error = new Error(think.locale('CONTROLLER_INVALID', controller, this.http.url));\n      return think.statusAction(400, http);\n    }\n    if (!this.http.action) {\n      this.http.error = new Error(think.locale('ACTION_INVALID', action, this.http.url));\n      return think.statusAction(400, http);\n    }\n  }\n  /**\n   * parse extra path\n   * @param  {Array} paths [extra path]\n   * @return {}       []\n   */\n  parseExtPath(paths){\n    if (paths.length === 0) {\n      return;\n    }\n    if (!think.isArray(paths)) {\n      if (paths[0] === '/') {\n        paths = paths.slice(1);\n      }\n      paths = paths.split('/');\n    }\n    for(let i = 0, name, length = Math.ceil(paths.length) / 2; i < length; i++){\n      name = paths[i * 2];\n      if(name){\n        this.http._get[name] = decodeURIComponent(paths[i * 2 + 1] || '');\n      }\n    }\n  }\n  /**\n   * check url is match\n   * @param  {String} rule [url rule]\n   * @return {Boolean}      []\n   */\n  checkUrlMatch(rule){\n    let pathname = this.http.pathname.split('/');\n    rule = rule.split('/');\n    let i = 0, length = rule.length, plength = pathname.length, item, pitem;\n    //if rule lenth is more than pathname, it will be false\n    if (length > plength) {\n      return false;\n    }\n    let match = {};\n    for(; i < length; i++){\n      item = rule[i];\n      pitem = pathname[i];\n      if (item.indexOf(':') === 0) {\n        match[item.slice(1)] = pitem;\n      }else{\n        if (pitem.toLowerCase() !== item.toLowerCase()) {\n          return false;\n        }\n      }\n    }\n    //append match data to this.http._get\n    for(let key in match){\n      this.http._get[key] = match[key];\n    }\n    if (plength > length) {\n      this.parseExtPath(pathname.slice(length));\n    }\n    return true;\n  }\n  /**\n   * get route\n   * @param  {Object} route   []\n   * @param  {Array} matches []\n   * @return {[type]}         []\n   */\n  getRoute(route){\n    if (think.isString(route)) {\n      return route;\n    }\n    for(let method in route){\n      if (method.toUpperCase().indexOf(this.http.method) > -1) {\n        return route[method];\n      }\n    }\n    return '';\n  }\n  /**\n   * parse route string\n   * @param  {String} route []\n   * @return {}       []\n   */\n  parseRoute(route){\n    if (route.indexOf('?') > -1) {\n      let urlInfo = url.parse(route, true);\n      let query = urlInfo.query;\n      for(let key in query){\n        if (query[key] || !(key in this.http._get)) {\n          this.http._get[key] = query[key];\n        }\n      }\n      route = urlInfo.pathname;\n    }\n    if (route[0] === '/') {\n      route = route.slice(1);\n    }\n    this.http.pathname = route;\n    return this.parsePathname();\n  }\n  /**\n   * parse regexp rule\n   * @param  {Array} matches  [route matches]\n   * @param  {String | Object} route    [route]\n   * @return {Boolean}          []\n   */\n  parseRegExpRule(matches, route){\n    //replace :1, :2 in route\n    //such as: group/detail?date=:1&groupId=:2&page=:3\n    route = route.replace(/:(\\d+)/g, (a, b) => (matches[b] || ''));\n    let pathname = this.http.pathname.slice(matches[0].length);\n    this.parseExtPath(pathname);\n    this.parseRoute(route);\n  }\n  /**\n   * check value is lowerCase\n   * @param  {String} value []\n   * @return {}       []\n   */\n  checkLowerCase(value){\n    // if value has - chars, not check, for REST API\n    if(value.indexOf('-') > -1){\n      return;\n    }\n    let lower = value.toLowerCase();\n    if(value !== lower){\n      think.log(colors => {\n        return colors.yellow('[WARNING]') + ` ` + think.locale('URL_HAS_UPPERCASE', value);\n      });\n    }\n  }\n  /**\n   * get module name\n   * @param  {String} module []\n   * @return {String}        []\n   */\n   getModule(module){\n    if (!module || think.mode === think.mode_normal) {\n      return think.config('default_module');\n    }\n    this.checkLowerCase(module);\n    return module.toLowerCase();\n  }\n  /**\n   * get controller name\n   * @param  {String} controller []\n   * @return {String}            []\n   */\n  getController(controller){\n    if (!controller) {\n      return think.config('default_controller');\n    }\n    //has / in controller\n    if (/^[\\w\\/]+$/.test(controller)) {\n      this.checkLowerCase(controller);\n      return controller.toLowerCase();\n    }\n    return '';\n  }\n  /**\n   * get action\n   * @param  {String} action [action name]\n   * @return {String}        []\n   */\n  getAction(action){\n    if (!action) {\n      return think.config('default_action');\n    }\n    // action name support `-` char, for REST API\n    // /api/system/3b6c279c-bd61-f093-c543-56f9ab4300b7\n    if (/^[\\w\\-]+$/.test(action)) {\n      this.checkLowerCase(action);\n      return action.toLowerCase();\n    }\n    return '';\n  }\n}"]}