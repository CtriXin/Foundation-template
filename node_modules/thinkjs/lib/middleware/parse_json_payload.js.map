{"version":3,"sources":["../../src/middleware/parse_json_payload.js"],"names":["run","http","req","readable","types","config","indexOf","type","getPayload","then","data","JSON","parse","payload","e","think","log","Error","isEmpty","_post","extend","middleware","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA;;;;;;AAEA;;;;;;;;;;;;AAKE;;;;mBAIAA,G,kBAAK;AACH,QAAIC,OAAO,KAAKA,IAAhB;AACA,QAAG,CAACA,KAAKC,GAAL,CAASC,QAAb,EAAsB;AACpB;AACD;;AAED,QAAIC,QAAQH,KAAKI,MAAL,CAAY,wBAAZ,CAAZ;AACA,QAAID,MAAME,OAAN,CAAcL,KAAKM,IAAL,EAAd,MAA+B,CAAC,CAApC,EAAuC;AACrC;AACD;AACD,WAAON,KAAKO,UAAL,GAAkBC,IAAlB,CAAuB,mBAAW;AACvC,UAAIC,aAAJ;AACA,UAAG;AACDA,eAAOC,KAAKC,KAAL,CAAWC,OAAX,CAAP;AACD,OAFD,CAEC,OAAMC,CAAN,EAAQ;AACP;AACA,YAAGb,KAAKI,MAAL,CAAY,gBAAZ,CAAH,EAAiC;AAC/BU,gBAAMC,GAAN,CAAU,IAAIC,KAAJ,CAAU,oDAAV,CAAV;AACD;AACD;AACA;AACAP,eAAO,sBAAYE,KAAZ,CAAkBC,OAAlB,CAAP;AACD;AACD,UAAG,CAACE,MAAMG,OAAN,CAAcR,IAAd,CAAJ,EAAwB;AACtBT,aAAKkB,KAAL,GAAaJ,MAAMK,MAAN,CAAanB,KAAKkB,KAAlB,EAAyBT,IAAzB,CAAb;AACD;AACD,aAAO,IAAP;AACD,KAjBM,CAAP;AAkBD,G;;;EAjC0BK,MAAMM,UAAN,CAAiBC,I","file":"parse_json_payload.js","sourcesContent":["'use strict';\n\nimport querystring from 'querystring';\n\n/**\n * parse json payload\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    if(!http.req.readable){\n      return;\n    }\n\n    let types = http.config('post.json_content_type');\n    if (types.indexOf(http.type()) === -1) {\n      return;\n    }\n    return http.getPayload().then(payload => {\n      let data;\n      try{\n        data = JSON.parse(payload);\n      }catch(e){\n        //log error\n        if(http.config('post.log_error')){\n          think.log(new Error('JSON.parse error, payload is not a valid JSON data'));\n        }\n        //if using json parse error, then use querystring parse.\n        //sometimes http header has json content-type, but payload data is querystring data\n        data = querystring.parse(payload);\n      }\n      if(!think.isEmpty(data)){\n        http._post = think.extend(http._post, data);\n      }\n      return null;\n    });\n  }\n}"]}