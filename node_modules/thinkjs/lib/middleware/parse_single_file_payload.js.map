{"version":3,"sources":["../../src/middleware/parse_single_file_payload.js"],"names":["run","http","req","readable","post","config","filename","header","single_file_header","uploadDir","file_upload_path","tmpdir","think","sep","mkdir","getUploadFile","deferred","defer","name","uuid","filepath","extname","slice","stream","createWriteStream","pipe","on","res","statusCode","end","log","err","_file","file","fieldName","originalFilename","path","size","statSync","resolve","promise","middleware","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;AAKE;;;;mBAIAA,G,kBAAK;AACH,QAAIC,OAAO,KAAKA,IAAhB;;AAEA,QAAG,CAACA,KAAKC,GAAL,CAASC,QAAb,EAAsB;AACpB;AACD;;AAED,QAAIC,OAAO,KAAKC,MAAL,CAAY,MAAZ,CAAX;AACA,QAAIC,WAAWL,KAAKM,MAAL,CAAYH,KAAKI,kBAAjB,CAAf;AACA,QAAG,CAACF,QAAJ,EAAa;AACX;AACD;;AAED,QAAIG,YAAYL,KAAKM,gBAArB;AACA,QAAG,CAACD,SAAJ,EAAc;AACZA,kBAAY,aAAGE,MAAH,KAAcC,MAAMC,GAApB,GAA0B,SAA1B,GAAsCD,MAAMC,GAA5C,GAAkD,QAA9D;AACD;AACDD,UAAME,KAAN,CAAYL,SAAZ;;AAEA,WAAO,KAAKM,aAAL,CAAmBN,SAAnB,EAA8BH,QAA9B,CAAP;AACD,G;AACD;;;;;;;;mBAMAS,a,0BAAcN,S,EAAWH,Q,EAAS;AAChC,QAAIU,WAAWJ,MAAMK,KAAN,EAAf;AACA,QAAIhB,OAAO,KAAKA,IAAhB;AACA,QAAIiB,OAAON,MAAMO,IAAN,CAAW,EAAX,CAAX;AACA,QAAIC,WAAWX,YAAYG,MAAMC,GAAlB,GAAwBK,IAAxB,GAA+B,eAAKG,OAAL,CAAaf,QAAb,EAAuBgB,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,CAA9C;AACA,QAAIC,SAAS,aAAGC,iBAAH,CAAqBJ,QAArB,CAAb;AACAnB,SAAKC,GAAL,CAASuB,IAAT,CAAcF,MAAd;AACAA,WAAOG,EAAP,CAAU,OAAV,EAAmB,eAAO;AACxBzB,WAAK0B,GAAL,CAASC,UAAT,GAAsB,GAAtB;AACA3B,WAAK4B,GAAL;AACA;AACA,UAAG5B,KAAKI,MAAL,CAAY,gBAAZ,CAAH,EAAiC;AAC/BO,cAAMkB,GAAN,CAAUC,GAAV;AACD;AACF,KAPD;AAQAR,WAAOG,EAAP,CAAU,OAAV,EAAmB,YAAM;AACvBzB,WAAK+B,KAAL,CAAWC,IAAX,GAAkB;AAChBC,mBAAW,MADK;AAEhBC,0BAAkB7B,QAFF;AAGhB8B,cAAMhB,QAHU;AAIhBiB,cAAM,aAAGC,QAAH,CAAYlB,QAAZ,EAAsBiB;AAJZ,OAAlB;AAMArB,eAASuB,OAAT,CAAiB,IAAjB;AACD,KARD;AASA,WAAOvB,SAASwB,OAAhB;AACD,G;;;EAzD0B5B,MAAM6B,UAAN,CAAiBC,I","file":"parse_single_file_payload.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\n/**\n * parse single file payload, uploaded with ajax\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n\n    if(!http.req.readable){\n      return;\n    }\n\n    let post = this.config('post');\n    let filename = http.header(post.single_file_header);\n    if(!filename){\n      return;\n    }\n    \n    let uploadDir = post.file_upload_path;\n    if(!uploadDir){\n      uploadDir = os.tmpdir() + think.sep + 'thinkjs' + think.sep + 'upload';\n    }\n    think.mkdir(uploadDir);\n\n    return this.getUploadFile(uploadDir, filename);\n  }\n  /**\n   * get upload file\n   * @param  {String} uploadDir []\n   * @param  {String} filename  []\n   * @return {Promise}           []\n   */\n  getUploadFile(uploadDir, filename){\n    let deferred = think.defer();\n    let http = this.http;\n    let name = think.uuid(20);\n    let filepath = uploadDir + think.sep + name + path.extname(filename).slice(0, 5);\n    let stream = fs.createWriteStream(filepath);\n    http.req.pipe(stream);\n    stream.on('error', err => {\n      http.res.statusCode = 400;\n      http.end();\n      //log error\n      if(http.config('post.log_error')){\n        think.log(err);\n      }\n    });\n    stream.on('close', () => {\n      http._file.file = {\n        fieldName: 'file',\n        originalFilename: filename,\n        path: filepath,\n        size: fs.statSync(filepath).size\n      };\n      deferred.resolve(null);\n    });\n    return deferred.promise;\n  }\n}"]}