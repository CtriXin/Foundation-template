{"version":3,"sources":["../../src/middleware/parse_form_payload.js"],"names":["MULTIPARTY_REG","run","http","req","readable","test","headers","uploadDir","think","config","tmpdir","sep","mkdir","getFormData","deferred","defer","postConfig","form","Form","maxFieldsSize","max_fields_size","maxFields","max_fields","maxFilesSize","max_file_size","files","_file","on","name","value","isArray","push","_post","resolve","resume","res","statusCode","end","log","err","parse","promise","middleware","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;;;AAGA,IAAMA,iBAAiB,qEAAvB;;AAEA;;;;;;;;;;;;;AAKE;;;;mBAIAC,G,kBAAK;AACH,QAAIC,OAAO,KAAKA,IAAhB;AACA,QAAG,CAACA,KAAKC,GAAL,CAASC,QAAb,EAAsB;AACpB;AACD;;AAED;AACA;AACA,QAAI,CAACJ,eAAeK,IAAf,CAAoBH,KAAKI,OAAL,CAAa,cAAb,CAApB,CAAL,EAAwD;AACtD;AACD;;AAED;AACA,QAAIC,YAAYC,MAAMC,MAAN,CAAa,uBAAb,CAAhB;AACA,QAAG,CAACF,SAAJ,EAAc;AACZA,kBAAY,aAAGG,MAAH,KAAcF,MAAMG,GAApB,GAA0B,SAA1B,GAAsCH,MAAMG,GAA5C,GAAkD,QAA9D;AACD;AACDH,UAAMI,KAAN,CAAYL,SAAZ;;AAEA,WAAO,KAAKM,WAAL,CAAiBN,SAAjB,CAAP;AACD,G;AACD;;;;;;mBAIAM,W,wBAAYN,S,EAAU;AACpB,QAAIL,OAAO,KAAKA,IAAhB;AACA,QAAIY,WAAWN,MAAMO,KAAN,EAAf;AACA,QAAIC,aAAaR,MAAMC,MAAN,CAAa,MAAb,CAAjB;AACA,QAAIQ,OAAO,IAAI,qBAAWC,IAAf,CAAoB;AAC7BC,qBAAeH,WAAWI,eADG;AAE7BC,iBAAWL,WAAWM,UAFO;AAG7BC,oBAAcP,WAAWQ,aAHI;AAI7BjB,iBAAWA;AAJkB,KAApB,CAAX;AAMA;AACA,QAAIkB,QAAQvB,KAAKwB,KAAjB;AACAT,SAAKU,EAAL,CAAQ,MAAR,EAAgB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC/B,UAAID,QAAQH,KAAZ,EAAmB;AACjB,YAAI,CAACjB,MAAMsB,OAAN,CAAcL,MAAMG,IAAN,CAAd,CAAL,EAAiC;AAC/BH,gBAAMG,IAAN,IAAc,CAACH,MAAMG,IAAN,CAAD,CAAd;AACD;AACDH,cAAMG,IAAN,EAAYG,IAAZ,CAAiBF,KAAjB;AACD,OALD,MAKK;AACHJ,cAAMG,IAAN,IAAcC,KAAd;AACD;AACF,KATD;AAUAZ,SAAKU,EAAL,CAAQ,OAAR,EAAiB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAChC3B,WAAK8B,KAAL,CAAWJ,IAAX,IAAmBC,KAAnB;AACD,KAFD;AAGAZ,SAAKU,EAAL,CAAQ,OAAR,EAAiB,YAAM;AACrBb,eAASmB,OAAT,CAAiB,IAAjB;AACD,KAFD;AAGAhB,SAAKU,EAAL,CAAQ,OAAR,EAAiB,eAAO;AACtBzB,WAAKC,GAAL,CAAS+B,MAAT;AACAhC,WAAKiC,GAAL,CAASC,UAAT,GAAsB,GAAtB;AACAlC,WAAKmC,GAAL;AACA;AACA,UAAGnC,KAAKO,MAAL,CAAY,gBAAZ,CAAH,EAAiC;AAC/BD,cAAM8B,GAAN,CAAUC,GAAV;AACD;AACF,KARD;AASAtB,SAAKuB,KAAL,CAAWtC,KAAKC,GAAhB;AACA,WAAOW,SAAS2B,OAAhB;AACD,G;;;EArE0BjC,MAAMkC,UAAN,CAAiBC,I","file":"parse_form_payload.js","sourcesContent":["'use strict';\n\nimport os from 'os';\nimport multiparty from 'multiparty';\n\n\nconst MULTIPARTY_REG = /^multipart\\/(form-data|related);\\s*boundary=(?:\"([^\"]+)\"|([^;]+))$/i;\n\n/**\n * parse form payload\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    if(!http.req.readable){\n      return;\n    }\n\n    //file upload by form or FormData\n    //can not use http.type method\n    if (!MULTIPARTY_REG.test(http.headers['content-type'])) {\n      return;\n    }\n\n    //make upload file path\n    let uploadDir = think.config('post.file_upload_path');\n    if(!uploadDir){\n      uploadDir = os.tmpdir() + think.sep + 'thinkjs' + think.sep + 'upload';\n    }\n    think.mkdir(uploadDir);\n\n    return this.getFormData(uploadDir);\n  }\n  /**\n   * get form data\n   * @return {Promise} []\n   */\n  getFormData(uploadDir){\n    let http = this.http;\n    let deferred = think.defer();\n    let postConfig = think.config('post');\n    let form = new multiparty.Form({\n      maxFieldsSize: postConfig.max_fields_size,\n      maxFields: postConfig.max_fields,\n      maxFilesSize: postConfig.max_file_size,\n      uploadDir: uploadDir\n    });\n    //support for file with multiple=\"multiple\"\n    let files = http._file;\n    form.on('file', (name, value) => {\n      if (name in files) {\n        if (!think.isArray(files[name])) {\n          files[name] = [files[name]];\n        }\n        files[name].push(value);\n      }else{\n        files[name] = value;\n      }\n    });\n    form.on('field', (name, value) => {\n      http._post[name] = value;\n    });\n    form.on('close', () => {\n      deferred.resolve(null);\n    });\n    form.on('error', err => {\n      http.req.resume();\n      http.res.statusCode = 400;\n      http.end();\n      //log error\n      if(http.config('post.log_error')){\n        think.log(err);\n      }\n    });\n    form.parse(http.req);\n    return deferred.promise;\n  }\n}"]}