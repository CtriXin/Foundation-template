{"version":3,"sources":["../../src/core/http_base.js"],"names":["init","http","config","name","value","module","parseModuleFromPath","think","_config","_transMCAAction","controller","action","source","mode","mode_module","__filename","split","sep","reverse","basename","camelCase","err","invoke","catch","e","result","extend","reject","transMCA","isString","cache","options","type","hook","event","data","exec","_getModule","Error","indexOf","model","undefined","Cls","lookClass","service"],"mappings":"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","file":"http_base.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * Base Class\n * @param  {Object} http\n * @return {Class}\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  init(http = {}){\n    this.http = http;\n  }\n  /**\n   * get or set config\n   * @param  {string} name  [config name]\n   * @param  {mixed} value [config value]\n   * @return {mixed}       []\n   */\n  config(name, value){\n    let module = this.parseModuleFromPath();\n    if(module){\n      return think.config(name, value, module);\n    }\n    return think.config(name, value, this.http._config);\n  }\n  /**\n   * change module/controller/action when invoked action\n   * @param  {Object} controller []\n   * @param  {String} action     []\n   * @return {Promise}            []\n   */\n  async _transMCAAction(controller, action){\n    //change module/controller/action when invoke another action\n    //make this.display() correct when invoked without any paramters\n    let http = this.http;\n    let source = {\n      module: http.module,\n      controller: http.controller,\n      action: http.action\n    };\n    //parse module from pathname\n    http.module = think.config('default_module');\n    if(think.mode === think.mode_module){\n      http.module = controller.__filename.split(think.sep).reverse()[2];\n    }\n\n    http.controller = this.basename(controller.__filename);\n    http.action = action;\n    if (action !== '__call') {\n      action = think.camelCase(action) + 'Action';\n    }\n    let err;\n    let result = await controller.invoke(action, controller).catch(e => {\n      err = e;\n    });\n    think.extend(http, source);\n    return err ? Promise.reject(err) : result;\n  }\n  /**\n   * invoke action\n   * @param  {Object} controller [controller instance]\n   * @param  {String} action     [action name]\n   * @param  {Mixed} data       [action params]\n   * @return {}            []\n   */\n  action(controller, action, transMCA = true){\n    if (think.isString(controller)) {\n      controller = this.controller(controller);\n    }\n    if(!transMCA){\n      if (action !== '__call') {\n        action = think.camelCase(action) + 'Action';\n      }\n      return controller.invoke(action, controller);\n    }\n    return this._transMCAAction(controller, action);\n  }\n  /**\n   * get or set cache\n   * @param  {String} name    [cache name]\n   * @param  {mixed} value   [cache value]\n   * @param  {Object} options [cache options]\n   * @return {}         []\n   */\n  cache(name, value, options){\n    if(think.isString(options)){\n      options = {type: options};\n    }\n    options = think.extend({}, this.config('cache'), options);\n    return think.cache(name, value, options);\n  }\n  /**\n   * invoke hook\n   * @param  {String} event [event name]\n   * @return {Promise}       []\n   */\n  hook(event, data){\n    return think.hook.exec(event, this.http, data);\n  }\n  /**\n   * get module\n   * @param  {String} module []\n   * @return {String}        []\n   */\n  _getModule(module){\n    if(module){\n      if(!think.isString(module)){\n        throw new Error('module argument must be string');\n      }\n      if(think.module.indexOf(module) === -1){\n        throw new Error('module `' + module + '` not exist');\n      }\n    }else{\n      module = this.parseModuleFromPath() || this.http.module;\n    }\n    return module;\n  }\n  /**\n   * get model\n   * @param  {String} name    [model name]\n   * @param  {Object} options [model options]\n   * @return {Object}         [model instance]\n   */\n  model(name = 'base', options, module){\n    if(think.isString(options)){\n      options = {type: options};\n    }\n    module = this._getModule(module);\n    options = think.extend({}, think.config('db', undefined, module), options);\n    return think.model(name, options, module);\n  }\n  /**\n   * get controller\n   * this.controller('home/controller/test')\n   * @param  {String} name [controller name]\n   * @return {Object}      []\n   */\n  controller(name, module){\n    module = this._getModule(module);\n    let Cls = think.lookClass(name, 'controller', module);\n    return new Cls(this.http);\n  }\n  /**\n   * get service\n   * @param  {String} name [service name]\n   * @return {Object}      []\n   */\n  service(name, module){\n    module = this._getModule(module);\n    return think.service(name, this.http, module);\n  }\n}"]}