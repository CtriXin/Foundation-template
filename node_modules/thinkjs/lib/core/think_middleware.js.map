{"version":3,"sources":["../../src/core/think_middleware.js"],"names":["Middleware","args","superClass","methods","data","length","think","isString","isFunction","thinkData","middleware","isHttp","exec","get","create","thinkCache","COLLECTION","Class","middlware","name","cls","require","Error","locale","http","fn","prototype","run","instance","co","Cls","err","reject"],"mappings":"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","file":"think_middleware.js","sourcesContent":["'use strict';\n\n/**\n * create or exec middleware\n * @param  {Function} superClass []\n * @param  {Object} methods      []\n * @return {mixed}            []\n */\nlet Middleware = (...args) => {\n  let [superClass, methods, data] = args;\n  let length = args.length;\n\n  // register functional or class middleware\n  // think.middleware('parsePayLoad', function(){})\n  if (think.isString(superClass) && think.isFunction(methods)) {\n    thinkData.middleware[superClass] = methods;\n    return;\n  }\n  // exec middleware\n  // think.middleware('parsePayLoad', http, data)\n  if (length >= 2 && think.isHttp(methods)) {\n    return Middleware.exec(superClass, methods, data);\n  }\n  // get middleware\n  // think.middleware('parsePayLoad')\n  if (length === 1 && think.isString(superClass)) {\n    return Middleware.get(superClass);\n  }\n  return Middleware.create(superClass, methods);\n};\n\n/**\n * create middleware\n * @param  {Class} superClass []\n * @param  {Object} methods    []\n * @return {Class}            []\n */\nMiddleware.create = (superClass, methods) => {\n  let middleware = thinkCache(thinkCache.COLLECTION, 'middleware');\n  if (!middleware) {\n    middleware = think.Class('middleware');\n    thinkCache(thinkCache.COLLECTION, 'middleware', middleware);\n  }\n  // create middleware\n  return middleware(superClass, methods);\n};\n\n/**\n * get middleware\n * @param  {String} name []\n * @return {Class}      []\n */\nMiddleware.get = name => {\n  let middlware = thinkData.middleware[name];\n  if(middlware){\n    return middlware;\n  }\n  let cls = think.require('middleware_' + name, true);\n  if (cls) {\n    return cls;\n  }\n  throw new Error(think.locale('MIDDLEWARE_NOT_FOUND', name));\n};\n\n/**\n * exec middleware\n * @param  {String} name []\n * @param  {Object} http []\n * @param  {Mixed} data []\n * @return {Promise}      []\n */\nMiddleware.exec = (name, http, data) => {\n  if (think.isString(name)) {\n    let fn = thinkData.middleware[name];\n    // name is in middleware cache\n    if (fn) {\n      //class middleware must have run method\n      if(fn.prototype.run){\n        let instance = new fn(http);\n        return think.co(instance.run(data));\n      }else{\n        return think.co(fn(http, data));\n      }\n    }else{\n      let Cls = think.require('middleware_' + name, true);\n      if(Cls){\n        let instance = new Cls(http);\n        return think.co(instance.run(data));\n      }\n      let err = new Error(think.locale('MIDDLEWARE_NOT_FOUND', name));\n      return Promise.reject(err);\n    }\n  }\n  return think.co(name(http, data));\n};\n\nexport default Middleware;"]}