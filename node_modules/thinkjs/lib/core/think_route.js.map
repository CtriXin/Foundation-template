{"version":3,"sources":["../../src/core/think_route.js"],"names":["_getDynamicRoute","think","co","fn","then","route","thinkData","_getModuleRoute","module","config","filepath","getPath","dirname","moduleConfig","safeRequire","children","_getRoute","file","undefined","isFunction","isObject","mode","mode_module","Route","routes","isArray"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAIA,mBAAmB,SAAnBA,gBAAmB,KAAM;AAC3B,SAAOC,MAAMC,EAAN,CAASC,IAAT,EAAeC,IAAf,CAAoB,YAAgB;AAAA,QAAfC,KAAe,uEAAP,EAAO;;AACzCC,cAAUD,KAAV,GAAkBA,KAAlB;AACA,WAAOA,KAAP;AACD,GAHM,CAAP;AAID,CALD;;AAOA,IAAIE,kBAAkB,SAAlBA,eAAkB,SAAU;AAC9B,OAAI,IAAIC,MAAR,IAAkBC,MAAlB,EAAyB;AACvB,QAAIC,WAAWT,MAAMU,OAAN,CAAcH,MAAd,EAAsBP,MAAMW,OAAN,CAAcH,MAApC,IAA8C,WAA7D;AACA,QAAII,eAAeZ,MAAMa,WAAN,CAAkBJ,QAAlB,CAAnB;AACAD,WAAOD,MAAP,EAAeO,QAAf,GAA0BF,gBAAgB,EAA1C;AACD;AACDP,YAAUD,KAAV,GAAkBI,MAAlB;AACA,SAAOA,MAAP;AACD,CARD;AASA;;;;;AAKA,IAAIO,YAAY,SAAZA,SAAY,GAAM;AACpB,MAAIC,OAAOhB,MAAMU,OAAN,CAAcO,SAAd,EAAyBjB,MAAMW,OAAN,CAAcH,MAAvC,IAAiD,WAA5D;AACA,MAAIA,SAASR,MAAMa,WAAN,CAAkBG,IAAlB,KAA2B,EAAxC;;AAEA;AACA,MAAIhB,MAAMkB,UAAN,CAAiBV,MAAjB,CAAJ,EAA8B;AAC5B,WAAOT,iBAAiBS,MAAjB,CAAP;AACD;AACD;AACA,MAAGR,MAAMmB,QAAN,CAAeX,MAAf,KAA0BR,MAAMoB,IAAN,KAAepB,MAAMqB,WAAlD,EAA8D;AAC5D,WAAOf,gBAAgBE,MAAhB,CAAP;AACD;AACDH,YAAUD,KAAV,GAAkBI,MAAlB;AACA,SAAOA,MAAP;AACD,CAdD;;AAgBA,IAAIc,QAAQ,SAARA,KAAQ,SAAU;AACpB;AACA,MAAGC,WAAW,IAAd,EAAmB;AACjBlB,cAAUD,KAAV,GAAkB,IAAlB;AACA;AACD;AACD;AACA,MAAIJ,MAAMwB,OAAN,CAAcD,MAAd,KAAyBvB,MAAMmB,QAAN,CAAeI,MAAf,CAA7B,EAAqD;AACnDlB,cAAUD,KAAV,GAAkBmB,MAAlB;AACA;AACD;AACD;AACA,MAAIlB,UAAUD,KAAd,EAAqB;AACnB,WAAOC,UAAUD,KAAjB;AACD;AACD,SAAOW,WAAP;AACD,CAhBD;;kBAkBeO,K","file":"think_route.js","sourcesContent":["'use strict';\n\n/**\n * load route\n * route detail config\n *\n * module.exports = {\n *   admin: {\n *     reg: /^admin/, //module reg\n *     children: [\n *       /^admin\\/reg/, 'admin/index/reg'\n *     ]\n *   },\n *   home: {\n *     children: [\n *       \n *     ]\n *   }\n * }\n * \n * @return {} []\n */\nlet _getDynamicRoute = fn => {\n  return think.co(fn()).then((route = []) => {\n    thinkData.route = route;\n    return route;\n  });\n};\n\nlet _getModuleRoute = config => {\n  for(let module in config){\n    let filepath = think.getPath(module, think.dirname.config) + '/route.js';\n    let moduleConfig = think.safeRequire(filepath);\n    config[module].children = moduleConfig || [];\n  }\n  thinkData.route = config;\n  return config;\n};\n/**\n * get route\n * @param  {} key []\n * @return {}     []\n */\nlet _getRoute = () => {\n  let file = think.getPath(undefined, think.dirname.config) + '/route.js';\n  let config = think.safeRequire(file) || [];\n\n  //route config is funciton, may be is dynamic save in db\n  if (think.isFunction(config)) {\n    return _getDynamicRoute(config);\n  }\n  //get module route config\n  if(think.isObject(config) && think.mode === think.mode_module){\n    return _getModuleRoute(config);\n  }\n  thinkData.route = config;\n  return config;\n};\n\nlet Route = routes => {\n  //remove route\n  if(routes === null){\n    thinkData.route = null;\n    return;\n  }\n  //set route\n  if (think.isArray(routes) || think.isObject(routes)) {\n    thinkData.route = routes;\n    return;\n  }\n  //get route\n  if (thinkData.route) {\n    return thinkData.route;\n  }\n  return _getRoute();\n};\n\nexport default Route;"]}