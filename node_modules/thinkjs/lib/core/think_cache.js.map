{"version":3,"sources":["../../src/core/think_cache.js"],"names":["global","thinkCache","type","name","value","undefined","think","isString","MEMORY","VIEW","VIEW_CONTENT","DB","TABLE","SESSION","REDIS","MEMCACHE","TIMER","AUTO_RELOAD","COLLECTION","WEBSOCKET","LIMIT","APP"],"mappings":"AAAA;;AAEA;;;;;AAIAA,OAAOC,UAAP,GAAoB,UAACC,IAAD,EAAOC,IAAP,EAAaC,KAAb,EAAuB;AACzCF,eAAWA,IAAX;AACA,MAAI,CAACD,WAAWC,IAAX,CAAL,EAAuB;AACrBD,eAAWC,IAAX,IAAmB,EAAnB;AACD;AACD;AACA,MAAIC,SAASE,SAAb,EAAwB;AACtB,WAAOJ,WAAWC,IAAX,CAAP;AACD;AACD;AACA,MAAGC,SAAS,IAAZ,EAAiB;AACfF,eAAWC,IAAX,IAAmB,EAAnB;AACA;AACD;AACD;AACA,MAAIE,UAAUC,SAAd,EAAyB;AACvB,QAAIC,MAAMC,QAAN,CAAeJ,IAAf,CAAJ,EAA0B;AACxB,aAAOF,WAAWC,IAAX,EAAiBC,IAAjB,CAAP;AACD;AACDF,eAAWC,IAAX,IAAmBC,IAAnB;AACA;AACD;AACD;AACA,MAAIC,UAAU,IAAd,EAAoB;AAClB,WAAOH,WAAWC,IAAX,EAAiBC,IAAjB,CAAP;AACA;AACD;AACD;AACAF,aAAWC,IAAX,EAAiBC,IAAjB,IAAyBC,KAAzB;AACD,CA7BD;AA8BA;;;;AAIA;;;;AAIAH,WAAWO,MAAX,GAAoB,QAApB;AACA;;;;AAIAP,WAAWQ,IAAX,GAAkB,MAAlB;AACA;;;;AAIAR,WAAWS,YAAX,GAA0B,cAA1B;AACA;;;;AAIAT,WAAWU,EAAX,GAAgB,IAAhB;AACA;;;;AAIAV,WAAWW,KAAX,GAAmB,OAAnB;AACA;;;;AAIAX,WAAWY,OAAX,GAAqB,SAArB;AACA;;;;AAIAZ,WAAWa,KAAX,GAAmB,OAAnB;AACA;;;;AAIAb,WAAWc,QAAX,GAAsB,UAAtB;AACA;;;;AAIAd,WAAWe,KAAX,GAAmB,OAAnB;AACA;;;;AAIAf,WAAWgB,WAAX,GAAyB,aAAzB;AACA;;;;AAIAhB,WAAWiB,UAAX,GAAwB,YAAxB;AACA;;;;AAIAjB,WAAWkB,SAAX,GAAuB,WAAvB;AACA;;;;AAIAlB,WAAWmB,KAAX,GAAmB,OAAnB;AACA;;;;AAIAnB,WAAWoB,GAAX,GAAiB,KAAjB","file":"think_cache.js","sourcesContent":["'use strict';\n\n/**\n * global memory cache\n * @type {Object}\n */\nglobal.thinkCache = (type, name, value) => {\n  type = `_${type}`;\n  if (!thinkCache[type]) {\n    thinkCache[type] = {};\n  }\n  // get cache\n  if (name === undefined) {\n    return thinkCache[type];\n  }\n  //remove cache\n  if(name === null){\n    thinkCache[type] = {};\n    return;\n  }\n  // get cache\n  if (value === undefined) {\n    if (think.isString(name)) {\n      return thinkCache[type][name];\n    }\n    thinkCache[type] = name;\n    return;\n  }\n  //remove cache\n  if (value === null) {\n    delete thinkCache[type][name];\n    return;\n  }\n  //set cache\n  thinkCache[type][name] = value;\n};\n/**\n * cache type\n * @type {String}\n */\n/**\n * memory cache\n * @type {String}\n */\nthinkCache.MEMORY = 'memory';\n/**\n * store controller/action template file\n * @type {String}\n */\nthinkCache.VIEW = 'view';\n/**\n * store view content\n * @type {String}\n */\nthinkCache.VIEW_CONTENT = 'view_content';\n/**\n * store db instance\n * @type {String}\n */\nthinkCache.DB = 'db';\n/**\n * store table info\n * @type {String}\n */\nthinkCache.TABLE = 'table';\n/**\n * memory session\n * @type {String}\n */\nthinkCache.SESSION = 'session';\n/**\n * store redis instance\n * @type {String}\n */\nthinkCache.REDIS = 'redis';\n/**\n * store memcache instance\n * @type {String}\n */\nthinkCache.MEMCACHE = 'memcache';\n/**\n * think timer\n * @type {String}\n */\nthinkCache.TIMER = 'timer';\n/**\n * file auto reload\n * @type {String}\n */\nthinkCache.AUTO_RELOAD = 'auto_reload';\n/**\n * think collection class or function\n * @type {String}\n */\nthinkCache.COLLECTION = 'collection';\n/**\n * store websockets\n * @type {String}\n */\nthinkCache.WEBSOCKET = 'websocket';\n/**\n * store limit instance\n * @type {String}\n */\nthinkCache.LIMIT = 'limit';\n/**\n * app use\n * @type {String}\n */\nthinkCache.APP = 'app';"]}