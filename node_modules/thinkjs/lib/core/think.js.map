{"version":3,"sources":["../../src/core/think.js"],"names":["enabled","global","think","sep","startTime","Date","now","dirname","config","controller","model","adapter","logic","service","view","middleware","runtime","common","bootstrap","locale","env","port","cli","lang","process","LANG","split","replace","toLowerCase","isMaster","mode","mode_normal","mode_module","THINK_LIB_PATH","normalize","__dirname","THINK_PATH","version","packageFile","JSON","parse","readFileSync","module","base","reject","err","setTimeout","log","isHttp","obj","isObject","req","res","validate","hook","route","getModuleConfig","undefined","co","next","resolve","wrap","Class","type","clean","isFunction","superClass","methods","isString","lookClass","require","_getClass","name","clsPath","cls","list","i","length","names","indexOf","getPath","prefix","mod","APP_PATH","_loadRequire","filepath","safeRequire","prototype","__filename","thinkData","export","flag","Cls","alias","_interopSafeRequire","file","__esModule","default","isAbsolute","isFile","parseConfig","configs","onlyMerge","slice","map","extend","adapterConfig","parser","ret","preventMessage","prevent","Error","isPrevent","isError","message","msg","showTime","dateTime","gray","datetime","preError","thinkCache","COLLECTION","console","error","red","stack","isArray","isNumber","time","green","warn","yellow","exit","cyan","paths","slash","forEach","files","getFiles","path","gc","instance","gcType","timers","TIMER","on","timer","setInterval","filter","interval","_http","data","test","url","httpVersion","method","toUpperCase","headers","host","connection","remoteAddress","ip","empty","statusCode","end","close","write","send","setHeader","http","execFlag","run","_cli","App","appInstance","uuid","str","randomBytes","Math","ceil","toString","session","_session","sessionOptions","secret","cookie","unsign","_cookie","sessionCookie","newCookie","options","sign","conf","isConfig","cache","value","get","delete","set","key","locales","defaultLang","langLocale","defaultLangLocale","isEmpty","enLocale","en","format","_awaitInstance","await","callback","_dynamicInstall","pkgWithVersion","pkg","cmd","deferred","defer","exec","cwd","ROOT_PATH","promise","npm","e","addon","isPromise","catch","errors","reg","pos","prev","siteMessage","statusAction","status","_error","invoke","waterfall","dataList","itemFn","parallelLimit","limit","array","Limit","LIMIT","add","addMany","ignoreError"],"mappings":"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","file":"think.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\nimport util from 'util';\nimport crypto from 'crypto';\nimport querystring from 'querystring';\nimport child_process from 'child_process';\nimport cluster from 'cluster';\n\nimport thinkit from 'thinkit';\nimport co from 'co';\nimport colors from 'colors/safe';\n\nimport base from './base.js';\nimport httpBase from './http_base.js';\nimport Cookie from '../util/cookie.js';\nimport Http from './http.js';\nimport Await from '../util/await.js';\nimport Validate from './think_validate.js';\nimport Middleware from './think_middleware.js';\nimport Hook from './think_hook.js';\nimport Route from './think_route.js';\nimport Config from './think_config.js';\nimport Adatper from './think_adapter.js';\n\nimport './think_cache.js';\nimport './think_data.js';\n\n\ncolors.enabled = true;\n\n\n/**\n * global think variable\n * @type {Object}\n */\nglobal.think = Object.create(thinkit);\n/**\n * path seperator\n * @type {String}\n */\nthink.sep = path.sep;\n/**\n * server start time\n * @type {Number}\n */\nthink.startTime = Date.now();\n/**\n * app dir name, can be set in init\n * @type {Object}\n */\nthink.dirname = {\n  config: 'config',\n  controller: 'controller',\n  model: 'model',\n  adapter: 'adapter',\n  logic: 'logic',\n  service: 'service',\n  view: 'view',\n  middleware: 'middleware',\n  runtime: 'runtime',\n  common: 'common',\n  bootstrap: 'bootstrap',\n  locale: 'locale'\n};\n/**\n * env\n * development | testing | production\n * @type {String}\n */\nthink.env = 'development';\n/**\n * server port\n * @type {Number}\n */\nthink.port = 0;\n/**\n * is command line\n * @type {String}\n */\nthink.cli = '';\n/**\n * get locale\n * @type {String}\n */\nthink.lang = (process.env.LANG || '').split('.')[0].replace('_', '-').toLowerCase();\n/**\n * is master\n * @type {Boolean}\n */\nthink.isMaster = cluster.isMaster;\n/**\n * app mode\n * 0x0001: mini\n * 0x0002: normal\n * 0x0004: module\n * @type {Boolean}\n */\nthink.mode = 0x0001;\n//normal mode\nthink.mode_normal = 0x0002;\n//module mode\nthink.mode_module = 0x0004;\n/**\n * thinkjs module lib path\n * @type {String}\n */\nthink.THINK_LIB_PATH = path.normalize(`${__dirname}/..`);\n/**\n * thinkjs module root path\n * @type {String}\n */\nthink.THINK_PATH = path.dirname(think.THINK_LIB_PATH);\n/**\n * thinkjs version\n * @param  {) []\n * @return {}         []\n */\nthink.version = (() => {\n  let packageFile = `${think.THINK_PATH}/package.json`;\n  let {version} = JSON.parse(fs.readFileSync(packageFile, 'utf-8'));\n  return version;\n})();\n/**\n * module list\n * @type {Array}\n */\nthink.module = [];\n/**\n * base class\n * @type {Class}\n */\nthink.base = base;\n/**\n * reject promise\n * @param  {[type]} err []\n * @return {[type]}     []\n */\nthink.reject = (err) => {\n  //delay to show error\n  setTimeout(() => {\n    think.log(err);\n  }, 500);\n  return Promise.reject(err);\n};\n\n/**\n * check object is http object\n * @param  {Mixed}  obj []\n * @return {Boolean}      []\n */\nthink.isHttp = obj => {\n  return !!(obj && think.isObject(obj.req) && think.isObject(obj.res));\n};\n\n/**\n * validate \n * @type {Function}\n */\nthink.validate = Validate;\n\n/**\n * middleware\n * @type {Function}\n */\nthink.middleware = Middleware;\n\n/**\n * hook\n * @type {Function}\n */\nthink.hook = Hook;\n\n/**\n * route\n * @type {Function}\n */\nthink.route = Route;\n\n/**\n * config\n * @type {Function}\n */\nthink.config = Config;\n/**\n * get module config\n * @param  {String} module []\n * @return {Object}        []\n */\nthink.getModuleConfig = module => {\n  return think.config(undefined, undefined, module);\n};\n/**\n * adapter\n * @type {Function}\n */\nthink.adapter = Adatper;\n\n/**\n * alias co module to think.co\n * @type {Object}\n */\nthink.co = obj => {\n  //optimize invoke co package\n  if(obj && typeof obj.next === 'function'){\n    return co(obj);\n  }\n  return Promise.resolve(obj);\n};\nthink.co.wrap = co.wrap;\n\n/**\n * create class\n * @param {Object} methods [methods and props]\n */\nlet Class = think.Class;\nthink.Class = (type, clean) => {\n  // create class\n  // think.Class({})\n  // think.Class({}, true)\n  if (think.isObject(type)) {\n    return clean === true ? Class(type) : Class(think.base, type);\n  }\n  // create class with superClass\n  // think.Class(function(){}, {})\n  else if (think.isFunction(type)) {\n    return Class(type, clean);\n  }\n\n  //create type class\n  return (superClass, methods) => {\n    // think.controller();\n    // think.controller({})\n    if (think.isObject(superClass) || !superClass) {\n      methods = superClass;\n      superClass = type + '_base';\n    }\n    // think.controller('superClass', {})\n    else if (think.isString(superClass)) {\n      superClass = think.lookClass(superClass, type);\n    }\n    if (think.isString(superClass)) {\n      superClass = think.require(superClass, true);\n      // get class\n      // think.controller('rest')\n      if (!methods) {\n        return superClass;\n      }\n    }\n    return Class(superClass, methods);\n  };\n};\n\n\n/**\n * look up class\n * @param  {String} type   [class type, model, controller, service]\n * @param  {String} module [module name]\n * @return {String}        []\n */\nlet _getClass = (name, type, module, base) => {\n  let clsPath, cls;\n  // find from current module\n  if (module) {\n    clsPath = `${module}/${type}/${name}`;\n    cls = think.require(clsPath, true);\n    if (cls) {\n      return cls;\n    }\n  }\n  // find from common module\n  module = think.mode !== think.mode_module ? think.config('default_module') : think.dirname.common;\n  let list = [\n    `${module}/${type}/${name}`,\n    `${type}_${name}`,\n    base || `${type}_base`\n  ];\n  for(let i = 0, length = list.length; i < length; i++){\n    cls = think.require(list[i], true);\n    if(cls){\n      return cls;\n    }\n  }\n};\n\nthink.lookClass = (name, type, module, base) => {\n  let names = name.split('/');\n  let length = names.length;\n  if(length === 1){\n    return _getClass(name, type, module, base);\n  }\n  if(length === 2 && (think.module.indexOf(names[0]) > -1 || !module)){\n    return think.require(`${names[0]}/${type}/${names[1]}`);\n  }\n  if(length === 3 && (name.indexOf(`/${type}/`) > -1 || !type || !module)){\n    return think.require(name);\n  }\n  return think.require(`${module}/${type}/${name}`);\n};\n/**\n * get common module path\n * think.getPath(undefined, think.dirname.controller)\n * think.getPath(home, think.dirname.model)\n * @return {String} []\n */\nthink.getPath = (module, type = think.dirname.controller, prefix = '') => {\n  let mod = '';\n  if(think.mode === think.mode_module){\n    mod = (module || think.dirname.common) + think.sep;\n  }\n  return `${think.APP_PATH}${prefix}${think.sep}${mod}${type}`;\n};\n\n\n/**\n * require module\n * @param  {String} name []\n * @return {mixed}      []\n */\nlet _loadRequire = (name, filepath) => {\n  let obj = think.safeRequire(filepath);\n  if (think.isFunction(obj)) {\n    obj.prototype.__filename = filepath;\n  }\n  if(obj){\n    thinkData.export[name] = obj;\n  }\n  return obj;\n};\nthink.require = (name, flag) => {\n  if (!think.isString(name)) {\n    return name;\n  }\n  // adapter or middle by register\n  let Cls = thinkData.export[name];\n  if (Cls) {\n    return Cls;\n  }\n\n  let filepath = thinkData.alias[name];\n  if (filepath) {\n    return _loadRequire(name, path.normalize(filepath));\n  }\n  // only check in alias\n  if (flag) {\n    return null;\n  }\n  filepath = require.resolve(name);\n  return _loadRequire(name, filepath);\n};\n\n\n/**\n * safe require\n * @param  {String} file []\n * @return {mixed}      []\n */\nlet _interopSafeRequire = file => {\n  let obj = require(file);\n  if(obj && obj.__esModule && obj.default){\n    return obj.default;\n  }\n  return obj;\n};\n\nthink.safeRequire = file => {\n  // absolute file path is not exist\n  if (path.isAbsolute(file)) {\n    //no need optimize, only invoked before service start\n    if(!think.isFile(file)){\n      return null;\n    }\n    //when file is exist, require direct\n    return _interopSafeRequire(file);\n  }\n  try{\n    return _interopSafeRequire(file);\n  }catch(err){\n    think.log(err);\n  }\n  return null;\n};\n\n/**\n * merge & parse config, support adapter & parser\n * @param  {} configs []\n * @return {}            []\n */\nthink.parseConfig = function(...configs) {\n  let onlyMerge = false;\n  if(configs[0] === true){\n    onlyMerge = true;\n    configs = configs.slice(1);\n  }\n  configs = configs.map(config => {\n    config = think.extend({}, config);\n    //check adapter config exist\n    if(config.type && config.adapter){\n      let adapterConfig = config.adapter[config.type];\n      config = think.extend(config, adapterConfig);\n      delete config.adapter;\n    }\n    return config;\n  });\n  \n  let config = think.extend({}, ...configs);\n\n  //check parser method\n  if(!think.isFunction(config.parser) || onlyMerge){\n    return config;\n  }\n  \n  let ret = config.parser(config, this !== think ? this : {});\n  delete config.parser;\n  return think.extend(config, ret);\n};\n\n/**\n * prevent next process\n * @return {Promise} []\n */\nlet preventMessage = 'PREVENT_NEXT_PROCESS';\nthink.prevent = () => {\n  let err = new Error(preventMessage);\n  return Promise.reject(err);\n};\n/**\n * check is prevent error\n * @param  {Error}  err [error message]\n * @return {Boolean}     []\n */\nthink.isPrevent = err => {\n  return think.isError(err) && err.message === preventMessage;\n};\n/**\n * log\n * @TODO\n * @return {} []\n */\nthink.log = (msg, type, showTime) => {\n\n  //when type or showTime is boolean\n  //only show log when value is true\n  if(type === false || showTime === false){\n    return;\n  }else if(type === true){\n    type = '';\n  }else if(showTime === true){\n    showTime = '';\n  }\n\n\n  let dateTime = colors.gray(`[${think.datetime()}] `);\n  if(showTime === null){\n    dateTime = '';\n  }\n\n  let preError = thinkCache(thinkCache.COLLECTION, 'prev_error');\n  if (think.isError(msg)) {\n    if(think.isPrevent(msg) || msg === preError){\n      return;\n    }\n    thinkCache(thinkCache.COLLECTION, 'prev_error', msg);\n    console.error(dateTime + colors.red('[Error] ') + msg.stack);\n    return;\n  }else if(think.isFunction(msg)){\n    msg = msg(colors);\n  }else if(think.isObject(msg) || think.isArray(msg)){\n    msg = JSON.stringify(msg);\n  }\n  // if(msg.length > 300){\n  //   msg = msg.substr(0, 300) + '...';\n  // }\n  if(think.isNumber(showTime)){\n    let time = Date.now() - showTime;\n    msg += ' ' + colors.green(`${time}ms`);\n  }\n  if(type){\n    if(type === 'WARNING'){\n      console.warn(dateTime + colors.yellow(`[Warning] `) + msg);\n    }\n    else if(type === 'EXIT'){\n      console.error(colors.red('[Error] ' + msg));\n      console.log();\n      process.exit();\n    }\n    else{\n      console.log(dateTime + colors.cyan(`[${type}] `) + msg);\n    }\n  }else{\n    console.log(dateTime + msg); \n  }\n};\n\n\n/**\n * load alias\n * @param  {String} type  []\n * @param  {Array} paths []\n * @return {Object}       []\n */\nthink.alias = (type, paths, slash) => {\n  if(!type){\n    return thinkData.alias;\n  }\n  //regist alias\n  if (!think.isArray(paths)) {\n    paths = [paths];\n  }\n  paths.forEach(path => {\n    let files = think.getFiles(path);\n    files.forEach(file => {\n      if(file.slice(-3) !== '.js' || file[0] === '_'){\n        return;\n      }\n      let name = file.slice(0, -3).replace(/\\\\/g, '/');//replace \\\\ to / on windows\n      name = type + (slash ? '/' : '_') + name;\n      thinkData.alias[name] = `${path}${think.sep}${file}`;\n    });\n  });\n};\n\n\n/**\n * regist gc\n * @param  {Object} instance [class instance]\n * @return {}          []\n */\nthink.gc = instance => {\n  let type = instance.gcType;\n  let timers = thinkCache(thinkCache.TIMER);\n  let gc = think.config('gc');\n  if (!gc.on || type in timers) {\n    return;\n  }\n  let timer = setInterval(() => {\n    if(gc.filter()){\n      return instance.gc && instance.gc(Date.now());\n    }\n  }, gc.interval * 1000);\n  thinkCache(thinkCache.TIMER, type, timer);\n};\n\n/**\n * get http object\n * @param  {Object} req [http request]\n * @param  {Object} res [http response]\n * @return {Object}     [http object]\n */\nthink._http = (data = {}) => {\n  if (think.isString(data)) {\n    if (data[0] === '{') {\n      data = JSON.parse(data);\n    }else if (/^\\w+\\=/.test(data)) {\n      data = querystring.parse(data);\n    }else{\n      data = {url: data};\n    }\n  }\n  let url = data.url || '';\n  if (url.indexOf('/') !== 0) {\n    url = '/' + url;\n  }\n  let req = {\n    httpVersion: '1.1',\n    method: (data.method || 'GET').toUpperCase(),\n    url: url,\n    headers: think.extend({\n      host: data.host || '127.0.0.1'\n    }, data.headers),\n    connection: {\n      remoteAddress: data.ip || '127.0.0.1'\n    }\n  };\n  let empty = () => {};\n  let res = {\n    statusCode: 200,\n    setTimeout: empty,\n    end: data.end || data.close || empty,\n    write: data.write || data.send || empty,\n    setHeader: empty\n  };\n  return {\n    req: req,\n    res: res\n  };\n};\n/**\n * get http object\n * @param  {Object} req []\n * @param  {Object} res []\n * @return {Promise}     []\n */\nthink.http = async (req, res) => {\n  let execFlag = res === true;\n  //for cli request\n  if (res === undefined || res === true) {\n    ({req, res} = think._http(req));\n  }\n  let instance = new Http(req, res);\n  let http = await instance.run();\n  if(!execFlag){\n    return http;\n  }\n  //flag to cli request, make isCli detect true\n  http._cli = true; \n  let App = think.require('app');\n  let appInstance = new App(http);\n  return appInstance.run();\n};\n/**\n * base class for has http property\n * @type {Class}\n */\nthink.http.base = httpBase;\n\n/**\n * get uuid\n * @param  {Number} length [uid length]\n * @return {String}        []\n */\nthink.uuid = (length = 32) => {\n  // length = length || 32;\n  let str = crypto.randomBytes(Math.ceil(length * 0.75)).toString('base64').slice(0, length);\n  return str.replace(/[\\+\\/]/g, '_');\n};\n\n/**\n * start session\n * @param  {Object} http []\n * @return {}      []\n */\nthink.session = http => {\n  //if session is init, return\n  if (http._session) {\n    return http._session;\n  }\n\n  let sessionOptions = think.config('session');\n  let {name, secret} = sessionOptions;\n  let cookie = http.cookie(name);\n  \n  //validate cookie sign\n  if (cookie && secret) {\n    cookie = Cookie.unsign(cookie, secret);\n    //set cookie to http._cookie\n    if (cookie) {\n      http._cookie[name] = cookie;\n    }\n  }\n\n  let sessionCookie = cookie;\n  let newCookie = false;\n  //generate session cookie when cookie is not set\n  if (!cookie) {\n    let options = sessionOptions.cookie || {};\n    cookie = think.uuid(options.length || 32);\n    sessionCookie = cookie;\n    //sign cookie\n    if (secret) {\n      cookie = Cookie.sign(cookie, secret);\n    }\n    http._cookie[name] = sessionCookie;\n    http.cookie(name, cookie, options);\n    newCookie = true;\n  }\n\n  let type = sessionOptions.type || 'memory';\n  if (type === 'memory') {\n    if (think.config('cluster_on')) {\n      type = 'file';\n      think.log('in cluster mode, session can\\'t use memory for storage, convert to File');\n    }\n  }\n  \n  let conf = think.parseConfig(sessionOptions, {\n    cookie: sessionCookie,\n    newCookie: newCookie\n  });\n  let cls = think.adapter('session', type);\n  let session = new cls(conf);\n  http._session = session;\n\n  //save session data after request end\n  //http.once('afterEnd', () => session.flush && session.flush());\n  return session;\n};\n\n\n/**\n * create controller sub class\n * @type {Function}\n */\nthink.controller = (superClass, methods, module) => {\n  let isConfig = think.isHttp(methods) || module;\n  // get controller instance\n  if (think.isString(superClass) && isConfig) {\n    let Cls = think.lookClass(superClass, 'controller', module);\n    return new Cls(methods);\n  }\n  let controller = thinkCache(thinkCache.COLLECTION, 'controller');\n  if(!controller){\n    controller = think.Class('controller');\n    thinkCache(thinkCache.COLLECTION, 'controller', controller);\n  }\n  //create sub controller class\n  return controller(superClass, methods);\n};\n\n\n/**\n * create logic class\n * @type {Function}\n */\nthink.logic = (superClass, methods, module) => {\n  let isConfig = think.isHttp(methods) || module;\n  //get logic instance\n  if (think.isString(superClass) && isConfig) {\n    let Cls = think.lookClass(superClass, 'logic', module);\n    return new Cls(methods);\n  }\n  let logic = thinkCache(thinkCache.COLLECTION, 'logic');\n  if(!logic){\n    logic = think.Class('logic');\n    thinkCache(thinkCache.COLLECTION, 'logic', logic);\n  }\n  //create sub logic class\n  return logic(superClass, methods);\n};\n\n\n/**\n * create model sub class\n * @type {Function}\n */\nthink.model = (superClass, methods, module) => {\n  let isConfig = !!module;\n  if (!isConfig && methods) {\n    //check is db configs\n    if ('type' in methods) {\n      isConfig = true;\n    }\n  }\n  //get model instance\n  if (think.isString(superClass) && isConfig) {\n    methods = think.extend({}, think.config('db'), methods);\n    let base = methods.type === 'mongo' ? 'model_mongo' : '';\n    let cls = think.lookClass(superClass, 'model', module, base);\n    let names = superClass.split('/');\n    return new cls(names[names.length - 1], methods);\n  }\n  let model = thinkCache(thinkCache.COLLECTION, 'model');\n  if(!model){\n    model = think.Class('model');\n    thinkCache(thinkCache.COLLECTION, 'model', model);\n  }\n  //create model\n  return model(superClass, methods);\n};\n\n/**\n * create service sub class\n * @type {Function}\n */\nthink.service = (superClass, methods, module) => {\n  //get service instance\n  if (think.isString(superClass)) {\n    return think.lookClass(superClass, 'service', module || methods);\n  }\n  let service = thinkCache(thinkCache.COLLECTION, 'service');\n  if(!service){\n    service = think.Class('service');\n    thinkCache(thinkCache.COLLECTION, 'service', service);\n  }\n  //create sub service class\n  return service(superClass, methods);\n};\n/**\n * get or set cache\n * @param  {String} type  [cache type]\n * @param  {String} name  [cache name]\n * @param  {Mixed} value [cache value]\n * @return {}       []\n */\nthink.cache = async (name, value, options) => {\n  options = think.extend({}, think.config('cache'), options);\n  let Cls = think.adapter('cache', options.type || 'memory');\n  let instance = new Cls(options);\n  // get cache\n  if(value === undefined){\n    return instance.get(name);\n  } \n  //delete cache\n  else if(value === null){\n    return instance.delete(name);\n  } \n  //get cache waiting for function\n  else if(think.isFunction(value)){\n    let data = await instance.get(name);\n    if(data !== undefined){\n      return data;\n    }\n    data = await think.co(value(name));\n    //data = await think.co.wrap(value)(name);\n    await instance.set(name, data);\n    return data;\n  }\n  //set cache\n  return instance.set(name, value);\n};\n\n\n/**\n * get locale message\n * can not use arrow function!\n * @param  {String} key  []\n * @param  {String} lang []\n * @return {String}      []\n */\nthink.locale = function(key, ...data) {\n  let lang, locales, defaultLang;\n  if(this === think){\n    defaultLang = think.config('locale.default');\n    lang = think.lang || defaultLang;\n    locales = think.config('locale');\n  }else{\n    defaultLang = this.config('locale.default');\n    lang = this.lang();\n    locales = this.config(think.dirname.locale);\n  }\n  let langLocale = locales[lang] || {};\n  let defaultLangLocale = locales[defaultLang] || {};\n  if(!key){\n    return think.isEmpty(langLocale) ? defaultLangLocale : langLocale;\n  }\n  let enLocale = locales.en || {};\n  let value = langLocale[key] || defaultLangLocale[key] || enLocale[key] || key;\n  if(!think.isString(value)){\n    return value;\n  }\n  return util.format(value, ...data);\n};\n\n\n\n\n/**\n * await \n * @param  {String}   key      []\n * @param  {Function} callback []\n * @return {Promise}            []\n */\nlet _awaitInstance = new Await();\nthink.await = (key, callback) => {\n  return _awaitInstance.run(key, callback);\n};\n\n\n/**\n * install node package\n * @param  {String} pkg [package name]\n * @return {Promise}     []\n */\nlet _dynamicInstall = pkg => {\n  let pkgWithVersion = pkg;\n  //get package version\n  if(pkgWithVersion.indexOf('@') === -1){\n    let version = think.config('package')[pkg];\n    if(version){\n      pkgWithVersion += '@' + version;\n    }\n  }else{\n    pkg = pkgWithVersion.split('@')[0];\n  }\n  let cmd = `npm install ${pkgWithVersion} --save`;\n  return think.await(cmd, () => {\n    let deferred = think.defer();\n    think.log(`install package ${pkgWithVersion} start`, 'NPM');\n    child_process.exec(cmd, {\n      cwd: think.ROOT_PATH\n    }, err => {\n      if(err){\n        think.log(new Error(`install package ${pkgWithVersion} error`));\n        deferred.reject(err);\n      }else{\n        think.log(`install package ${pkgWithVersion} finish`, 'NPM');\n        deferred.resolve(think.require(pkg));\n      }\n    });\n    return deferred.promise;\n  });\n};\n\nthink.npm = (pkg) => {\n  try{\n    return Promise.resolve(_interopSafeRequire(pkg));\n  } catch(e){\n    return _dynamicInstall(pkg);\n  }\n};\n/**\n * get error\n * @param  {Error} err   []\n * @param  {String} addon []\n * @return {Error}       []\n */\nthink.error = (err, addon = '') => {\n  if(think.isPromise(err)){\n    return err.catch(err => {\n      return think.reject(think.error(err, addon));\n    });\n  }\n  if(think.isError(err)){\n    let message = err.message;\n    let errors = thinkData.error;\n    let key, value, reg = /^[A-Z\\_]$/;\n    for(key in errors){\n      let pos = message.indexOf(key);\n      if(pos > -1){\n        let prev = pos === 0 ? '' : message[pos - 1];\n        let next = message[pos + key.length];\n        if(!reg.test(prev) && !reg.test(next)){\n          value = errors[key];\n          break;\n        }\n      }\n    }\n    if(value){\n      let siteMessage = `http://www.thinkjs.org/doc/error_message.html#${key.toLowerCase()}`;\n      if(think.isError(addon)){\n        addon.message = `${value}, ${addon.message}. ${siteMessage}`;\n        return addon;\n      }else{\n        addon = addon ? `, ${addon}` : '';\n        let msg = `${value}${addon}. ${siteMessage}`;\n        err.message = msg;\n        return err;\n      }\n    }\n    return err;\n  }\n  return new Error(err);\n};\n/**\n * exec status action\n * @param  {Number} status []\n * @param  {Object} http   []\n * @return {}        []\n */\nthink.statusAction = async (status, http, log) => {\n  status = status || 500;\n  if(think.isPrevent(http.error)){\n    return;\n  }\n  //set error flag, avoid infinite loop\n  if(http._error){\n    think.log(http.error);\n    await http.status(status).end();\n    return think.prevent();\n  }\n  http._error = true;\n\n  //@TODO move log error to error controller\n  if(log && think.config('log_error') !== false){\n    think.log(http.error);\n  }\n\n  let name = `${think.config('default_module')}/${think.dirname.controller}/error`;\n  if(think.mode === think.mode_module){\n    name = `${think.dirname.common}/${think.dirname.controller}/error`;\n  }\n\n  let cls = think.require(name, true);\n  \n  //error controller not found\n  if(!cls){\n    http.error = new Error(think.locale('CONTROLLER_NOT_FOUND', name, http.url));\n    return think.statusAction(status, http, log);\n  }\n  \n  //set http status\n  //http.status(status);\n\n  let instance = new cls(http);\n  await instance.invoke(`_${status}Action`, instance);\n  \n  return think.prevent();\n};\n\n/**\n * waterfall\n * @param  {Array}   dataList []\n * @param  {Function} callback []\n * @return {Promise}            []\n */\nthink.waterfall = async (dataList, callback) => {\n  let itemFn = think.isFunction(dataList[0]);\n  let data;\n  for(let i = 0, length = dataList.length; i < length; i++){\n    let ret = itemFn ? dataList[i](callback, data) : callback(dataList[i], data);\n    data = await think.co(ret);\n    if(data === null){\n      return data;\n    }\n  }\n  return data;\n};\n\n/**\n * parallel limit exec\n * @param  {String}   key      []\n * @param  {Mixed}   data     []\n * @param  {Function} callback []\n * @return {}            []\n */\nthink.parallelLimit = (key, data, callback, options = {}) => {\n\n  if(!think.isString(key) || think.isFunction(data)){\n    options = callback || {};\n    callback = data;\n    data = key;\n    key = '';\n  }\n  if(!think.isFunction(callback)){\n    options = callback || {};\n    callback = undefined;\n  }\n  if(think.isNumber(options)){\n    options = {limit: options};\n  }\n  \n  let flag = !think.isArray(data) || options.array;\n  if(!flag){\n    key = '';\n  }\n\n  //get parallel limit class\n  let Limit = thinkCache(thinkCache.COLLECTION, 'limit');\n  if (!Limit) {\n    Limit = think.require('parallel_limit');\n    thinkCache(thinkCache.COLLECTION, 'limit', Limit);\n  }\n\n  let instance;\n  if(key){\n    instance = thinkCache(thinkCache.LIMIT, key);\n    if(!instance){\n      instance = new Limit(options.limit, callback);\n      thinkCache(thinkCache.LIMIT, key, instance);\n    }\n  }else{\n    instance = new Limit(options.limit, callback);\n  }\n\n  if(flag){\n    return instance.add(data);\n  }\n  return instance.addMany(data, options.ignoreError);\n};"]}