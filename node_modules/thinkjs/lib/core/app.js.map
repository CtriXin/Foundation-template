{"version":3,"sources":["../../src/core/app.js"],"names":["invokeLogic","think","config","hook","then","execLogic","catch","isPrevent","err","reject","http","_isEnd","prevent","name","module","dirname","logic","controller","cls","require","resolve","instance","action","camelCase","__call","__before","co","invokeController","execController","getControllerInstance","Controller","_isRest","method","_method","get","toLowerCase","execAction","error","Error","locale","url","statusAction","actionWithSuffix","exec","_config","thinkData","compileError","execError","run","header","version","create","on","createServer","handle","host","port","callback","req","res","server","listen","websocket","parseConfig","Cls","adapter","type","log","websocketStatus","clusterStatus","colors","green","magenta","autoCompile","env","cli","nums","cpus","length","isMaster","i","fork","worker","process","pid","nextTick","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAGE;;;;mBAIAA,W,0BAAa;AAAA;;AACX,QAAG,CAACC,MAAMC,MAAN,CAAa,UAAb,CAAJ,EAA6B;AAC3B;AACD;;AAED,WAAO,KAAKC,IAAL,CAAU,cAAV,EAA0BC,IAA1B,CAA+B,YAAM;AAC1C,aAAO,OAAKC,SAAL,EAAP;AACD,KAFM,EAEJC,KAFI,CAEE,eAAO;AACd;AACA;AACA,UAAG,CAACL,MAAMM,SAAN,CAAgBC,GAAhB,CAAJ,EAAyB;AACvB,eAAO,kBAAQC,MAAR,CAAeD,GAAf,CAAP;AACD;AACF,KARM,EAQJJ,IARI,CAQC,YAAM;AACZ,aAAO,OAAKD,IAAL,CAAU,aAAV,CAAP;AACD,KAVM,EAUJC,IAVI,CAUC,YAAM;AACZ;AACA,UAAI,OAAKM,IAAL,CAAUC,MAAd,EAAsB;AACpB,eAAOV,MAAMW,OAAN,EAAP;AACD;AACF,KAfM,CAAP;AAgBD,G;AACD;;;;;;mBAIAP,S,wBAAW;AACT,QAAIQ,OAAU,KAAKH,IAAL,CAAUI,MAApB,SAA8Bb,MAAMc,OAAN,CAAcC,KAA5C,SAAqD,KAAKN,IAAL,CAAUO,UAAnE;AACA,QAAIC,MAAMjB,MAAMkB,OAAN,CAAcN,IAAd,EAAoB,IAApB,CAAV;AACA,QAAI,CAACK,GAAL,EAAU;AACR,aAAO,kBAAQE,OAAR,EAAP;AACD;AACD,QAAIC,WAAW,IAAIH,GAAJ,CAAQ,KAAKR,IAAb,CAAf;AACA,QAAIY,SAASrB,MAAMsB,SAAN,CAAgB,KAAKb,IAAL,CAAUY,MAA1B,CAAb;AACA,QAAID,SAAYC,MAAZ,YAAJ,EAAiC;AAC/B,aAAO,KAAKA,MAAL,CAAYD,QAAZ,EAAsBC,MAAtB,EAA8B,KAA9B,CAAP;AACD;AACD;AACA,QAAID,SAASG,MAAb,EAAqB;AACnB,aAAO,KAAKF,MAAL,CAAYD,QAAZ,EAAsB,QAAtB,EAAgC,KAAhC,CAAP;AACD;AACD;AACA,QAAGA,SAASI,QAAZ,EAAqB;AACnB,aAAOxB,MAAMyB,EAAN,CAASL,SAASI,QAAT,CAAkBJ,QAAlB,CAAT,CAAP;AACD;AACD,WAAO,kBAAQD,OAAR,EAAP;AACD,G;AACD;;;;;;mBAIAO,gB,6BAAiBV,U,EAAW;AAAA;;AAC1B,WAAO,KAAKd,IAAL,CAAU,mBAAV,EAA+BC,IAA/B,CAAoC,YAAM;AAC/C,aAAO,OAAKwB,cAAL,CAAoBX,UAApB,CAAP;AACD,KAFM,EAEJX,KAFI,CAEE,eAAO;AACd;AACA;AACA,UAAG,CAACL,MAAMM,SAAN,CAAgBC,GAAhB,CAAJ,EAAyB;AACvB,eAAO,kBAAQC,MAAR,CAAeD,GAAf,CAAP;AACD;AACF,KARM,EAQJJ,IARI,CAQC,YAAM;AACZ,aAAO,OAAKD,IAAL,CAAU,kBAAV,CAAP;AACD,KAVM,CAAP;AAWD,G;AACD;;;;;;mBAIA0B,qB,oCAAuB;AACrB,QAAInB,OAAO,KAAKA,IAAhB;AACA,QAAIG,OAAUH,KAAKI,MAAf,SAAyBb,MAAMc,OAAN,CAAcE,UAAvC,SAAqDP,KAAKO,UAA9D;AACA,QAAIa,aAAa7B,MAAMkB,OAAN,CAAcN,IAAd,EAAoB,IAApB,CAAjB;AACA,QAAI,CAACiB,UAAL,EAAiB;AACf;AACD;AACD,QAAIT,WAAW,IAAIS,UAAJ,CAAepB,IAAf,CAAf;AACA;AACA,QAAGW,SAASU,OAAZ,EAAoB;AAClB,UAAIC,SAASX,SAASY,OAAtB;AACA;AACA,UAAGD,MAAH,EAAU;AACRA,iBAASX,SAASa,GAAT,CAAaF,MAAb,EAAqBG,WAArB,EAAT;AACD;AACD,UAAG,CAACH,MAAJ,EAAW;AACTA,iBAAS,KAAKtB,IAAL,CAAUsB,MAAV,CAAiBG,WAAjB,EAAT;AACD;AACD,WAAKzB,IAAL,CAAUY,MAAV,GAAmBU,MAAnB;AACD;AACD,WAAOX,QAAP;AACD,G;AACD;;;;;;mBAIAO,c,2BAAeX,U,EAAW;AACxB,QAAIA,UAAJ,EAAgB;AACd,aAAO,KAAKmB,UAAL,CAAgBnB,UAAhB,CAAP;AACD;AACD,QAAIP,OAAO,KAAKA,IAAhB;AACAA,SAAK2B,KAAL,GAAa,IAAIC,KAAJ,CAAUrC,MAAMsC,MAAN,CAAa,sBAAb,EAAqC7B,KAAKO,UAA1C,EAAsDP,KAAK8B,GAA3D,CAAV,CAAb;AACA,WAAOvC,MAAMwC,YAAN,CAAmB,GAAnB,EAAwB/B,IAAxB,CAAP;AACD,G;AACD;;;;;;;;mBAMA0B,U,uBAAWnB,U,EAAW;AACpB,QAAIP,OAAO,KAAKA,IAAhB;AACA,QAAIY,SAASrB,MAAMsB,SAAN,CAAgBb,KAAKY,MAArB,CAAb;AACA,QAAIoB,mBAAsBpB,MAAtB,WAAJ;AACA;AACA,QAAGL,WAAWyB,gBAAX,CAAH,EAAgC;AAC9B,aAAO,KAAKpB,MAAL,CAAYL,UAAZ,EAAwBK,MAAxB,EAAgC,KAAhC,CAAP;AACD;AACD;AACA,QAAGL,WAAWO,MAAd,EAAqB;AACnB,aAAO,KAAKF,MAAL,CAAYL,UAAZ,EAAwB,QAAxB,EAAkC,KAAlC,CAAP;AACD;AACDP,SAAK2B,KAAL,GAAa,IAAIC,KAAJ,CAAUrC,MAAMsC,MAAN,CAAa,kBAAb,EAAiCG,gBAAjC,EAAmDhC,KAAK8B,GAAxD,CAAV,CAAb;AACA,WAAOvC,MAAMwC,YAAN,CAAmB,GAAnB,EAAwB/B,IAAxB,CAAP;AACD,G;;AAED;;;;;;mBAIMiC,I;;;;;;;;qBACE,KAAKxC,IAAL,CAAU,UAAV,C;;;;qBACA,KAAKA,IAAL,CAAU,aAAV,C;;;;AAEN;AACA,mBAAKO,IAAL,CAAUkC,OAAV,GAAoBC,UAAU3C,MAAV,CAAiB,KAAKQ,IAAL,CAAUI,MAA3B,CAApB;AACA;;AAEA;;mBACGb,MAAM6C,Y;;;;;AACP,mBAAKpC,IAAL,CAAU2B,KAAV,GAAkBpC,MAAM6C,YAAxB;+CACO7C,MAAMwC,YAAN,CAAmB,GAAnB,EAAwB,KAAK/B,IAA7B,C;;;AAET;AACIO,wB,GAAa,KAAKY,qBAAL,E;;qBAEX,KAAK7B,WAAL,E;;;;qBACA,KAAK2B,gBAAL,CAAsBV,UAAtB,C;;;;qBACA,KAAKd,IAAL,CAAU,cAAV,C;;;;;;;;;;;;;;;;AAER;;;;;;;mBAKA4C,S,sBAAUvC,G,EAAI;AACZ,QAAIE,OAAO,KAAKA,IAAhB;AACAA,SAAK2B,KAAL,GAAa7B,GAAb;AACA,WAAOP,MAAMwC,YAAN,CAAmB,GAAnB,EAAwB/B,IAAxB,EAA8B,IAA9B,EAAoCJ,KAApC,CAA0C,YAAM,CAAE,CAAlD,CAAP;AACD,G;AACD;;;;;;mBAIA0C,G,kBAAK;AAAA;;AACH,QAAItC,OAAO,KAAKA,IAAhB;AACAA,SAAKuC,MAAL,CAAY,cAAZ,eAAuChD,MAAMiD,OAA7C;;AAEA,QAAGjD,MAAMC,MAAN,CAAa,WAAb,CAAH,EAA6B;AAC3B,UAAImB,WAAW,iBAAO8B,MAAP,EAAf;AACA9B,eAAS+B,EAAT,CAAY,OAAZ,EAAqB,eAAO;AAC1B,eAAKL,SAAL,CAAevC,GAAf;AACD,OAFD;AAGAa,eAAS2B,GAAT,CAAa,YAAM;AACjB,eAAKL,IAAL,GAAYrC,KAAZ,CAAkB,eAAO;AACvB,iBAAKyC,SAAL,CAAevC,GAAf;AACD,SAFD;AAGD,OAJD;AAKD,KAVD,MAUK;AACH,WAAKmC,IAAL,GAAYrC,KAAZ,CAAkB,eAAO;AACvB,eAAKyC,SAAL,CAAevC,GAAf;AACD,OAFD;AAGD;AACF,G;AACD;;;;;;SAIO6C,Y,2BAAc;AAAA;;AACnB,QAAIC,SAASrD,MAAMC,MAAN,CAAa,eAAb,CAAb;AACA,QAAIqD,OAAOtD,MAAMC,MAAN,CAAa,MAAb,CAAX;AACA,QAAIsD,OAAOvD,MAAMuD,IAAN,IAAcvD,MAAMC,MAAN,CAAa,MAAb,CAAzB;AACA;AACA,QAAIuD,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC3B1D,YAAMS,IAAN,CAAWgD,GAAX,EAAgBC,GAAhB,EAAqBvD,IAArB,CAA0B,gBAAQ;AAChC,mBAASM,IAAT,EAAesC,GAAf;AACD,OAFD;AAGD,KAJD;AAKA,QAAIY,eAAJ;AACA;AACA,QAAIN,MAAJ,EAAY;AACVM,eAASN,OAAOG,QAAP,EAAiBD,IAAjB,EAAuBD,IAAvB,EAA6B,IAA7B,CAAT;AACD,KAFD,MAEK;AACH;AACAK,eAAS,eAAKP,YAAL,CAAkBI,QAAlB,CAAT;AACAG,aAAOC,MAAP,CAAcL,IAAd,EAAoBD,IAApB;AACD;AACDtD,UAAM2D,MAAN,GAAeA,MAAf;AACA;AACA,QAAIE,YAAY7D,MAAM8D,WAAN,CAAkB9D,MAAMC,MAAN,CAAa,WAAb,CAAlB,CAAhB;AACA,QAAG4D,UAAUV,EAAb,EAAgB;AACd,UAAIY,MAAM/D,MAAMgE,OAAN,CAAc,WAAd,EAA2BH,UAAUI,IAArC,CAAV;AACA,UAAI7C,WAAW,IAAI2C,GAAJ,CAAQJ,MAAR,EAAgBE,SAAhB,EAA2B,IAA3B,CAAf;AACAzC,eAAS2B,GAAT;AACD;AACF,G;AACD;;;;;;SAIOmB,G,kBAAK;AACV,QAAIZ,OAAOtD,MAAMC,MAAN,CAAa,MAAb,CAAX;AACA,QAAIsD,OAAOvD,MAAMuD,IAAN,IAAcvD,MAAMC,MAAN,CAAa,MAAb,CAAzB;AACA,QAAIkE,kBAAkBnE,MAAMC,MAAN,CAAa,cAAb,IAA+B,MAA/B,GAAwC,QAA9D;AACA,QAAImE,gBAAgBpE,MAAMC,MAAN,CAAa,YAAb,IAA6B,MAA7B,GAAsC,QAA1D;;AAEA,QAAIsC,mBAAiBe,QAAQ,WAAzB,UAAyCC,IAAzC,MAAJ;AACAvD,UAAMkE,GAAN,CAAU;AAAA,oCAA+BG,OAAOC,KAAP,CAAa/B,GAAb,CAA/B;AAAA,KAAV,EAA8D,OAA9D;AACAvC,UAAMkE,GAAN,CAAU;AAAA,mCAA8BG,OAAOE,OAAP,CAAevE,MAAMiD,OAArB,CAA9B;AAAA,KAAV,EAAyE,OAAzE;AACAjD,UAAMkE,GAAN,CAAU;AAAA,kCAA6BG,OAAOE,OAAP,CAAeH,aAAf,CAA7B;AAAA,KAAV,EAAwE,OAAxE;AACApE,UAAMkE,GAAN,CAAU;AAAA,oCAA+BG,OAAOE,OAAP,CAAeJ,eAAf,CAA/B;AAAA,KAAV,EAA4E,OAA5E;AACAnE,UAAMkE,GAAN,CAAU;AAAA,qCAAgCG,OAAOE,OAAP,CAAe,CAAC,CAACvE,MAAMwE,WAAvB,CAAhC;AAAA,KAAV,EAAiF,OAAjF;AACAxE,UAAMkE,GAAN,CAAU;AAAA,oCAA+BG,OAAOE,OAAP,CAAevE,MAAMC,MAAN,CAAa,aAAb,CAAf,CAA/B;AAAA,KAAV,EAAwF,OAAxF;AACAD,UAAMkE,GAAN,CAAU;AAAA,kCAA6BG,OAAOE,OAAP,CAAevE,MAAMyE,GAArB,CAA7B;AAAA,KAAV,EAAsE,OAAtE;AACD,G;AACD;;;;;;SAIaC,G;;;;;;;;qBACM1E,MAAMS,IAAN,CAAWT,MAAM0E,GAAjB,C;;;AAAbjE,kB;gDACG,IAAI,IAAJ,CAASA,IAAT,EAAesC,GAAf,E;;;;;;;;;;;;;;;;AAET;;;;;;SAIOtC,I,mBAAM;AACX,QAAIkE,OAAO3E,MAAMC,MAAN,CAAa,YAAb,CAAX;AACA,QAAI,CAAC0E,IAAL,EAAW;AACT,WAAKvB,YAAL;AACA,aAAO,KAAKc,GAAL,EAAP;AACD;AACD,QAAIS,SAAS,IAAb,EAAmB;AACjBA,aAAO,aAAGC,IAAH,GAAUC,MAAjB;AACD;AACD,QAAI,kBAAQC,QAAZ,EAAsB;AACpB,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,IAApB,EAA0BI,GAA1B,EAA+B;AAC7B,0BAAQC,IAAR;AACD;AACD,wBAAQ7B,EAAR,CAAW,MAAX,EAAmB,kBAAU;AAC3BnD,cAAMkE,GAAN,CAAU,IAAI7B,KAAJ,CAAUrC,MAAMsC,MAAN,CAAa,aAAb,EAA4B2C,OAAOC,OAAP,CAAeC,GAA3C,CAAV,CAAV,EAAsE,OAAtE;AACAD,gBAAQE,QAAR,CAAiB;AAAA,iBAAM,kBAAQJ,IAAR,EAAN;AAAA,SAAjB;AACD,OAHD;AAIA,WAAKd,GAAL;AACD,KATD,MASM;AACJ,WAAKd,YAAL;AACD;AACF,G;AACD;;;;;;SAIOL,G,kBAAK;AACV,QAAI/C,MAAM0E,GAAV,EAAe;AACb,aAAO,KAAKA,GAAL,EAAP;AACD;AACD,WAAO,KAAKjE,IAAL,EAAP;AACD,G;;;EAzR0BT,MAAMS,IAAN,CAAW4E,I","file":"app.js","sourcesContent":["'use strict';\n\nimport cluster from 'cluster';\nimport domain from 'domain';\nimport os from 'os';\nimport http from 'http';\n\nexport default class extends think.http.base {\n  /**\n   * invoke logic\n   * @return {} []\n   */\n  invokeLogic(){\n    if(!think.config('logic_on')){\n      return;\n    }\n\n    return this.hook('logic_before').then(() => {\n      return this.execLogic();\n    }).catch(err => {\n      //ignore prevent reject promise\n      //make logic_after hook can be invoked\n      if(!think.isPrevent(err)){\n        return Promise.reject(err);\n      }\n    }).then(() => {\n      return this.hook('logic_after');\n    }).then(() => {\n      //http is end\n      if (this.http._isEnd) {\n        return think.prevent();\n      }\n    });\n  }\n  /**\n   * exec logic\n   * @return {Promise} []\n   */\n  execLogic(){\n    let name = `${this.http.module}/${think.dirname.logic}/${this.http.controller}`;\n    let cls = think.require(name, true);\n    if (!cls) {\n      return Promise.resolve();\n    }\n    let instance = new cls(this.http);\n    let action = think.camelCase(this.http.action);\n    if (instance[`${action}Action`]) {\n      return this.action(instance, action, false);\n    }\n    //call action\n    if (instance.__call) {\n      return this.action(instance, '__call', false);\n    }\n    //only has before method\n    if(instance.__before){\n      return think.co(instance.__before(instance));\n    }\n    return Promise.resolve();\n  }\n  /**\n   * invoke controller\n   * @return {} []\n   */\n  invokeController(controller){\n    return this.hook('controller_before').then(() => {\n      return this.execController(controller);\n    }).catch(err => {\n      //ignore prevent reject promise\n      //make controller_after & response_end hook can be invoked\n      if(!think.isPrevent(err)){\n        return Promise.reject(err);\n      }\n    }).then(() => {\n      return this.hook('controller_after');\n    });\n  }\n  /**\n   * get controller instance\n   * @return {} []\n   */\n  getControllerInstance(){\n    let http = this.http;\n    let name = `${http.module}/${think.dirname.controller}/${http.controller}`;\n    let Controller = think.require(name, true);\n    if (!Controller) {\n      return;\n    }\n    let instance = new Controller(http);\n    //rewrite action when controller is rest\n    if(instance._isRest){\n      let method = instance._method;\n      //get method from GET params\n      if(method){\n        method = instance.get(method).toLowerCase();\n      }\n      if(!method){\n        method = this.http.method.toLowerCase();\n      }\n      this.http.action = method;\n    }\n    return instance;\n  }\n  /**\n   * exec controller\n   * @return {Promise} []\n   */\n  execController(controller){\n    if (controller) {\n      return this.execAction(controller);\n    }\n    let http = this.http;\n    http.error = new Error(think.locale('CONTROLLER_NOT_FOUND', http.controller, http.url));\n    return think.statusAction(404, http);\n  }\n  /**\n   * exec action\n   * @param  {Object} controller [controller instance]\n   * @param  {Boolean} call       [is call controller]\n   * @return {Promise}            []\n   */\n  execAction(controller){\n    let http = this.http;\n    let action = think.camelCase(http.action);\n    let actionWithSuffix = `${action}Action`;\n    //action is exist\n    if(controller[actionWithSuffix]){\n      return this.action(controller, action, false);\n    }\n    //call action\n    if(controller.__call){\n      return this.action(controller, '__call', false);\n    }\n    http.error = new Error(think.locale('ACTION_NOT_FOUND', actionWithSuffix, http.url));\n    return think.statusAction(404, http);\n  }\n\n  /**\n   * exec \n   * @return {Promise} []\n   */\n  async exec(){\n    await this.hook('resource');\n    await this.hook('route_parse');\n\n    //set module config, can not set config in request\n    this.http._config = thinkData.config[this.http.module];\n    //console.log(eval('%HasFastProperties(this.http._config)'));\n\n    //babel compile error\n    if(think.compileError){\n      this.http.error = think.compileError;\n      return think.statusAction(500, this.http);\n    }\n    //must get controller before invoke logic\n    let controller = this.getControllerInstance();\n\n    await this.invokeLogic();\n    await this.invokeController(controller);\n    await this.hook('response_end');\n  }\n  /**\n   * exec error\n   * @param  {Error} err []\n   * @return {}     []\n   */\n  execError(err){\n    let http = this.http;\n    http.error = err;\n    return think.statusAction(500, http, true).catch(() => {});\n  }\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    http.header('X-Powered-By', `thinkjs-${think.version}`);\n    \n    if(think.config('domain_on')){\n      let instance = domain.create();\n      instance.on('error', err => {\n        this.execError(err);\n      });\n      instance.run(() => {\n        this.exec().catch(err => {\n          this.execError(err);\n        });\n      });\n    }else{\n      this.exec().catch(err => {\n        this.execError(err);\n      });\n    }\n  }\n  /**\n   * create server\n   * @return {} []\n   */\n  static createServer(){\n    let handle = think.config('create_server');\n    let host = think.config('host');\n    let port = think.port || think.config('port'); \n    //createServer callback\n    let callback = (req, res) => {\n      think.http(req, res).then(http => {\n        new this(http).run();\n      });\n    };\n    let server;\n    //define createServer in application\n    if (handle) {\n      server = handle(callback, port, host, this);\n    }else{\n      //create server\n      server = http.createServer(callback);\n      server.listen(port, host);\n    }\n    think.server = server;\n    //start websocket\n    let websocket = think.parseConfig(think.config('websocket'));\n    if(websocket.on){\n      let Cls = think.adapter('websocket', websocket.type);\n      let instance = new Cls(server, websocket, this);\n      instance.run();\n    }\n  }\n  /**\n   * log\n   * @return {} []\n   */\n  static log(){\n    let host = think.config('host');\n    let port = think.port || think.config('port'); \n    let websocketStatus = think.config('websocket.on') ? 'open' : 'closed';\n    let clusterStatus = think.config('cluster_on') ? 'open' : 'closed';\n\n    let url = `http://${(host || '127.0.0.1')}:${port}/`;\n    think.log(colors => `Server running at ${colors.green(url)}`, 'THINK');\n    think.log(colors => `ThinkJS Version: ${colors.magenta(think.version)}`, 'THINK');\n    think.log(colors => `Cluster Status: ${colors.magenta(clusterStatus)}`, 'THINK');\n    think.log(colors => `WebSocket Status: ${colors.magenta(websocketStatus)}`, 'THINK');\n    think.log(colors => `File Auto Compile: ${colors.magenta(!!think.autoCompile)}`, 'THINK');\n    think.log(colors => `File Auto Reload: ${colors.magenta(think.config('auto_reload'))}`, 'THINK');\n    think.log(colors => `App Enviroment: ${colors.magenta(think.env)}\\n`, 'THINK');\n  }\n  /**\n   * cli mode\n   * @return {} []\n   */\n  static async cli(){\n    let http = await think.http(think.cli);\n    return new this(http).run();\n  }\n  /**\n   * http mode\n   * @return {} []\n   */\n  static http(){\n    let nums = think.config('cluster_on');\n    if (!nums) {\n      this.createServer();\n      return this.log();\n    }\n    if (nums === true) {\n      nums = os.cpus().length;\n    }\n    if (cluster.isMaster) {\n      for (let i = 0; i < nums; i++) {\n        cluster.fork();\n      }\n      cluster.on('exit', worker => {\n        think.log(new Error(think.locale('WORKER_DIED', worker.process.pid)), 'THINK');\n        process.nextTick(() => cluster.fork());\n      });\n      this.log();\n    }else {\n      this.createServer();\n    }\n  }\n  /**\n   * run\n   * @return {} []\n   */\n  static run(){\n    if (think.cli) {\n      return this.cli();\n    }\n    return this.http();\n  }\n}\n"]}