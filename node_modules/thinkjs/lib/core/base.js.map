{"version":3,"sources":["../../src/core/base.js"],"names":["init","invoke","method","data","__before","think","co","reject","Error","locale","result","__after","basename","filepath","__filename","parseModuleFromPath","mode","mode_module","prefix","APP_PATH","sep","pos","indexOf","nextPos","length","module","slice"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAEA;;;;;;AAME;;;;;AAKA,oBAAoB;AAAA;;AAClB,SAAKA,IAAL;AACD;AACD;;;;;;;mBAKAA,I,mBAAM,CACL,C;AACD;;;;;;;;mBAMMC,M;2FAAOC,M;wCAAWC,I;AAAAA,Y;;;;;;;;mBAClB,KAAKC,Q;;;;;;qBACDC,MAAMC,EAAN,CAAS,KAAKF,QAAL,CAAc,IAAd,CAAT,C;;;kBAGH,KAAKF,MAAL,C;;;;;+CACI,kBAAQK,MAAR,CAAe,IAAIC,KAAJ,CAAUH,MAAMI,MAAN,CAAa,kBAAb,EAAiCP,MAAjC,CAAV,CAAf,C;;;;qBAEUG,MAAMC,EAAN,CAAS,KAAKJ,MAAL,cAAgBC,IAAhB,CAAT,C;;;AAAfO,oB;;mBACA,KAAKC,O;;;;;;qBACDN,MAAMC,EAAN,CAAS,KAAKK,OAAL,CAAa,IAAb,CAAT,C;;;+CAEDD,M;;;;;;;;;;;;;;;;AAET;;;;;;;mBAKAE,Q,uBAAoC;AAAA,QAA3BC,QAA2B,uEAAhB,KAAKC,UAAW;;AAClC,WAAO,eAAKF,QAAL,CAAcC,QAAd,EAAwB,KAAxB,CAAP;AACD,G;AACD;;;;;;;mBAKAE,mB,kCAA+C;AAAA,QAA3BF,QAA2B,uEAAhB,KAAKC,UAAW;;AAC7C,QAAI,CAACD,QAAL,EAAc;AACZ,aAAO,EAAP;AACD;AACD,QAAIR,MAAMW,IAAN,KAAeX,MAAMY,WAAzB,EAAqC;AACnC,aAAO,EAAP;AACD;AACD,QAAIC,SAASb,MAAMc,QAAN,GAAiBd,MAAMe,GAApC;AACA,QAAIC,MAAMR,SAASS,OAAT,CAAiBJ,MAAjB,CAAV;AACA,QAAIG,QAAQ,CAAC,CAAb,EAAe;AACb,aAAO,EAAP;AACD;AACD,QAAIE,UAAUV,SAASS,OAAT,CAAiBjB,MAAMe,GAAvB,EAA4BC,MAAMH,OAAOM,MAAzC,CAAd;AACA,QAAID,YAAY,CAAC,CAAjB,EAAmB;AACjB,aAAO,EAAP;AACD;AACD,QAAIE,SAASZ,SAASa,KAAT,CAAeL,MAAMH,OAAOM,MAA5B,EAAoCD,OAApC,CAAb;AACA,QAAIlB,MAAMoB,MAAN,CAAaH,OAAb,CAAqBG,MAArB,IAA+B,CAAC,CAApC,EAAsC;AACpC,aAAOA,MAAP;AACD;AACD,WAAO,EAAP;AACD,G","file":"base.js","sourcesContent":["'use strict';\n\nimport path from 'path';\n\n/**\n * Base Class\n * @param  {Object} http\n * @return {Class}\n */\nexport default class {\n  /**\n   * constructor\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  constructor(...args){\n    this.init(...args);\n  }\n  /**\n   * init\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  init(){\n  }\n  /**\n   * invoke method, support __before & __after magic methods\n   * @param  {String} method []\n   * @param  {mixed} data []\n   * @return {Promise}    []\n   */\n  async invoke(method, ...data){\n    if (this.__before) {\n      await think.co(this.__before(this));\n    }\n    // Check whether method exists\n    if (!this[method]){\n      return Promise.reject(new Error(think.locale('METHOD_NOT_EXIST', method)));\n    }\n    let result = await think.co(this[method](...data));\n    if (this.__after) {\n      await think.co(this.__after(this));\n    }\n    return result;\n  }\n  /**\n   * get file basename\n   * @param  {String} filepath []\n   * @return {String}          []\n   */\n  basename(filepath = this.__filename){\n    return path.basename(filepath, '.js');\n  }\n  /**\n   * parse module from filepath\n   * @param  {String} filepath []\n   * @return {String}          []\n   */\n  parseModuleFromPath(filepath = this.__filename){\n    if (!filepath){\n      return '';\n    }\n    if (think.mode !== think.mode_module){\n      return '';\n    }\n    let prefix = think.APP_PATH + think.sep;\n    let pos = filepath.indexOf(prefix);\n    if (pos === -1){\n      return '';\n    }\n    let nextPos = filepath.indexOf(think.sep, pos + prefix.length);\n    if (nextPos === -1){\n      return '';\n    }\n    let module = filepath.slice(pos + prefix.length, nextPos);\n    if (think.module.indexOf(module) > -1){\n      return module;\n    }\n    return '';\n  }\n}\n"]}