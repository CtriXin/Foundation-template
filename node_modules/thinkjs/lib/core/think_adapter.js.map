{"version":3,"sources":["../../src/core/think_adapter.js"],"names":["Adapter","args","type","name","fn","length","key","think","isFunction","thinkData","export","isObject","Class","adapter","isString","indexOf","get","create","nameLower","toLowerCase","log","colors","yellow","cls","require","load","Error","locale","superClass","paths","THINK_LIB_PATH","sep","base","safeRequire","adapterPath","getPath","undefined","dirname","isDir","push","forEach","filepath","path","isFile","alias","dirs","readdirSync","dir"],"mappings":"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","file":"think_adapter.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\n\n/**\n * create, register, call adapter\n * @param  {String} name []\n * @return {void}      []\n */\nlet Adapter = (...args) => {\n  let [type, name, fn] = args;\n  let length = args.length, key = 'adapter_';\n  if(length === 3){\n    //register adapter\n    //think.adapter('session', 'redis', function(){})\n    if (think.isFunction(fn)) {\n      key += `${type}_${name}`;\n      thinkData.export[key] = fn;\n      return;\n    }\n    //create adapter\n    //module.exports = think.adapter('session', 'memory', {})\n    else if(think.isObject(fn)){\n      return think.Class(think.adapter(type, name), fn);\n    }\n  }\n  //type has not _\n  else if(length === 2 && think.isString(type) && type.indexOf('_') === -1){\n    //create adapter\n    //module.exports = think.adapter('session', {})\n    if(think.isObject(name)){\n      return think.Class(think.adapter(type, 'base'), name);\n    }\n    //get adapter\n    //think.adapter('session', 'redis')\n    else if (think.isString(name)) {\n      return Adapter.get(type, name);\n    }\n  }\n  \n  return Adapter.create(type, name);\n};\n\n//get adapter\n//think.adapter('session', 'redis')\nAdapter.get = (type, name) => {\n  let key = 'adapter_';\n  let nameLower = name.toLowerCase();\n  if(name !== nameLower){\n    name = nameLower;\n    think.log(colors => {\n      return colors.yellow(`[WARNING]`) + ` adapter type \\`${name}\\` has uppercase chars.`;\n    });\n  }\n  \n  key += type + '_' + name;\n  let cls = think.require(key, true);\n  if (cls) {\n    return cls;\n  }else{\n    Adapter.load(type, name);\n    let cls = think.require(key, true);\n    if(cls){\n      return cls;\n    }\n  }\n  throw new Error(think.locale('ADAPTER_NOT_FOUND', key));\n};\n\n//create adapter\n//module.exports = think.adapter({})\n//module.exports = think.adapter(function(){}, {});\nAdapter.create = (type, name) => {\n  let superClass;\n  if (think.isFunction(type)) {\n    superClass = type;\n  }else if (think.isString(type)) {\n    superClass = think.require(type);\n  }\n  //create clean Class\n  if (!superClass) {\n    return think.Class(type);\n  }\n  return think.Class(superClass, name);\n};\n\n/**\n * load system & comon module adapter\n * @return {} []\n */\nAdapter.load = (type, name = 'base') => {\n  let paths = [`${think.THINK_LIB_PATH}${think.sep}adapter`];\n  \n  //load base adapter\n  if(!think.adapter.base){\n    think.adapter.base = think.safeRequire(paths[0] + '/base.js');\n  }\n  \n  //common module adapter\n  let adapterPath = think.getPath(undefined, think.dirname.adapter);\n  if (think.isDir(adapterPath)) {\n    paths.push(adapterPath);\n  }\n  paths.forEach(path => {\n    if(type){\n      let filepath = `${path}${think.sep}${type}${think.sep}${name}.js`;\n      if(think.isFile(filepath)){\n        thinkData.alias[`adapter_${type}_${name}`] = filepath;\n      }\n    }else{\n      let dirs = fs.readdirSync(path);\n      dirs.forEach(dir => {\n        if(!think.isDir(`${path}/${dir}`)){\n          return;\n        }\n        think.alias(`adapter_${dir}`, `${path}${think.sep}${dir}`);\n      });\n    }\n  });\n};\n\nexport default Adapter;"]}