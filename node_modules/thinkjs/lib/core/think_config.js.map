{"version":3,"sources":["../../src/core/think_config.js"],"names":["_getItemConfig","configPath","item","fileFilters","dirFilters","think","isDir","indexOf","_getConfig","slice","conf","safeRequire","config","readdirSync","forEach","data","extend","_transformConfig","transforms","key","value","isFunction","_getModuleConfig","module","dirname","common","moduleConfig","thinkData","rootPath","THINK_LIB_PATH","getPath","envConfig","extraConfig","env","_setConfig","name","flag","configs","map","isObject","itemData","isString","names","split","Config","undefined"],"mappings":"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","file":"think_config.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\n\n\n/**\n * get item config\n * @param  {} configPath []\n * @param  {} item       []\n * @return {}            []\n */\nlet _getItemConfig = (configPath, item) => {\n  let fileFilters = ['config', 'route', 'hook'];\n  let dirFilters = ['env', 'sys'];\n  if(think.isDir(`${configPath}/${item}`)){\n    if(dirFilters.indexOf(item) === -1){\n      return {\n        [item]: _getConfig(`${configPath}/${item}`)\n      };\n    }\n    return;\n  }\n  item = item.slice(0, -3);\n  if(item[0] === '_' || fileFilters.indexOf(item) > -1){\n    return;\n  }\n  let conf = think.safeRequire(`${configPath}/${item}.js`);\n  if(conf){\n    return {[item]: conf};\n  }\n};\n\n/**\n * get module config\n * @param  {String} module []\n * @return {Object}        []\n */\nlet _getConfig = configPath => {\n  let config = {};\n  if(!think.isDir(configPath)){\n    return config;\n  }\n  fs.readdirSync(configPath).forEach(item => {\n    let data = _getItemConfig(configPath, item);\n    config = think.extend(config, data);\n  });\n  return config;\n};\n\n/**\n * transform config\n * @param  {Object} config []\n * @return {Object}        []\n */\nlet _transformConfig = (config, transforms) => {\n  for(let key in transforms){\n    if (!(key in config)) {\n      continue;\n    }\n    let value = transforms[key];\n    if (think.isFunction(value)) {\n      config[key] = value(config[key], config);\n    }else {\n      config[key] = _transformConfig(config[key], value);\n    }\n  }\n  return config;\n};\n\nlet _getModuleConfig = (module = think.dirname.common) => {\n\n  //get module config from cache\n  let moduleConfig = thinkData.config;\n  if (moduleConfig[module]) {\n    return moduleConfig[module];\n  }\n\n  let rootPath;\n  //get sys config\n  if (module === true) {\n    rootPath = `${think.THINK_LIB_PATH}/config`;\n  }else{\n    rootPath = think.getPath(module, think.dirname.config);\n  }\n\n  //config.js\n  let config = think.safeRequire(`${rootPath}/config.js`);\n  let envConfig = {}, extraConfig = _getConfig(rootPath);\n\n  envConfig = think.safeRequire(`${rootPath}/env/${think.env}.js`);\n  envConfig = think.extend(envConfig, _getConfig(`${rootPath}/env/${think.env}`));\n\n  //merge all configs\n  config = think.extend({}, config, extraConfig, envConfig);\n  //merge sys, common configs to module\n  if(module !== true){\n    if(module === think.dirname.common){\n      config = think.extend({}, _getModuleConfig(true), config);\n    }else{\n      config = think.extend({}, _getModuleConfig(), config);\n    }\n  }\n  //transform config\n  let transforms = think.safeRequire(`${think.THINK_LIB_PATH}/config/sys/transform.js`);\n  config = _transformConfig(config, transforms);\n\n  if(module !== true){\n    thinkData.config[module] = config;\n  }\n\n  return config;\n};\n\n\n/**\n * get or set config\n * @return {mixed} []\n */\n//if set common config, must sync to module config\nlet _setConfig = (name, value, flag, data) => {\n  let configs = [];\n  if(flag){\n    configs = think.module.map(item => _getModuleConfig(item));\n  }\n  [data, ...configs].forEach(itemData => {\n    if(think.isObject(name)){\n      think.extend(itemData, name);\n    }\n    else if(think.isString(name)){\n      //name = name.toLowerCase();\n      if (name.indexOf('.') === -1) {\n        itemData[name] = value;\n      }else{\n        let names = name.split('.');\n        itemData[names[0]] = itemData[names[0]] || {};\n        itemData[names[0]][names[1]] = value;\n      }\n    }\n\n  });\n};\n\nlet Config = (name, value, data) => {\n  let flag = !data;\n\n  //convert data to undefined when is null (in http._config)\n  if(data === null) {\n    data = undefined;\n  }\n  //get data from module config\n  if(!think.isObject(data)){\n    data = _getModuleConfig(data);\n  }\n  // get all config\n  if (name === undefined) {\n    return data;\n  }\n  // merge config\n  if (think.isObject(name) || value !== undefined) {\n    return _setConfig(name, value, flag, data);\n  }\n  //get config\n  if (name.indexOf('.') === -1) {\n    return data[name];\n  }\n  name = name.split('.');\n  value = data[name[0]] || {};\n  return value[name[1]];\n};\n\nexport default Config;"]}