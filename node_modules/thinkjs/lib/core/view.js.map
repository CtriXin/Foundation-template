{"version":3,"sources":["../../src/core/view.js"],"names":["init","http","tVar","assign","name","value","undefined","think","isString","key","display","templateFile","charset","contentType","config","isObject","hook","fetch","content","render","error","statusAction","prevent","type","end","checkTemplateExist","cacheData","thinkData","template","isFile","data","extend","isAbsolute","err","Error","locale","reject","promises","map","isPromise","then","all","data4ViewParse","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAEA;;;;;;;;;;;;AAKE;;;;;mBAKAA,I,iBAAKC,I,EAAK;AACR,+BAAMD,IAAN,YAAWC,IAAX;AACA,SAAKC,IAAL,GAAY,EAAZ;AACD,G;AACD;;;;;;;;mBAMAC,M,mBAAOC,I,EAAMC,K,EAAM;AACjB,QAAID,SAASE,SAAb,EAAwB;AACtB,aAAO,KAAKJ,IAAZ;AACD,KAFD,MAEM,IAAIG,UAAUC,SAAd,EAAyB;AAC7B,UAAIC,MAAMC,QAAN,CAAeJ,IAAf,CAAJ,EAA0B;AACxB,eAAO,KAAKF,IAAL,CAAUE,IAAV,CAAP;AACD,OAFD,MAEK;AACH,aAAI,IAAIK,GAAR,IAAeL,IAAf,EAAoB;AAClB,eAAKF,IAAL,CAAUO,GAAV,IAAiBL,KAAKK,GAAL,CAAjB;AACD;AACF;AACF,KARK,MAQD;AACH,WAAKP,IAAL,CAAUE,IAAV,IAAkBC,KAAlB;AACD;AACF,G;AACD;;;;;;;;;mBAOMK,O;2FAAQC,Y,EAAcC,O,EAASC,W,EAAaC,M;;;;;;AAChD,kBAAGP,MAAMQ,QAAN,CAAeH,OAAf,CAAH,EAA2B;AACzBE,yBAASF,OAAT;AACAA,0BAAU,EAAV;AACD,eAHD,MAGM,IAAGL,MAAMQ,QAAN,CAAeF,WAAf,CAAH,EAA+B;AACnCC,yBAASD,WAAT;AACAA,8BAAc,EAAd;AACD;;;qBAEO,KAAKG,IAAL,CAAU,aAAV,C;;;;qBACc,KAAKC,KAAL,CAAWN,YAAX,EAAyBL,SAAzB,EAAoCQ,MAApC,C;;;AAAhBI,qB;;qBACE,KAAKC,MAAL,CAAYD,OAAZ,EAAqBN,OAArB,EAA8BC,WAA9B,C;;;;qBACA,KAAKG,IAAL,CAAU,YAAV,EAAwBE,OAAxB,C;;;;;;;;;;AAEN,mBAAKjB,IAAL,CAAUmB,KAAV;;qBACMb,MAAMc,YAAN,CAAmB,GAAnB,EAAwB,KAAKpB,IAA7B,EAAmC,IAAnC,C;;;+CAEDM,MAAMe,OAAN,E;;;;;;;;;;;;;;;;AAET;;;;;;;;;mBAOAH,M,qBAAiH;AAAA,QAA1GD,OAA0G,uEAAhG,EAAgG;AAAA,QAA5FN,OAA4F,uEAAlF,KAAKX,IAAL,CAAUa,MAAV,CAAiB,UAAjB,CAAkF;AAAA,QAApDD,WAAoD,uEAAtC,KAAKZ,IAAL,CAAUa,MAAV,CAAiB,mBAAjB,CAAsC;;AAC/G,SAAKb,IAAL,CAAUsB,IAAV,CAAeV,WAAf,EAA4BD,OAA5B;AACA,WAAO,KAAKX,IAAL,CAAUuB,GAAV,CAAcN,OAAd,EAAuBN,OAAvB,CAAP;AACD,G;AACD;;;;;;;;mBAMAa,kB,+BAAmBd,Y,EAAa;AAC9B,QAAIe,YAAYC,UAAUC,QAA1B;AACA,QAAIjB,gBAAgBe,SAApB,EAA+B;AAC7B,aAAO,IAAP;AACD;AACD,QAAInB,MAAMsB,MAAN,CAAalB,YAAb,CAAJ,EAAgC;AAC9B;AACAe,gBAAUf,YAAV,IAA0B,IAA1B;AACA,aAAO,IAAP;AACD;AACD,WAAO,KAAP;AACD,G;AACD;;;;;;;mBAKMM,K;6FAAMN,Y,EAAcmB,I,EAAMhB,M;;;;;;AAC1BZ,kB,GAAO4B,QAAQvB,MAAMQ,QAAN,CAAee,IAAf,CAAR,GAA+BA,IAA/B,GAAsC,KAAK5B,I;;AACtDY,uBAASP,MAAMwB,MAAN,CAAa;AACpBpB,8BAAcA;AADM,eAAb,EAEN,KAAKG,MAAL,CAAY,MAAZ,CAFM,EAEeA,MAFf,CAAT;;oBAII,CAACH,YAAD,IAAiB,CAAC,eAAKqB,UAAL,CAAgBrB,YAAhB,C;;;;;;qBACC,KAAKK,IAAL,CAAU,eAAV,EAA2BF,MAA3B,C;;;AAArBH,0B;;;kBAGE,KAAKc,kBAAL,CAAwBd,YAAxB,C;;;;;AACEsB,iB,GAAM,IAAIC,KAAJ,CAAU3B,MAAM4B,MAAN,CAAa,oBAAb,EAAmCxB,YAAnC,CAAV,C;gDACHJ,MAAM6B,MAAN,CAAaH,GAAb,C;;;AAGLI,sB,GAAW,oBAAYnC,IAAZ,EAAkBoC,GAAlB,CAAsB,UAAC7B,GAAD,EAAS;AAC5C,oBAAI,CAACF,MAAMgC,SAAN,CAAgBrC,KAAKO,GAAL,CAAhB,CAAL,EAAiC;AAC/B;AACD;AACD,uBAAOP,KAAKO,GAAL,EAAU+B,IAAV,CAAe,UAACV,IAAD,EAAU;AAC9B5B,uBAAKO,GAAL,IAAYqB,IAAZ;AACD,iBAFM,CAAP;AAGD,eAPc,C;;qBAQT,kBAAQW,GAAR,CAAYJ,QAAZ,C;;;AAEAK,4B,GAAiB;AACrB,uBAAOxC,IADc;AAErB,wBAAQS,YAFa;AAGrB,0BAAUG;AAHW,e;;qBAKH,KAAKE,IAAL,CAAU,YAAV,EAAwB0B,cAAxB,C;;;AAAhBxB,qB;;AACJ,kBAAIwB,mBAAmBxB,OAAvB,EAAgC;AAC9BA,0BAAU,EAAV;AACD;;gDAEM,KAAKF,IAAL,CAAU,aAAV,EAAyBE,OAAzB,C;;;;;;;;;;;;;;;;;;EA9HkBX,MAAMN,IAAN,CAAW0C,I","file":"view.js","sourcesContent":["'use strict';\n\nimport path from 'path';\n\n/**\n * view class\n * @return {} []\n */\nexport default class extends think.http.base {\n  /**\n   * init method\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  init(http){\n    super.init(http);\n    this.tVar = {};\n  }\n  /**\n   * assign\n   * @param  {String} name  []\n   * @param  {mixed} value []\n   * @return {}       []\n   */\n  assign(name, value){\n    if (name === undefined) {\n      return this.tVar;\n    }else if (value === undefined) {\n      if (think.isString(name)) {\n        return this.tVar[name];\n      }else{\n        for(let key in name){\n          this.tVar[key] = name[key];\n        }\n      }\n    }else{\n      this.tVar[name] = value;\n    }\n  }\n  /**\n   * output template file\n   * @param  {String} templateFile [template filepath]\n   * @param  {String} charset      [content encoding]\n   * @param  {String} contentType  [content type]\n   * @return {Promise}              []\n   */\n  async display(templateFile, charset, contentType, config){\n    if(think.isObject(charset)){\n      config = charset;\n      charset = '';\n    }else if(think.isObject(contentType)){\n      config = contentType;\n      contentType = '';\n    }\n    try{\n      await this.hook('view_before');\n      let content = await this.fetch(templateFile, undefined, config);\n      await this.render(content, charset, contentType);\n      await this.hook('view_after', content);\n    }catch(err){\n      this.http.error = err;\n      await think.statusAction(500, this.http, true);\n    }\n    return think.prevent();\n  }\n  /**\n   * render template content\n   * @param  {String} content     [template content]\n   * @param  {String} charset     [charset]\n   * @param  {String} contentType [contentType]\n   * @return {}             []\n   */\n  render(content = '', charset = this.http.config('encoding'), contentType = this.http.config('view.content_type')){\n    this.http.type(contentType, charset);\n    return this.http.end(content, charset);\n  }\n  /**\n   * check template filepath exist\n   * @param  {String} templateFile [template filepath]\n   * @param  {Boolean} inView       []\n   * @return {Promise}              []\n   */\n  checkTemplateExist(templateFile){\n    let cacheData = thinkData.template;\n    if (templateFile in cacheData) {\n      return true;\n    }\n    if (think.isFile(templateFile)) {\n      //add template file to cache\n      cacheData[templateFile] = true;\n      return true;\n    }\n    return false;\n  }\n  /**\n   * fetch template file content\n   * @param  {String} templateFile [template file]\n   * @return {Promise}             []\n   */\n  async fetch(templateFile, data, config){\n    let tVar = data && think.isObject(data) ? data : this.tVar;\n    config = think.extend({\n      templateFile: templateFile\n    }, this.config('view'), config);\n\n    if (!templateFile || !path.isAbsolute(templateFile)) {\n      templateFile = await this.hook('view_template', config);\n    }\n\n    if(!this.checkTemplateExist(templateFile)){\n      let err = new Error(think.locale('TEMPLATE_NOT_EXIST', templateFile));\n      return think.reject(err);\n    }\n    \n    let promises = Object.keys(tVar).map((key) => {\n      if (!think.isPromise(tVar[key])) {\n        return;\n      }\n      return tVar[key].then((data) => {\n        tVar[key] = data;\n      });\n    });\n    await Promise.all(promises);\n\n    const data4ViewParse = {\n      'var': tVar,\n      'file': templateFile,\n      'config': config\n    };\n    let content = await this.hook('view_parse', data4ViewParse);\n    if (data4ViewParse === content) {\n      content = '';\n    }\n\n    return this.hook('view_filter', content);\n  }\n}"]}